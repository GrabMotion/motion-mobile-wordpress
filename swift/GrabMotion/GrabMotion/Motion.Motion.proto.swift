// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file motion.proto

import Foundation
import ProtocolBuffers


internal struct Motion { }

internal func == (lhs: Motion.Message_, rhs: Motion.Message_) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasActivecam == rhs.hasActivecam) && (!lhs.hasActivecam || lhs.activecam == rhs.activecam)
  fieldCheck = fieldCheck && (lhs.hasTypes == rhs.hasTypes) && (!lhs.hasTypes || lhs.types == rhs.types)
  fieldCheck = fieldCheck && (lhs.hasTime == rhs.hasTime) && (!lhs.hasTime || lhs.time == rhs.time)
  fieldCheck = fieldCheck && (lhs.hasData == rhs.hasData) && (!lhs.hasData || lhs.data == rhs.data)
  fieldCheck = fieldCheck && (lhs.hasDataAmount == rhs.hasDataAmount) && (!lhs.hasDataAmount || lhs.dataAmount == rhs.dataAmount)
  fieldCheck = fieldCheck && (lhs.hasDataTotal == rhs.hasDataTotal) && (!lhs.hasDataTotal || lhs.dataTotal == rhs.dataTotal)
  fieldCheck = fieldCheck && (lhs.hasServerip == rhs.hasServerip) && (!lhs.hasServerip || lhs.serverip == rhs.serverip)
  fieldCheck = fieldCheck && (lhs.hasClientip == rhs.hasClientip) && (!lhs.hasClientip || lhs.clientip == rhs.clientip)
  fieldCheck = fieldCheck && (lhs.hasDevicestarttime == rhs.hasDevicestarttime) && (!lhs.hasDevicestarttime || lhs.devicestarttime == rhs.devicestarttime)
  fieldCheck = fieldCheck && (lhs.motioncamera == rhs.motioncamera)
  fieldCheck = fieldCheck && (lhs.hasCurrmonth == rhs.hasCurrmonth) && (!lhs.hasCurrmonth || lhs.currmonth == rhs.currmonth)
  fieldCheck = fieldCheck && (lhs.hasCurrday == rhs.hasCurrday) && (!lhs.hasCurrday || lhs.currday == rhs.currday)
  fieldCheck = fieldCheck && (lhs.hasCurrdaytitle == rhs.hasCurrdaytitle) && (!lhs.hasCurrdaytitle || lhs.currdaytitle == rhs.currdaytitle)
  fieldCheck = fieldCheck && (lhs.hasCurrcam == rhs.hasCurrcam) && (!lhs.hasCurrcam || lhs.currcam == rhs.currcam)
  fieldCheck = fieldCheck && (lhs.hasPackagesize == rhs.hasPackagesize) && (!lhs.hasPackagesize || lhs.packagesize == rhs.packagesize)
  fieldCheck = fieldCheck && (lhs.hasImagefilepath == rhs.hasImagefilepath) && (!lhs.hasImagefilepath || lhs.imagefilepath == rhs.imagefilepath)
  fieldCheck = fieldCheck && (lhs.hasVideofilepath == rhs.hasVideofilepath) && (!lhs.hasVideofilepath || lhs.videofilepath == rhs.videofilepath)
  fieldCheck = fieldCheck && (lhs.hasRecname == rhs.hasRecname) && (!lhs.hasRecname || lhs.recname == rhs.recname)
  fieldCheck = fieldCheck && (lhs.hasActivecamnum == rhs.hasActivecamnum) && (!lhs.hasActivecamnum || lhs.activecamnum == rhs.activecamnum)
  fieldCheck = fieldCheck && (lhs.hasClientnumber == rhs.hasClientnumber) && (!lhs.hasClientnumber || lhs.clientnumber == rhs.clientnumber)
  fieldCheck = fieldCheck && (lhs.hasServerurl == rhs.hasServerurl) && (!lhs.hasServerurl || lhs.serverurl == rhs.serverurl)
  fieldCheck = fieldCheck && (lhs.hasClientname == rhs.hasClientname) && (!lhs.hasClientname || lhs.clientname == rhs.clientname)
  fieldCheck = fieldCheck && (lhs.motionuser == rhs.motionuser)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: Motion.Message_.MotionUser, rhs: Motion.Message_.MotionUser) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasObjectId == rhs.hasObjectId) && (!lhs.hasObjectId || lhs.objectId == rhs.objectId)
  fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
  fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: Motion.Message_.MotionCamera, rhs: Motion.Message_.MotionCamera) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.motionmonth == rhs.motionmonth)
  fieldCheck = fieldCheck && (lhs.motionrec == rhs.motionrec)
  fieldCheck = fieldCheck && (lhs.hasCameraid == rhs.hasCameraid) && (!lhs.hasCameraid || lhs.cameraid == rhs.cameraid)
  fieldCheck = fieldCheck && (lhs.hasCameranumber == rhs.hasCameranumber) && (!lhs.hasCameranumber || lhs.cameranumber == rhs.cameranumber)
  fieldCheck = fieldCheck && (lhs.hasCameraname == rhs.hasCameraname) && (!lhs.hasCameraname || lhs.cameraname == rhs.cameraname)
  fieldCheck = fieldCheck && (lhs.hasHasrecjob == rhs.hasHasrecjob) && (!lhs.hasHasrecjob || lhs.hasrecjob == rhs.hasrecjob)
  fieldCheck = fieldCheck && (lhs.hasRecognizing == rhs.hasRecognizing) && (!lhs.hasRecognizing || lhs.recognizing == rhs.recognizing)
  fieldCheck = fieldCheck && (lhs.hasRecognizingFlag == rhs.hasRecognizingFlag) && (!lhs.hasRecognizingFlag || lhs.recognizingFlag == rhs.recognizingFlag)
  fieldCheck = fieldCheck && (lhs.hasDbIdcamera == rhs.hasDbIdcamera) && (!lhs.hasDbIdcamera || lhs.dbIdcamera == rhs.dbIdcamera)
  fieldCheck = fieldCheck && (lhs.hasDbIdrec == rhs.hasDbIdrec) && (!lhs.hasDbIdrec || lhs.dbIdrec == rhs.dbIdrec)
  fieldCheck = fieldCheck && (lhs.hasFromdatabase == rhs.hasFromdatabase) && (!lhs.hasFromdatabase || lhs.fromdatabase == rhs.fromdatabase)
  fieldCheck = fieldCheck && (lhs.motiontrack == rhs.motiontrack)
  fieldCheck = fieldCheck && (lhs.hasActivemat == rhs.hasActivemat) && (!lhs.hasActivemat || lhs.activemat == rhs.activemat)
  fieldCheck = fieldCheck && (lhs.hasMatcols == rhs.hasMatcols) && (!lhs.hasMatcols || lhs.matcols == rhs.matcols)
  fieldCheck = fieldCheck && (lhs.hasMatrows == rhs.hasMatrows) && (!lhs.hasMatrows || lhs.matrows == rhs.matrows)
  fieldCheck = fieldCheck && (lhs.hasMatwidth == rhs.hasMatwidth) && (!lhs.hasMatwidth || lhs.matwidth == rhs.matwidth)
  fieldCheck = fieldCheck && (lhs.hasMatheight == rhs.hasMatheight) && (!lhs.hasMatheight || lhs.matheight == rhs.matheight)
  fieldCheck = fieldCheck && (lhs.hasDbIdmat == rhs.hasDbIdmat) && (!lhs.hasDbIdmat || lhs.dbIdmat == rhs.dbIdmat)
  fieldCheck = fieldCheck && (lhs.hasTempdata == rhs.hasTempdata) && (!lhs.hasTempdata || lhs.tempdata == rhs.tempdata)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: Motion.Message_.MotionTrack, rhs: Motion.Message_.MotionTrack) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasDbIdinstance == rhs.hasDbIdinstance) && (!lhs.hasDbIdinstance || lhs.dbIdinstance == rhs.dbIdinstance)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: Motion.Message_.MotionRec, rhs: Motion.Message_.MotionRec) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasDbIdrec == rhs.hasDbIdrec) && (!lhs.hasDbIdrec || lhs.dbIdrec == rhs.dbIdrec)
  fieldCheck = fieldCheck && (lhs.hasTimestart == rhs.hasTimestart) && (!lhs.hasTimestart || lhs.timestart == rhs.timestart)
  fieldCheck = fieldCheck && (lhs.hasTimeend == rhs.hasTimeend) && (!lhs.hasTimeend || lhs.timeend == rhs.timeend)
  fieldCheck = fieldCheck && (lhs.hasRecname == rhs.hasRecname) && (!lhs.hasRecname || lhs.recname == rhs.recname)
  fieldCheck = fieldCheck && (lhs.hasCamerasince == rhs.hasCamerasince) && (!lhs.hasCamerasince || lhs.camerasince == rhs.camerasince)
  fieldCheck = fieldCheck && (lhs.hasStoreimage == rhs.hasStoreimage) && (!lhs.hasStoreimage || lhs.storeimage == rhs.storeimage)
  fieldCheck = fieldCheck && (lhs.hasStorevideo == rhs.hasStorevideo) && (!lhs.hasStorevideo || lhs.storevideo == rhs.storevideo)
  fieldCheck = fieldCheck && (lhs.hasCodename == rhs.hasCodename) && (!lhs.hasCodename || lhs.codename == rhs.codename)
  fieldCheck = fieldCheck && (lhs.hasHasregion == rhs.hasHasregion) && (!lhs.hasHasregion || lhs.hasregion == rhs.hasregion)
  fieldCheck = fieldCheck && (lhs.hasCoordinates == rhs.hasCoordinates) && (!lhs.hasCoordinates || lhs.coordinates == rhs.coordinates)
  fieldCheck = fieldCheck && (lhs.hasDelay == rhs.hasDelay) && (!lhs.hasDelay || lhs.delay == rhs.delay)
  fieldCheck = fieldCheck && (lhs.hasStartrectime == rhs.hasStartrectime) && (!lhs.hasStartrectime || lhs.startrectime == rhs.startrectime)
  fieldCheck = fieldCheck && (lhs.hasStoprectime == rhs.hasStoprectime) && (!lhs.hasStoprectime || lhs.stoprectime == rhs.stoprectime)
  fieldCheck = fieldCheck && (lhs.hasRunatstartup == rhs.hasRunatstartup) && (!lhs.hasRunatstartup || lhs.runatstartup == rhs.runatstartup)
  fieldCheck = fieldCheck && (lhs.hasActivemat == rhs.hasActivemat) && (!lhs.hasActivemat || lhs.activemat == rhs.activemat)
  fieldCheck = fieldCheck && (lhs.hasDbIdmat == rhs.hasDbIdmat) && (!lhs.hasDbIdmat || lhs.dbIdmat == rhs.dbIdmat)
  fieldCheck = fieldCheck && (lhs.hasDbIdcoordinates == rhs.hasDbIdcoordinates) && (!lhs.hasDbIdcoordinates || lhs.dbIdcoordinates == rhs.dbIdcoordinates)
  fieldCheck = fieldCheck && (lhs.hasDbIntervalid == rhs.hasDbIntervalid) && (!lhs.hasDbIntervalid || lhs.dbIntervalid == rhs.dbIntervalid)
  fieldCheck = fieldCheck && (lhs.hasMatcols == rhs.hasMatcols) && (!lhs.hasMatcols || lhs.matcols == rhs.matcols)
  fieldCheck = fieldCheck && (lhs.hasMatrows == rhs.hasMatrows) && (!lhs.hasMatrows || lhs.matrows == rhs.matrows)
  fieldCheck = fieldCheck && (lhs.hasMatwidth == rhs.hasMatwidth) && (!lhs.hasMatwidth || lhs.matwidth == rhs.matwidth)
  fieldCheck = fieldCheck && (lhs.hasMatheight == rhs.hasMatheight) && (!lhs.hasMatheight || lhs.matheight == rhs.matheight)
  fieldCheck = fieldCheck && (lhs.hasLastinstance == rhs.hasLastinstance) && (!lhs.hasLastinstance || lhs.lastinstance == rhs.lastinstance)
  fieldCheck = fieldCheck && (lhs.hasDbIdmonth == rhs.hasDbIdmonth) && (!lhs.hasDbIdmonth || lhs.dbIdmonth == rhs.dbIdmonth)
  fieldCheck = fieldCheck && (lhs.hasDbIdday == rhs.hasDbIdday) && (!lhs.hasDbIdday || lhs.dbIdday == rhs.dbIdday)
  fieldCheck = fieldCheck && (lhs.hasXmlfilepath == rhs.hasXmlfilepath) && (!lhs.hasXmlfilepath || lhs.xmlfilepath == rhs.xmlfilepath)
  fieldCheck = fieldCheck && (lhs.hasDbRecognitionsetupid == rhs.hasDbRecognitionsetupid) && (!lhs.hasDbRecognitionsetupid || lhs.dbRecognitionsetupid == rhs.dbRecognitionsetupid)
  fieldCheck = fieldCheck && (lhs.hasHascron == rhs.hasHascron) && (!lhs.hasHascron || lhs.hascron == rhs.hascron)
  fieldCheck = fieldCheck && (lhs.motioncron == rhs.motioncron)
  fieldCheck = fieldCheck && (lhs.hasSpeed == rhs.hasSpeed) && (!lhs.hasSpeed || lhs.speed == rhs.speed)
  fieldCheck = fieldCheck && (lhs.hasActiverec == rhs.hasActiverec) && (!lhs.hasActiverec || lhs.activerec == rhs.activerec)
  fieldCheck = fieldCheck && (lhs.hasMatbasefile == rhs.hasMatbasefile) && (!lhs.hasMatbasefile || lhs.matbasefile == rhs.matbasefile)
  fieldCheck = fieldCheck && (lhs.hasCreated == rhs.hasCreated) && (!lhs.hasCreated || lhs.created == rhs.created)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: Motion.Message_.MotionCron, rhs: Motion.Message_.MotionCron) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasCommand == rhs.hasCommand) && (!lhs.hasCommand || lhs.command == rhs.command)
  fieldCheck = fieldCheck && (lhs.hasProgram == rhs.hasProgram) && (!lhs.hasProgram || lhs.program == rhs.program)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: Motion.Message_.MotionMonth, rhs: Motion.Message_.MotionMonth) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.motionday == rhs.motionday)
  fieldCheck = fieldCheck && (lhs.hasMonthlabel == rhs.hasMonthlabel) && (!lhs.hasMonthlabel || lhs.monthlabel == rhs.monthlabel)
  fieldCheck = fieldCheck && (lhs.hasDbMonthid == rhs.hasDbMonthid) && (!lhs.hasDbMonthid || lhs.dbMonthid == rhs.dbMonthid)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: Motion.Message_.MotionDay, rhs: Motion.Message_.MotionDay) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.instance == rhs.instance)
  fieldCheck = fieldCheck && (lhs.hasDaylabel == rhs.hasDaylabel) && (!lhs.hasDaylabel || lhs.daylabel == rhs.daylabel)
  fieldCheck = fieldCheck && (lhs.hasDbDayid == rhs.hasDbDayid) && (!lhs.hasDbDayid || lhs.dbDayid == rhs.dbDayid)
  fieldCheck = fieldCheck && (lhs.hasXmlfilepath == rhs.hasXmlfilepath) && (!lhs.hasXmlfilepath || lhs.xmlfilepath == rhs.xmlfilepath)
  fieldCheck = fieldCheck && (lhs.hasTitle == rhs.hasTitle) && (!lhs.hasTitle || lhs.title == rhs.title)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: Motion.Message_.Instance, rhs: Motion.Message_.Instance) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIdinstance == rhs.hasIdinstance) && (!lhs.hasIdinstance || lhs.idinstance == rhs.idinstance)
  fieldCheck = fieldCheck && (lhs.hasNumber == rhs.hasNumber) && (!lhs.hasNumber || lhs.number == rhs.number)
  fieldCheck = fieldCheck && (lhs.hasInstancestart == rhs.hasInstancestart) && (!lhs.hasInstancestart || lhs.instancestart == rhs.instancestart)
  fieldCheck = fieldCheck && (lhs.hasInstanceend == rhs.hasInstanceend) && (!lhs.hasInstanceend || lhs.instanceend == rhs.instanceend)
  fieldCheck = fieldCheck && (lhs.hasFileformat == rhs.hasFileformat) && (!lhs.hasFileformat || lhs.fileformat == rhs.fileformat)
  fieldCheck = fieldCheck && (lhs.image == rhs.image)
  fieldCheck = fieldCheck && (lhs.crop == rhs.crop)
  fieldCheck = fieldCheck && (lhs.hasVideo == rhs.hasVideo) && (!lhs.hasVideo || lhs.video == rhs.video)
  fieldCheck = fieldCheck && (lhs.hasDir == rhs.hasDir) && (!lhs.hasDir || lhs.dir == rhs.dir)
  fieldCheck = fieldCheck && (lhs.hasXmlfile == rhs.hasXmlfile) && (!lhs.hasXmlfile || lhs.xmlfile == rhs.xmlfile)
  fieldCheck = fieldCheck && (lhs.hasExtdata == rhs.hasExtdata) && (!lhs.hasExtdata || lhs.extdata == rhs.extdata)
  fieldCheck = fieldCheck && (lhs.hasEnd == rhs.hasEnd) && (!lhs.hasEnd || lhs.end == rhs.end)
  fieldCheck = fieldCheck && (lhs.hasBegintime == rhs.hasBegintime) && (!lhs.hasBegintime || lhs.begintime == rhs.begintime)
  fieldCheck = fieldCheck && (lhs.hasEndtime == rhs.hasEndtime) && (!lhs.hasEndtime || lhs.endtime == rhs.endtime)
  fieldCheck = fieldCheck && (lhs.hasInittime == rhs.hasInittime) && (!lhs.hasInittime || lhs.inittime == rhs.inittime)
  fieldCheck = fieldCheck && (lhs.hasInstance == rhs.hasInstance) && (!lhs.hasInstance || lhs.instance == rhs.instance)
  fieldCheck = fieldCheck && (lhs.hasInstancecode == rhs.hasInstancecode) && (!lhs.hasInstancecode || lhs.instancecode == rhs.instancecode)
  fieldCheck = fieldCheck && (lhs.hasTimeinfo == rhs.hasTimeinfo) && (!lhs.hasTimeinfo || lhs.timeinfo == rhs.timeinfo)
  fieldCheck = fieldCheck && (lhs.hasDbDayid == rhs.hasDbDayid) && (!lhs.hasDbDayid || lhs.dbDayid == rhs.dbDayid)
  fieldCheck = fieldCheck && (lhs.hasDbRecognitionSetupId == rhs.hasDbRecognitionSetupId) && (!lhs.hasDbRecognitionSetupId || lhs.dbRecognitionSetupId == rhs.dbRecognitionSetupId)
  fieldCheck = fieldCheck && (lhs.hasRecname == rhs.hasRecname) && (!lhs.hasRecname || lhs.recname == rhs.recname)
  fieldCheck = fieldCheck && (lhs.hasCamera == rhs.hasCamera) && (!lhs.hasCamera || lhs.camera == rhs.camera)
  fieldCheck = fieldCheck && (lhs.hasCameranumber == rhs.hasCameranumber) && (!lhs.hasCameranumber || lhs.cameranumber == rhs.cameranumber)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: Motion.Message_.Image, rhs: Motion.Message_.Image) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasPath == rhs.hasPath) && (!lhs.hasPath || lhs.path == rhs.path)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasImagechanges == rhs.hasImagechanges) && (!lhs.hasImagechanges || lhs.imagechanges == rhs.imagechanges)
  fieldCheck = fieldCheck && (lhs.hasTime == rhs.hasTime) && (!lhs.hasTime || lhs.time == rhs.time)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: Motion.Message_.Crop, rhs: Motion.Message_.Crop) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasRect == rhs.hasRect) && (!lhs.hasRect || lhs.rect == rhs.rect)
  fieldCheck = fieldCheck && (lhs.hasDbImagefatherid == rhs.hasDbImagefatherid) && (!lhs.hasDbImagefatherid || lhs.dbImagefatherid == rhs.dbImagefatherid)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: Motion.Message_.Video, rhs: Motion.Message_.Video) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasPath == rhs.hasPath) && (!lhs.hasPath || lhs.path == rhs.path)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasInstancefolder == rhs.hasInstancefolder) && (!lhs.hasInstancefolder || lhs.instancefolder == rhs.instancefolder)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal extension Motion {
  internal struct MotionRoot {
    internal static var sharedInstance : MotionRoot {
     struct Static {
         static let instance : MotionRoot = MotionRoot()
     }
     return Static.instance
    }
    internal var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    internal func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final internal class Message_ : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final internal class MotionUser : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasObjectId:Bool = false
        private(set) var objectId:String = ""

        private(set) var hasUsername:Bool = false
        private(set) var username:String = ""

        private(set) var hasPassword:Bool = false
        private(set) var password:String = ""

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasObjectId {
            try output.writeString(1, value:objectId)
          }
          if hasUsername {
            try output.writeString(2, value:username)
          }
          if hasPassword {
            try output.writeString(5, value:password)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasObjectId {
            serialize_size += objectId.computeStringSize(1)
          }
          if hasUsername {
            serialize_size += username.computeStringSize(2)
          }
          if hasPassword {
            serialize_size += password.computeStringSize(5)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Motion.Message_.MotionUser> {
          var mergedArray = Array<Motion.Message_.MotionUser>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Motion.Message_.MotionUser? {
          return try Motion.Message_.MotionUser.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        internal class func parseFromData(data:NSData) throws -> Motion.Message_.MotionUser {
          return try Motion.Message_.MotionUser.Builder().mergeFromData(data, extensionRegistry:Motion.MotionRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionUser {
          return try Motion.Message_.MotionUser.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) throws -> Motion.Message_.MotionUser {
          return try Motion.Message_.MotionUser.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionUser {
          return try Motion.Message_.MotionUser.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.MotionUser {
          return try Motion.Message_.MotionUser.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionUser {
          return try Motion.Message_.MotionUser.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> Motion.Message_.MotionUser.Builder {
          return Motion.Message_.MotionUser.classBuilder() as! Motion.Message_.MotionUser.Builder
        }
        internal func getBuilder() -> Motion.Message_.MotionUser.Builder {
          return classBuilder() as! Motion.Message_.MotionUser.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return Motion.Message_.MotionUser.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return Motion.Message_.MotionUser.Builder()
        }
        internal func toBuilder() throws -> Motion.Message_.MotionUser.Builder {
          return try Motion.Message_.MotionUser.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:Motion.Message_.MotionUser) throws -> Motion.Message_.MotionUser.Builder {
          return try Motion.Message_.MotionUser.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) throws {
          if hasObjectId {
            output += "\(indent) objectId: \(objectId) \n"
          }
          if hasUsername {
            output += "\(indent) username: \(username) \n"
          }
          if hasPassword {
            output += "\(indent) password: \(password) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasObjectId {
                   hashCode = (hashCode &* 31) &+ objectId.hashValue
                }
                if hasUsername {
                   hashCode = (hashCode &* 31) &+ username.hashValue
                }
                if hasPassword {
                   hashCode = (hashCode &* 31) &+ password.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "Motion.Message_.MotionUser"
        }
        override internal func className() -> String {
            return "Motion.Message_.MotionUser"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return Motion.Message_.MotionUser.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:Motion.Message_.MotionUser = Motion.Message_.MotionUser()
          internal func getMessage() -> Motion.Message_.MotionUser {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var hasObjectId:Bool {
               get {
                    return builderResult.hasObjectId
               }
          }
          var objectId:String {
               get {
                    return builderResult.objectId
               }
               set (value) {
                   builderResult.hasObjectId = true
                   builderResult.objectId = value
               }
          }
          func setObjectId(value:String) -> Motion.Message_.MotionUser.Builder {
            self.objectId = value
            return self
          }
          internal func clearObjectId() -> Motion.Message_.MotionUser.Builder{
               builderResult.hasObjectId = false
               builderResult.objectId = ""
               return self
          }
          var hasUsername:Bool {
               get {
                    return builderResult.hasUsername
               }
          }
          var username:String {
               get {
                    return builderResult.username
               }
               set (value) {
                   builderResult.hasUsername = true
                   builderResult.username = value
               }
          }
          func setUsername(value:String) -> Motion.Message_.MotionUser.Builder {
            self.username = value
            return self
          }
          internal func clearUsername() -> Motion.Message_.MotionUser.Builder{
               builderResult.hasUsername = false
               builderResult.username = ""
               return self
          }
          var hasPassword:Bool {
               get {
                    return builderResult.hasPassword
               }
          }
          var password:String {
               get {
                    return builderResult.password
               }
               set (value) {
                   builderResult.hasPassword = true
                   builderResult.password = value
               }
          }
          func setPassword(value:String) -> Motion.Message_.MotionUser.Builder {
            self.password = value
            return self
          }
          internal func clearPassword() -> Motion.Message_.MotionUser.Builder{
               builderResult.hasPassword = false
               builderResult.password = ""
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> Motion.Message_.MotionUser.Builder {
            builderResult = Motion.Message_.MotionUser()
            return self
          }
          internal override func clone() throws -> Motion.Message_.MotionUser.Builder {
            return try Motion.Message_.MotionUser.builderWithPrototype(builderResult)
          }
          internal override func build() throws -> Motion.Message_.MotionUser {
               try checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> Motion.Message_.MotionUser {
            let returnMe:Motion.Message_.MotionUser = builderResult
            return returnMe
          }
          internal func mergeFrom(other:Motion.Message_.MotionUser) throws -> Motion.Message_.MotionUser.Builder {
            if other == Motion.Message_.MotionUser() {
             return self
            }
            if other.hasObjectId {
                 objectId = other.objectId
            }
            if other.hasUsername {
                 username = other.username
            }
            if other.hasPassword {
                 password = other.password
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.MotionUser.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionUser.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = try input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                objectId = try input.readString()

              case 18 :
                username = try input.readString()

              case 42 :
                password = try input.readString()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class MotionCamera : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var motionmonth:Array<Motion.Message_.MotionMonth>  = Array<Motion.Message_.MotionMonth>()
        private(set) var motionrec:Array<Motion.Message_.MotionRec>  = Array<Motion.Message_.MotionRec>()
        private(set) var hasCameraid:Bool = false
        private(set) var cameraid:Int32 = Int32(0)

        private(set) var hasCameranumber:Bool = false
        private(set) var cameranumber:Int32 = Int32(0)

        private(set) var hasCameraname:Bool = false
        private(set) var cameraname:String = ""

        private(set) var hasHasrecjob:Bool = false
        private(set) var hasrecjob:Bool = false

        private(set) var hasRecognizing:Bool = false
        private(set) var recognizing:Bool = false

        private(set) var hasRecognizingFlag:Bool = false
        private(set) var recognizingFlag:Bool = false

        private(set) var hasDbIdcamera:Bool = false
        private(set) var dbIdcamera:Int32 = Int32(0)

        private(set) var hasDbIdrec:Bool = false
        private(set) var dbIdrec:Int32 = Int32(0)

        private(set) var hasFromdatabase:Bool = false
        private(set) var fromdatabase:Bool = false

        private(set) var motiontrack:Array<Motion.Message_.MotionTrack>  = Array<Motion.Message_.MotionTrack>()
        private(set) var hasActivemat:Bool = false
        private(set) var activemat:Int32 = Int32(0)

        private(set) var hasMatcols:Bool = false
        private(set) var matcols:Int32 = Int32(0)

        private(set) var hasMatrows:Bool = false
        private(set) var matrows:Int32 = Int32(0)

        private(set) var hasMatwidth:Bool = false
        private(set) var matwidth:Int32 = Int32(0)

        private(set) var hasMatheight:Bool = false
        private(set) var matheight:Int32 = Int32(0)

        private(set) var hasDbIdmat:Bool = false
        private(set) var dbIdmat:Int32 = Int32(0)

        private(set) var hasTempdata:Bool = false
        private(set) var tempdata:NSData = NSData()

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
          var isInitmotionmonth:Bool = true
          for oneElementmotionmonth in motionmonth {
              if (!oneElementmotionmonth.isInitialized()) {
                  isInitmotionmonth = false
                  break 
              }
          }
          if !isInitmotionmonth {
           return isInitmotionmonth
           }
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
          for oneElementmotionmonth in motionmonth {
              try output.writeMessage(1, value:oneElementmotionmonth)
          }
          for oneElementmotionrec in motionrec {
              try output.writeMessage(2, value:oneElementmotionrec)
          }
          if hasCameraid {
            try output.writeInt32(3, value:cameraid)
          }
          if hasCameranumber {
            try output.writeInt32(4, value:cameranumber)
          }
          if hasCameraname {
            try output.writeString(5, value:cameraname)
          }
          if hasHasrecjob {
            try output.writeBool(6, value:hasrecjob)
          }
          if hasRecognizing {
            try output.writeBool(7, value:recognizing)
          }
          if hasRecognizingFlag {
            try output.writeBool(8, value:recognizingFlag)
          }
          if hasDbIdcamera {
            try output.writeInt32(9, value:dbIdcamera)
          }
          if hasDbIdrec {
            try output.writeInt32(10, value:dbIdrec)
          }
          if hasFromdatabase {
            try output.writeBool(11, value:fromdatabase)
          }
          for oneElementmotiontrack in motiontrack {
              try output.writeMessage(12, value:oneElementmotiontrack)
          }
          if hasActivemat {
            try output.writeInt32(13, value:activemat)
          }
          if hasMatcols {
            try output.writeInt32(14, value:matcols)
          }
          if hasMatrows {
            try output.writeInt32(15, value:matrows)
          }
          if hasMatwidth {
            try output.writeInt32(16, value:matwidth)
          }
          if hasMatheight {
            try output.writeInt32(17, value:matheight)
          }
          if hasDbIdmat {
            try output.writeInt32(18, value:dbIdmat)
          }
          if hasTempdata {
            try output.writeData(19, value:tempdata)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          for oneElementmotionmonth in motionmonth {
              serialize_size += oneElementmotionmonth.computeMessageSize(1)
          }
          for oneElementmotionrec in motionrec {
              serialize_size += oneElementmotionrec.computeMessageSize(2)
          }
          if hasCameraid {
            serialize_size += cameraid.computeInt32Size(3)
          }
          if hasCameranumber {
            serialize_size += cameranumber.computeInt32Size(4)
          }
          if hasCameraname {
            serialize_size += cameraname.computeStringSize(5)
          }
          if hasHasrecjob {
            serialize_size += hasrecjob.computeBoolSize(6)
          }
          if hasRecognizing {
            serialize_size += recognizing.computeBoolSize(7)
          }
          if hasRecognizingFlag {
            serialize_size += recognizingFlag.computeBoolSize(8)
          }
          if hasDbIdcamera {
            serialize_size += dbIdcamera.computeInt32Size(9)
          }
          if hasDbIdrec {
            serialize_size += dbIdrec.computeInt32Size(10)
          }
          if hasFromdatabase {
            serialize_size += fromdatabase.computeBoolSize(11)
          }
          for oneElementmotiontrack in motiontrack {
              serialize_size += oneElementmotiontrack.computeMessageSize(12)
          }
          if hasActivemat {
            serialize_size += activemat.computeInt32Size(13)
          }
          if hasMatcols {
            serialize_size += matcols.computeInt32Size(14)
          }
          if hasMatrows {
            serialize_size += matrows.computeInt32Size(15)
          }
          if hasMatwidth {
            serialize_size += matwidth.computeInt32Size(16)
          }
          if hasMatheight {
            serialize_size += matheight.computeInt32Size(17)
          }
          if hasDbIdmat {
            serialize_size += dbIdmat.computeInt32Size(18)
          }
          if hasTempdata {
            serialize_size += tempdata.computeDataSize(19)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Motion.Message_.MotionCamera> {
          var mergedArray = Array<Motion.Message_.MotionCamera>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Motion.Message_.MotionCamera? {
          return try Motion.Message_.MotionCamera.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        internal class func parseFromData(data:NSData) throws -> Motion.Message_.MotionCamera {
          return try Motion.Message_.MotionCamera.Builder().mergeFromData(data, extensionRegistry:Motion.MotionRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionCamera {
          return try Motion.Message_.MotionCamera.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) throws -> Motion.Message_.MotionCamera {
          return try Motion.Message_.MotionCamera.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionCamera {
          return try Motion.Message_.MotionCamera.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.MotionCamera {
          return try Motion.Message_.MotionCamera.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionCamera {
          return try Motion.Message_.MotionCamera.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> Motion.Message_.MotionCamera.Builder {
          return Motion.Message_.MotionCamera.classBuilder() as! Motion.Message_.MotionCamera.Builder
        }
        internal func getBuilder() -> Motion.Message_.MotionCamera.Builder {
          return classBuilder() as! Motion.Message_.MotionCamera.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return Motion.Message_.MotionCamera.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return Motion.Message_.MotionCamera.Builder()
        }
        internal func toBuilder() throws -> Motion.Message_.MotionCamera.Builder {
          return try Motion.Message_.MotionCamera.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:Motion.Message_.MotionCamera) throws -> Motion.Message_.MotionCamera.Builder {
          return try Motion.Message_.MotionCamera.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) throws {
          var motionmonthElementIndex:Int = 0
          for oneElementmotionmonth in motionmonth {
              output += "\(indent) motionmonth[\(motionmonthElementIndex)] {\n"
              try oneElementmotionmonth.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent)}\n"
              motionmonthElementIndex++
          }
          var motionrecElementIndex:Int = 0
          for oneElementmotionrec in motionrec {
              output += "\(indent) motionrec[\(motionrecElementIndex)] {\n"
              try oneElementmotionrec.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent)}\n"
              motionrecElementIndex++
          }
          if hasCameraid {
            output += "\(indent) cameraid: \(cameraid) \n"
          }
          if hasCameranumber {
            output += "\(indent) cameranumber: \(cameranumber) \n"
          }
          if hasCameraname {
            output += "\(indent) cameraname: \(cameraname) \n"
          }
          if hasHasrecjob {
            output += "\(indent) hasrecjob: \(hasrecjob) \n"
          }
          if hasRecognizing {
            output += "\(indent) recognizing: \(recognizing) \n"
          }
          if hasRecognizingFlag {
            output += "\(indent) recognizingFlag: \(recognizingFlag) \n"
          }
          if hasDbIdcamera {
            output += "\(indent) dbIdcamera: \(dbIdcamera) \n"
          }
          if hasDbIdrec {
            output += "\(indent) dbIdrec: \(dbIdrec) \n"
          }
          if hasFromdatabase {
            output += "\(indent) fromdatabase: \(fromdatabase) \n"
          }
          var motiontrackElementIndex:Int = 0
          for oneElementmotiontrack in motiontrack {
              output += "\(indent) motiontrack[\(motiontrackElementIndex)] {\n"
              try oneElementmotiontrack.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent)}\n"
              motiontrackElementIndex++
          }
          if hasActivemat {
            output += "\(indent) activemat: \(activemat) \n"
          }
          if hasMatcols {
            output += "\(indent) matcols: \(matcols) \n"
          }
          if hasMatrows {
            output += "\(indent) matrows: \(matrows) \n"
          }
          if hasMatwidth {
            output += "\(indent) matwidth: \(matwidth) \n"
          }
          if hasMatheight {
            output += "\(indent) matheight: \(matheight) \n"
          }
          if hasDbIdmat {
            output += "\(indent) dbIdmat: \(dbIdmat) \n"
          }
          if hasTempdata {
            output += "\(indent) tempdata: \(tempdata) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementmotionmonth in motionmonth {
                    hashCode = (hashCode &* 31) &+ oneElementmotionmonth.hashValue
                }
                for oneElementmotionrec in motionrec {
                    hashCode = (hashCode &* 31) &+ oneElementmotionrec.hashValue
                }
                if hasCameraid {
                   hashCode = (hashCode &* 31) &+ cameraid.hashValue
                }
                if hasCameranumber {
                   hashCode = (hashCode &* 31) &+ cameranumber.hashValue
                }
                if hasCameraname {
                   hashCode = (hashCode &* 31) &+ cameraname.hashValue
                }
                if hasHasrecjob {
                   hashCode = (hashCode &* 31) &+ hasrecjob.hashValue
                }
                if hasRecognizing {
                   hashCode = (hashCode &* 31) &+ recognizing.hashValue
                }
                if hasRecognizingFlag {
                   hashCode = (hashCode &* 31) &+ recognizingFlag.hashValue
                }
                if hasDbIdcamera {
                   hashCode = (hashCode &* 31) &+ dbIdcamera.hashValue
                }
                if hasDbIdrec {
                   hashCode = (hashCode &* 31) &+ dbIdrec.hashValue
                }
                if hasFromdatabase {
                   hashCode = (hashCode &* 31) &+ fromdatabase.hashValue
                }
                for oneElementmotiontrack in motiontrack {
                    hashCode = (hashCode &* 31) &+ oneElementmotiontrack.hashValue
                }
                if hasActivemat {
                   hashCode = (hashCode &* 31) &+ activemat.hashValue
                }
                if hasMatcols {
                   hashCode = (hashCode &* 31) &+ matcols.hashValue
                }
                if hasMatrows {
                   hashCode = (hashCode &* 31) &+ matrows.hashValue
                }
                if hasMatwidth {
                   hashCode = (hashCode &* 31) &+ matwidth.hashValue
                }
                if hasMatheight {
                   hashCode = (hashCode &* 31) &+ matheight.hashValue
                }
                if hasDbIdmat {
                   hashCode = (hashCode &* 31) &+ dbIdmat.hashValue
                }
                if hasTempdata {
                   hashCode = (hashCode &* 31) &+ tempdata.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "Motion.Message_.MotionCamera"
        }
        override internal func className() -> String {
            return "Motion.Message_.MotionCamera"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return Motion.Message_.MotionCamera.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:Motion.Message_.MotionCamera = Motion.Message_.MotionCamera()
          internal func getMessage() -> Motion.Message_.MotionCamera {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var motionmonth:Array<Motion.Message_.MotionMonth> {
               get {
                   return builderResult.motionmonth
               }
               set (value) {
                   builderResult.motionmonth = value
               }
          }
          func setMotionmonth(value:Array<Motion.Message_.MotionMonth>) -> Motion.Message_.MotionCamera.Builder {
            self.motionmonth = value
            return self
          }
          internal func clearMotionmonth() -> Motion.Message_.MotionCamera.Builder {
            builderResult.motionmonth.removeAll(keepCapacity: false)
            return self
          }
          var motionrec:Array<Motion.Message_.MotionRec> {
               get {
                   return builderResult.motionrec
               }
               set (value) {
                   builderResult.motionrec = value
               }
          }
          func setMotionrec(value:Array<Motion.Message_.MotionRec>) -> Motion.Message_.MotionCamera.Builder {
            self.motionrec = value
            return self
          }
          internal func clearMotionrec() -> Motion.Message_.MotionCamera.Builder {
            builderResult.motionrec.removeAll(keepCapacity: false)
            return self
          }
          var hasCameraid:Bool {
               get {
                    return builderResult.hasCameraid
               }
          }
          var cameraid:Int32 {
               get {
                    return builderResult.cameraid
               }
               set (value) {
                   builderResult.hasCameraid = true
                   builderResult.cameraid = value
               }
          }
          func setCameraid(value:Int32) -> Motion.Message_.MotionCamera.Builder {
            self.cameraid = value
            return self
          }
          internal func clearCameraid() -> Motion.Message_.MotionCamera.Builder{
               builderResult.hasCameraid = false
               builderResult.cameraid = Int32(0)
               return self
          }
          var hasCameranumber:Bool {
               get {
                    return builderResult.hasCameranumber
               }
          }
          var cameranumber:Int32 {
               get {
                    return builderResult.cameranumber
               }
               set (value) {
                   builderResult.hasCameranumber = true
                   builderResult.cameranumber = value
               }
          }
          func setCameranumber(value:Int32) -> Motion.Message_.MotionCamera.Builder {
            self.cameranumber = value
            return self
          }
          internal func clearCameranumber() -> Motion.Message_.MotionCamera.Builder{
               builderResult.hasCameranumber = false
               builderResult.cameranumber = Int32(0)
               return self
          }
          var hasCameraname:Bool {
               get {
                    return builderResult.hasCameraname
               }
          }
          var cameraname:String {
               get {
                    return builderResult.cameraname
               }
               set (value) {
                   builderResult.hasCameraname = true
                   builderResult.cameraname = value
               }
          }
          func setCameraname(value:String) -> Motion.Message_.MotionCamera.Builder {
            self.cameraname = value
            return self
          }
          internal func clearCameraname() -> Motion.Message_.MotionCamera.Builder{
               builderResult.hasCameraname = false
               builderResult.cameraname = ""
               return self
          }
          var hasHasrecjob:Bool {
               get {
                    return builderResult.hasHasrecjob
               }
          }
          var hasrecjob:Bool {
               get {
                    return builderResult.hasrecjob
               }
               set (value) {
                   builderResult.hasHasrecjob = true
                   builderResult.hasrecjob = value
               }
          }
          func setHasrecjob(value:Bool) -> Motion.Message_.MotionCamera.Builder {
            self.hasrecjob = value
            return self
          }
          internal func clearHasrecjob() -> Motion.Message_.MotionCamera.Builder{
               builderResult.hasHasrecjob = false
               builderResult.hasrecjob = false
               return self
          }
          var hasRecognizing:Bool {
               get {
                    return builderResult.hasRecognizing
               }
          }
          var recognizing:Bool {
               get {
                    return builderResult.recognizing
               }
               set (value) {
                   builderResult.hasRecognizing = true
                   builderResult.recognizing = value
               }
          }
          func setRecognizing(value:Bool) -> Motion.Message_.MotionCamera.Builder {
            self.recognizing = value
            return self
          }
          internal func clearRecognizing() -> Motion.Message_.MotionCamera.Builder{
               builderResult.hasRecognizing = false
               builderResult.recognizing = false
               return self
          }
          var hasRecognizingFlag:Bool {
               get {
                    return builderResult.hasRecognizingFlag
               }
          }
          var recognizingFlag:Bool {
               get {
                    return builderResult.recognizingFlag
               }
               set (value) {
                   builderResult.hasRecognizingFlag = true
                   builderResult.recognizingFlag = value
               }
          }
          func setRecognizingFlag(value:Bool) -> Motion.Message_.MotionCamera.Builder {
            self.recognizingFlag = value
            return self
          }
          internal func clearRecognizingFlag() -> Motion.Message_.MotionCamera.Builder{
               builderResult.hasRecognizingFlag = false
               builderResult.recognizingFlag = false
               return self
          }
          var hasDbIdcamera:Bool {
               get {
                    return builderResult.hasDbIdcamera
               }
          }
          var dbIdcamera:Int32 {
               get {
                    return builderResult.dbIdcamera
               }
               set (value) {
                   builderResult.hasDbIdcamera = true
                   builderResult.dbIdcamera = value
               }
          }
          func setDbIdcamera(value:Int32) -> Motion.Message_.MotionCamera.Builder {
            self.dbIdcamera = value
            return self
          }
          internal func clearDbIdcamera() -> Motion.Message_.MotionCamera.Builder{
               builderResult.hasDbIdcamera = false
               builderResult.dbIdcamera = Int32(0)
               return self
          }
          var hasDbIdrec:Bool {
               get {
                    return builderResult.hasDbIdrec
               }
          }
          var dbIdrec:Int32 {
               get {
                    return builderResult.dbIdrec
               }
               set (value) {
                   builderResult.hasDbIdrec = true
                   builderResult.dbIdrec = value
               }
          }
          func setDbIdrec(value:Int32) -> Motion.Message_.MotionCamera.Builder {
            self.dbIdrec = value
            return self
          }
          internal func clearDbIdrec() -> Motion.Message_.MotionCamera.Builder{
               builderResult.hasDbIdrec = false
               builderResult.dbIdrec = Int32(0)
               return self
          }
          var hasFromdatabase:Bool {
               get {
                    return builderResult.hasFromdatabase
               }
          }
          var fromdatabase:Bool {
               get {
                    return builderResult.fromdatabase
               }
               set (value) {
                   builderResult.hasFromdatabase = true
                   builderResult.fromdatabase = value
               }
          }
          func setFromdatabase(value:Bool) -> Motion.Message_.MotionCamera.Builder {
            self.fromdatabase = value
            return self
          }
          internal func clearFromdatabase() -> Motion.Message_.MotionCamera.Builder{
               builderResult.hasFromdatabase = false
               builderResult.fromdatabase = false
               return self
          }
          var motiontrack:Array<Motion.Message_.MotionTrack> {
               get {
                   return builderResult.motiontrack
               }
               set (value) {
                   builderResult.motiontrack = value
               }
          }
          func setMotiontrack(value:Array<Motion.Message_.MotionTrack>) -> Motion.Message_.MotionCamera.Builder {
            self.motiontrack = value
            return self
          }
          internal func clearMotiontrack() -> Motion.Message_.MotionCamera.Builder {
            builderResult.motiontrack.removeAll(keepCapacity: false)
            return self
          }
          var hasActivemat:Bool {
               get {
                    return builderResult.hasActivemat
               }
          }
          var activemat:Int32 {
               get {
                    return builderResult.activemat
               }
               set (value) {
                   builderResult.hasActivemat = true
                   builderResult.activemat = value
               }
          }
          func setActivemat(value:Int32) -> Motion.Message_.MotionCamera.Builder {
            self.activemat = value
            return self
          }
          internal func clearActivemat() -> Motion.Message_.MotionCamera.Builder{
               builderResult.hasActivemat = false
               builderResult.activemat = Int32(0)
               return self
          }
          var hasMatcols:Bool {
               get {
                    return builderResult.hasMatcols
               }
          }
          var matcols:Int32 {
               get {
                    return builderResult.matcols
               }
               set (value) {
                   builderResult.hasMatcols = true
                   builderResult.matcols = value
               }
          }
          func setMatcols(value:Int32) -> Motion.Message_.MotionCamera.Builder {
            self.matcols = value
            return self
          }
          internal func clearMatcols() -> Motion.Message_.MotionCamera.Builder{
               builderResult.hasMatcols = false
               builderResult.matcols = Int32(0)
               return self
          }
          var hasMatrows:Bool {
               get {
                    return builderResult.hasMatrows
               }
          }
          var matrows:Int32 {
               get {
                    return builderResult.matrows
               }
               set (value) {
                   builderResult.hasMatrows = true
                   builderResult.matrows = value
               }
          }
          func setMatrows(value:Int32) -> Motion.Message_.MotionCamera.Builder {
            self.matrows = value
            return self
          }
          internal func clearMatrows() -> Motion.Message_.MotionCamera.Builder{
               builderResult.hasMatrows = false
               builderResult.matrows = Int32(0)
               return self
          }
          var hasMatwidth:Bool {
               get {
                    return builderResult.hasMatwidth
               }
          }
          var matwidth:Int32 {
               get {
                    return builderResult.matwidth
               }
               set (value) {
                   builderResult.hasMatwidth = true
                   builderResult.matwidth = value
               }
          }
          func setMatwidth(value:Int32) -> Motion.Message_.MotionCamera.Builder {
            self.matwidth = value
            return self
          }
          internal func clearMatwidth() -> Motion.Message_.MotionCamera.Builder{
               builderResult.hasMatwidth = false
               builderResult.matwidth = Int32(0)
               return self
          }
          var hasMatheight:Bool {
               get {
                    return builderResult.hasMatheight
               }
          }
          var matheight:Int32 {
               get {
                    return builderResult.matheight
               }
               set (value) {
                   builderResult.hasMatheight = true
                   builderResult.matheight = value
               }
          }
          func setMatheight(value:Int32) -> Motion.Message_.MotionCamera.Builder {
            self.matheight = value
            return self
          }
          internal func clearMatheight() -> Motion.Message_.MotionCamera.Builder{
               builderResult.hasMatheight = false
               builderResult.matheight = Int32(0)
               return self
          }
          var hasDbIdmat:Bool {
               get {
                    return builderResult.hasDbIdmat
               }
          }
          var dbIdmat:Int32 {
               get {
                    return builderResult.dbIdmat
               }
               set (value) {
                   builderResult.hasDbIdmat = true
                   builderResult.dbIdmat = value
               }
          }
          func setDbIdmat(value:Int32) -> Motion.Message_.MotionCamera.Builder {
            self.dbIdmat = value
            return self
          }
          internal func clearDbIdmat() -> Motion.Message_.MotionCamera.Builder{
               builderResult.hasDbIdmat = false
               builderResult.dbIdmat = Int32(0)
               return self
          }
          var hasTempdata:Bool {
               get {
                    return builderResult.hasTempdata
               }
          }
          var tempdata:NSData {
               get {
                    return builderResult.tempdata
               }
               set (value) {
                   builderResult.hasTempdata = true
                   builderResult.tempdata = value
               }
          }
          func setTempdata(value:NSData) -> Motion.Message_.MotionCamera.Builder {
            self.tempdata = value
            return self
          }
          internal func clearTempdata() -> Motion.Message_.MotionCamera.Builder{
               builderResult.hasTempdata = false
               builderResult.tempdata = NSData()
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> Motion.Message_.MotionCamera.Builder {
            builderResult = Motion.Message_.MotionCamera()
            return self
          }
          internal override func clone() throws -> Motion.Message_.MotionCamera.Builder {
            return try Motion.Message_.MotionCamera.builderWithPrototype(builderResult)
          }
          internal override func build() throws -> Motion.Message_.MotionCamera {
               try checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> Motion.Message_.MotionCamera {
            let returnMe:Motion.Message_.MotionCamera = builderResult
            return returnMe
          }
          internal func mergeFrom(other:Motion.Message_.MotionCamera) throws -> Motion.Message_.MotionCamera.Builder {
            if other == Motion.Message_.MotionCamera() {
             return self
            }
            if !other.motionmonth.isEmpty  {
               builderResult.motionmonth += other.motionmonth
            }
            if !other.motionrec.isEmpty  {
               builderResult.motionrec += other.motionrec
            }
            if other.hasCameraid {
                 cameraid = other.cameraid
            }
            if other.hasCameranumber {
                 cameranumber = other.cameranumber
            }
            if other.hasCameraname {
                 cameraname = other.cameraname
            }
            if other.hasHasrecjob {
                 hasrecjob = other.hasrecjob
            }
            if other.hasRecognizing {
                 recognizing = other.recognizing
            }
            if other.hasRecognizingFlag {
                 recognizingFlag = other.recognizingFlag
            }
            if other.hasDbIdcamera {
                 dbIdcamera = other.dbIdcamera
            }
            if other.hasDbIdrec {
                 dbIdrec = other.dbIdrec
            }
            if other.hasFromdatabase {
                 fromdatabase = other.fromdatabase
            }
            if !other.motiontrack.isEmpty  {
               builderResult.motiontrack += other.motiontrack
            }
            if other.hasActivemat {
                 activemat = other.activemat
            }
            if other.hasMatcols {
                 matcols = other.matcols
            }
            if other.hasMatrows {
                 matrows = other.matrows
            }
            if other.hasMatwidth {
                 matwidth = other.matwidth
            }
            if other.hasMatheight {
                 matheight = other.matheight
            }
            if other.hasDbIdmat {
                 dbIdmat = other.dbIdmat
            }
            if other.hasTempdata {
                 tempdata = other.tempdata
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.MotionCamera.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionCamera.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = try input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                let subBuilder = Motion.Message_.MotionMonth.Builder()
                try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                motionmonth += [subBuilder.buildPartial()]

              case 18 :
                let subBuilder = Motion.Message_.MotionRec.Builder()
                try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                motionrec += [subBuilder.buildPartial()]

              case 24 :
                cameraid = try input.readInt32()

              case 32 :
                cameranumber = try input.readInt32()

              case 42 :
                cameraname = try input.readString()

              case 48 :
                hasrecjob = try input.readBool()

              case 56 :
                recognizing = try input.readBool()

              case 64 :
                recognizingFlag = try input.readBool()

              case 72 :
                dbIdcamera = try input.readInt32()

              case 80 :
                dbIdrec = try input.readInt32()

              case 88 :
                fromdatabase = try input.readBool()

              case 98 :
                let subBuilder = Motion.Message_.MotionTrack.Builder()
                try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                motiontrack += [subBuilder.buildPartial()]

              case 104 :
                activemat = try input.readInt32()

              case 112 :
                matcols = try input.readInt32()

              case 120 :
                matrows = try input.readInt32()

              case 128 :
                matwidth = try input.readInt32()

              case 136 :
                matheight = try input.readInt32()

              case 144 :
                dbIdmat = try input.readInt32()

              case 154 :
                tempdata = try input.readData()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class MotionTrack : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasDbIdinstance:Bool = false
        private(set) var dbIdinstance:Int32 = Int32(0)

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasDbIdinstance {
            try output.writeInt32(1, value:dbIdinstance)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasDbIdinstance {
            serialize_size += dbIdinstance.computeInt32Size(1)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Motion.Message_.MotionTrack> {
          var mergedArray = Array<Motion.Message_.MotionTrack>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Motion.Message_.MotionTrack? {
          return try Motion.Message_.MotionTrack.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        internal class func parseFromData(data:NSData) throws -> Motion.Message_.MotionTrack {
          return try Motion.Message_.MotionTrack.Builder().mergeFromData(data, extensionRegistry:Motion.MotionRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionTrack {
          return try Motion.Message_.MotionTrack.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) throws -> Motion.Message_.MotionTrack {
          return try Motion.Message_.MotionTrack.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionTrack {
          return try Motion.Message_.MotionTrack.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.MotionTrack {
          return try Motion.Message_.MotionTrack.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionTrack {
          return try Motion.Message_.MotionTrack.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> Motion.Message_.MotionTrack.Builder {
          return Motion.Message_.MotionTrack.classBuilder() as! Motion.Message_.MotionTrack.Builder
        }
        internal func getBuilder() -> Motion.Message_.MotionTrack.Builder {
          return classBuilder() as! Motion.Message_.MotionTrack.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return Motion.Message_.MotionTrack.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return Motion.Message_.MotionTrack.Builder()
        }
        internal func toBuilder() throws -> Motion.Message_.MotionTrack.Builder {
          return try Motion.Message_.MotionTrack.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:Motion.Message_.MotionTrack) throws -> Motion.Message_.MotionTrack.Builder {
          return try Motion.Message_.MotionTrack.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) throws {
          if hasDbIdinstance {
            output += "\(indent) dbIdinstance: \(dbIdinstance) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasDbIdinstance {
                   hashCode = (hashCode &* 31) &+ dbIdinstance.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "Motion.Message_.MotionTrack"
        }
        override internal func className() -> String {
            return "Motion.Message_.MotionTrack"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return Motion.Message_.MotionTrack.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:Motion.Message_.MotionTrack = Motion.Message_.MotionTrack()
          internal func getMessage() -> Motion.Message_.MotionTrack {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var hasDbIdinstance:Bool {
               get {
                    return builderResult.hasDbIdinstance
               }
          }
          var dbIdinstance:Int32 {
               get {
                    return builderResult.dbIdinstance
               }
               set (value) {
                   builderResult.hasDbIdinstance = true
                   builderResult.dbIdinstance = value
               }
          }
          func setDbIdinstance(value:Int32) -> Motion.Message_.MotionTrack.Builder {
            self.dbIdinstance = value
            return self
          }
          internal func clearDbIdinstance() -> Motion.Message_.MotionTrack.Builder{
               builderResult.hasDbIdinstance = false
               builderResult.dbIdinstance = Int32(0)
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> Motion.Message_.MotionTrack.Builder {
            builderResult = Motion.Message_.MotionTrack()
            return self
          }
          internal override func clone() throws -> Motion.Message_.MotionTrack.Builder {
            return try Motion.Message_.MotionTrack.builderWithPrototype(builderResult)
          }
          internal override func build() throws -> Motion.Message_.MotionTrack {
               try checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> Motion.Message_.MotionTrack {
            let returnMe:Motion.Message_.MotionTrack = builderResult
            return returnMe
          }
          internal func mergeFrom(other:Motion.Message_.MotionTrack) throws -> Motion.Message_.MotionTrack.Builder {
            if other == Motion.Message_.MotionTrack() {
             return self
            }
            if other.hasDbIdinstance {
                 dbIdinstance = other.dbIdinstance
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.MotionTrack.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionTrack.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = try input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 8 :
                dbIdinstance = try input.readInt32()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class MotionRec : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasName:Bool = false
        private(set) var name:String = ""

        private(set) var hasDbIdrec:Bool = false
        private(set) var dbIdrec:Int32 = Int32(0)

        private(set) var hasTimestart:Bool = false
        private(set) var timestart:String = ""

        private(set) var hasTimeend:Bool = false
        private(set) var timeend:String = ""

        private(set) var hasRecname:Bool = false
        private(set) var recname:String = ""

        private(set) var hasCamerasince:Bool = false
        private(set) var camerasince:String = ""

        private(set) var hasStoreimage:Bool = false
        private(set) var storeimage:Bool = false

        private(set) var hasStorevideo:Bool = false
        private(set) var storevideo:Bool = false

        private(set) var hasCodename:Bool = false
        private(set) var codename:String = ""

        private(set) var hasHasregion:Bool = false
        private(set) var hasregion:Bool = false

        private(set) var hasCoordinates:Bool = false
        private(set) var coordinates:String = ""

        private(set) var hasDelay:Bool = false
        private(set) var delay:Int32 = Int32(0)

        private(set) var hasStartrectime:Bool = false
        private(set) var startrectime:String = ""

        private(set) var hasStoprectime:Bool = false
        private(set) var stoprectime:String = ""

        private(set) var hasRunatstartup:Bool = false
        private(set) var runatstartup:Bool = false

        private(set) var hasActivemat:Bool = false
        private(set) var activemat:Int32 = Int32(0)

        private(set) var hasDbIdmat:Bool = false
        private(set) var dbIdmat:Int32 = Int32(0)

        private(set) var hasDbIdcoordinates:Bool = false
        private(set) var dbIdcoordinates:Int32 = Int32(0)

        private(set) var hasDbIntervalid:Bool = false
        private(set) var dbIntervalid:Int32 = Int32(0)

        private(set) var hasMatcols:Bool = false
        private(set) var matcols:Int32 = Int32(0)

        private(set) var hasMatrows:Bool = false
        private(set) var matrows:Int32 = Int32(0)

        private(set) var hasMatwidth:Bool = false
        private(set) var matwidth:Int32 = Int32(0)

        private(set) var hasMatheight:Bool = false
        private(set) var matheight:Int32 = Int32(0)

        private(set) var hasLastinstance:Bool = false
        private(set) var lastinstance:String = ""

        private(set) var hasDbIdmonth:Bool = false
        private(set) var dbIdmonth:Int32 = Int32(0)

        private(set) var hasDbIdday:Bool = false
        private(set) var dbIdday:Int32 = Int32(0)

        private(set) var hasXmlfilepath:Bool = false
        private(set) var xmlfilepath:String = ""

        private(set) var hasDbRecognitionsetupid:Bool = false
        private(set) var dbRecognitionsetupid:Int32 = Int32(0)

        private(set) var hasHascron:Bool = false
        private(set) var hascron:Bool = false

        private(set) var motioncron:Array<Motion.Message_.MotionCron>  = Array<Motion.Message_.MotionCron>()
        private(set) var hasSpeed:Bool = false
        private(set) var speed:Int32 = Int32(0)

        private(set) var hasActiverec:Bool = false
        private(set) var activerec:Int32 = Int32(0)

        private(set) var hasMatbasefile:Bool = false
        private(set) var matbasefile:String = ""

        private(set) var hasCreated:Bool = false
        private(set) var created:String = ""

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasName {
            try output.writeString(1, value:name)
          }
          if hasDbIdrec {
            try output.writeInt32(2, value:dbIdrec)
          }
          if hasTimestart {
            try output.writeString(3, value:timestart)
          }
          if hasTimeend {
            try output.writeString(4, value:timeend)
          }
          if hasRecname {
            try output.writeString(5, value:recname)
          }
          if hasCamerasince {
            try output.writeString(6, value:camerasince)
          }
          if hasStoreimage {
            try output.writeBool(7, value:storeimage)
          }
          if hasStorevideo {
            try output.writeBool(8, value:storevideo)
          }
          if hasCodename {
            try output.writeString(9, value:codename)
          }
          if hasHasregion {
            try output.writeBool(10, value:hasregion)
          }
          if hasCoordinates {
            try output.writeString(11, value:coordinates)
          }
          if hasDelay {
            try output.writeInt32(12, value:delay)
          }
          if hasStartrectime {
            try output.writeString(13, value:startrectime)
          }
          if hasStoprectime {
            try output.writeString(14, value:stoprectime)
          }
          if hasRunatstartup {
            try output.writeBool(15, value:runatstartup)
          }
          if hasActivemat {
            try output.writeInt32(16, value:activemat)
          }
          if hasDbIdmat {
            try output.writeInt32(17, value:dbIdmat)
          }
          if hasDbIdcoordinates {
            try output.writeInt32(18, value:dbIdcoordinates)
          }
          if hasDbIntervalid {
            try output.writeInt32(19, value:dbIntervalid)
          }
          if hasMatcols {
            try output.writeInt32(20, value:matcols)
          }
          if hasMatrows {
            try output.writeInt32(21, value:matrows)
          }
          if hasMatwidth {
            try output.writeInt32(22, value:matwidth)
          }
          if hasMatheight {
            try output.writeInt32(23, value:matheight)
          }
          if hasLastinstance {
            try output.writeString(24, value:lastinstance)
          }
          if hasDbIdmonth {
            try output.writeInt32(25, value:dbIdmonth)
          }
          if hasDbIdday {
            try output.writeInt32(26, value:dbIdday)
          }
          if hasXmlfilepath {
            try output.writeString(27, value:xmlfilepath)
          }
          if hasDbRecognitionsetupid {
            try output.writeInt32(28, value:dbRecognitionsetupid)
          }
          if hasHascron {
            try output.writeBool(29, value:hascron)
          }
          for oneElementmotioncron in motioncron {
              try output.writeMessage(30, value:oneElementmotioncron)
          }
          if hasSpeed {
            try output.writeInt32(31, value:speed)
          }
          if hasActiverec {
            try output.writeInt32(32, value:activerec)
          }
          if hasMatbasefile {
            try output.writeString(33, value:matbasefile)
          }
          if hasCreated {
            try output.writeString(34, value:created)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasName {
            serialize_size += name.computeStringSize(1)
          }
          if hasDbIdrec {
            serialize_size += dbIdrec.computeInt32Size(2)
          }
          if hasTimestart {
            serialize_size += timestart.computeStringSize(3)
          }
          if hasTimeend {
            serialize_size += timeend.computeStringSize(4)
          }
          if hasRecname {
            serialize_size += recname.computeStringSize(5)
          }
          if hasCamerasince {
            serialize_size += camerasince.computeStringSize(6)
          }
          if hasStoreimage {
            serialize_size += storeimage.computeBoolSize(7)
          }
          if hasStorevideo {
            serialize_size += storevideo.computeBoolSize(8)
          }
          if hasCodename {
            serialize_size += codename.computeStringSize(9)
          }
          if hasHasregion {
            serialize_size += hasregion.computeBoolSize(10)
          }
          if hasCoordinates {
            serialize_size += coordinates.computeStringSize(11)
          }
          if hasDelay {
            serialize_size += delay.computeInt32Size(12)
          }
          if hasStartrectime {
            serialize_size += startrectime.computeStringSize(13)
          }
          if hasStoprectime {
            serialize_size += stoprectime.computeStringSize(14)
          }
          if hasRunatstartup {
            serialize_size += runatstartup.computeBoolSize(15)
          }
          if hasActivemat {
            serialize_size += activemat.computeInt32Size(16)
          }
          if hasDbIdmat {
            serialize_size += dbIdmat.computeInt32Size(17)
          }
          if hasDbIdcoordinates {
            serialize_size += dbIdcoordinates.computeInt32Size(18)
          }
          if hasDbIntervalid {
            serialize_size += dbIntervalid.computeInt32Size(19)
          }
          if hasMatcols {
            serialize_size += matcols.computeInt32Size(20)
          }
          if hasMatrows {
            serialize_size += matrows.computeInt32Size(21)
          }
          if hasMatwidth {
            serialize_size += matwidth.computeInt32Size(22)
          }
          if hasMatheight {
            serialize_size += matheight.computeInt32Size(23)
          }
          if hasLastinstance {
            serialize_size += lastinstance.computeStringSize(24)
          }
          if hasDbIdmonth {
            serialize_size += dbIdmonth.computeInt32Size(25)
          }
          if hasDbIdday {
            serialize_size += dbIdday.computeInt32Size(26)
          }
          if hasXmlfilepath {
            serialize_size += xmlfilepath.computeStringSize(27)
          }
          if hasDbRecognitionsetupid {
            serialize_size += dbRecognitionsetupid.computeInt32Size(28)
          }
          if hasHascron {
            serialize_size += hascron.computeBoolSize(29)
          }
          for oneElementmotioncron in motioncron {
              serialize_size += oneElementmotioncron.computeMessageSize(30)
          }
          if hasSpeed {
            serialize_size += speed.computeInt32Size(31)
          }
          if hasActiverec {
            serialize_size += activerec.computeInt32Size(32)
          }
          if hasMatbasefile {
            serialize_size += matbasefile.computeStringSize(33)
          }
          if hasCreated {
            serialize_size += created.computeStringSize(34)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Motion.Message_.MotionRec> {
          var mergedArray = Array<Motion.Message_.MotionRec>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Motion.Message_.MotionRec? {
          return try Motion.Message_.MotionRec.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        internal class func parseFromData(data:NSData) throws -> Motion.Message_.MotionRec {
          return try Motion.Message_.MotionRec.Builder().mergeFromData(data, extensionRegistry:Motion.MotionRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionRec {
          return try Motion.Message_.MotionRec.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) throws -> Motion.Message_.MotionRec {
          return try Motion.Message_.MotionRec.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionRec {
          return try Motion.Message_.MotionRec.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.MotionRec {
          return try Motion.Message_.MotionRec.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionRec {
          return try Motion.Message_.MotionRec.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> Motion.Message_.MotionRec.Builder {
          return Motion.Message_.MotionRec.classBuilder() as! Motion.Message_.MotionRec.Builder
        }
        internal func getBuilder() -> Motion.Message_.MotionRec.Builder {
          return classBuilder() as! Motion.Message_.MotionRec.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return Motion.Message_.MotionRec.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return Motion.Message_.MotionRec.Builder()
        }
        internal func toBuilder() throws -> Motion.Message_.MotionRec.Builder {
          return try Motion.Message_.MotionRec.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:Motion.Message_.MotionRec) throws -> Motion.Message_.MotionRec.Builder {
          return try Motion.Message_.MotionRec.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) throws {
          if hasName {
            output += "\(indent) name: \(name) \n"
          }
          if hasDbIdrec {
            output += "\(indent) dbIdrec: \(dbIdrec) \n"
          }
          if hasTimestart {
            output += "\(indent) timestart: \(timestart) \n"
          }
          if hasTimeend {
            output += "\(indent) timeend: \(timeend) \n"
          }
          if hasRecname {
            output += "\(indent) recname: \(recname) \n"
          }
          if hasCamerasince {
            output += "\(indent) camerasince: \(camerasince) \n"
          }
          if hasStoreimage {
            output += "\(indent) storeimage: \(storeimage) \n"
          }
          if hasStorevideo {
            output += "\(indent) storevideo: \(storevideo) \n"
          }
          if hasCodename {
            output += "\(indent) codename: \(codename) \n"
          }
          if hasHasregion {
            output += "\(indent) hasregion: \(hasregion) \n"
          }
          if hasCoordinates {
            output += "\(indent) coordinates: \(coordinates) \n"
          }
          if hasDelay {
            output += "\(indent) delay: \(delay) \n"
          }
          if hasStartrectime {
            output += "\(indent) startrectime: \(startrectime) \n"
          }
          if hasStoprectime {
            output += "\(indent) stoprectime: \(stoprectime) \n"
          }
          if hasRunatstartup {
            output += "\(indent) runatstartup: \(runatstartup) \n"
          }
          if hasActivemat {
            output += "\(indent) activemat: \(activemat) \n"
          }
          if hasDbIdmat {
            output += "\(indent) dbIdmat: \(dbIdmat) \n"
          }
          if hasDbIdcoordinates {
            output += "\(indent) dbIdcoordinates: \(dbIdcoordinates) \n"
          }
          if hasDbIntervalid {
            output += "\(indent) dbIntervalid: \(dbIntervalid) \n"
          }
          if hasMatcols {
            output += "\(indent) matcols: \(matcols) \n"
          }
          if hasMatrows {
            output += "\(indent) matrows: \(matrows) \n"
          }
          if hasMatwidth {
            output += "\(indent) matwidth: \(matwidth) \n"
          }
          if hasMatheight {
            output += "\(indent) matheight: \(matheight) \n"
          }
          if hasLastinstance {
            output += "\(indent) lastinstance: \(lastinstance) \n"
          }
          if hasDbIdmonth {
            output += "\(indent) dbIdmonth: \(dbIdmonth) \n"
          }
          if hasDbIdday {
            output += "\(indent) dbIdday: \(dbIdday) \n"
          }
          if hasXmlfilepath {
            output += "\(indent) xmlfilepath: \(xmlfilepath) \n"
          }
          if hasDbRecognitionsetupid {
            output += "\(indent) dbRecognitionsetupid: \(dbRecognitionsetupid) \n"
          }
          if hasHascron {
            output += "\(indent) hascron: \(hascron) \n"
          }
          var motioncronElementIndex:Int = 0
          for oneElementmotioncron in motioncron {
              output += "\(indent) motioncron[\(motioncronElementIndex)] {\n"
              try oneElementmotioncron.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent)}\n"
              motioncronElementIndex++
          }
          if hasSpeed {
            output += "\(indent) speed: \(speed) \n"
          }
          if hasActiverec {
            output += "\(indent) activerec: \(activerec) \n"
          }
          if hasMatbasefile {
            output += "\(indent) matbasefile: \(matbasefile) \n"
          }
          if hasCreated {
            output += "\(indent) created: \(created) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasName {
                   hashCode = (hashCode &* 31) &+ name.hashValue
                }
                if hasDbIdrec {
                   hashCode = (hashCode &* 31) &+ dbIdrec.hashValue
                }
                if hasTimestart {
                   hashCode = (hashCode &* 31) &+ timestart.hashValue
                }
                if hasTimeend {
                   hashCode = (hashCode &* 31) &+ timeend.hashValue
                }
                if hasRecname {
                   hashCode = (hashCode &* 31) &+ recname.hashValue
                }
                if hasCamerasince {
                   hashCode = (hashCode &* 31) &+ camerasince.hashValue
                }
                if hasStoreimage {
                   hashCode = (hashCode &* 31) &+ storeimage.hashValue
                }
                if hasStorevideo {
                   hashCode = (hashCode &* 31) &+ storevideo.hashValue
                }
                if hasCodename {
                   hashCode = (hashCode &* 31) &+ codename.hashValue
                }
                if hasHasregion {
                   hashCode = (hashCode &* 31) &+ hasregion.hashValue
                }
                if hasCoordinates {
                   hashCode = (hashCode &* 31) &+ coordinates.hashValue
                }
                if hasDelay {
                   hashCode = (hashCode &* 31) &+ delay.hashValue
                }
                if hasStartrectime {
                   hashCode = (hashCode &* 31) &+ startrectime.hashValue
                }
                if hasStoprectime {
                   hashCode = (hashCode &* 31) &+ stoprectime.hashValue
                }
                if hasRunatstartup {
                   hashCode = (hashCode &* 31) &+ runatstartup.hashValue
                }
                if hasActivemat {
                   hashCode = (hashCode &* 31) &+ activemat.hashValue
                }
                if hasDbIdmat {
                   hashCode = (hashCode &* 31) &+ dbIdmat.hashValue
                }
                if hasDbIdcoordinates {
                   hashCode = (hashCode &* 31) &+ dbIdcoordinates.hashValue
                }
                if hasDbIntervalid {
                   hashCode = (hashCode &* 31) &+ dbIntervalid.hashValue
                }
                if hasMatcols {
                   hashCode = (hashCode &* 31) &+ matcols.hashValue
                }
                if hasMatrows {
                   hashCode = (hashCode &* 31) &+ matrows.hashValue
                }
                if hasMatwidth {
                   hashCode = (hashCode &* 31) &+ matwidth.hashValue
                }
                if hasMatheight {
                   hashCode = (hashCode &* 31) &+ matheight.hashValue
                }
                if hasLastinstance {
                   hashCode = (hashCode &* 31) &+ lastinstance.hashValue
                }
                if hasDbIdmonth {
                   hashCode = (hashCode &* 31) &+ dbIdmonth.hashValue
                }
                if hasDbIdday {
                   hashCode = (hashCode &* 31) &+ dbIdday.hashValue
                }
                if hasXmlfilepath {
                   hashCode = (hashCode &* 31) &+ xmlfilepath.hashValue
                }
                if hasDbRecognitionsetupid {
                   hashCode = (hashCode &* 31) &+ dbRecognitionsetupid.hashValue
                }
                if hasHascron {
                   hashCode = (hashCode &* 31) &+ hascron.hashValue
                }
                for oneElementmotioncron in motioncron {
                    hashCode = (hashCode &* 31) &+ oneElementmotioncron.hashValue
                }
                if hasSpeed {
                   hashCode = (hashCode &* 31) &+ speed.hashValue
                }
                if hasActiverec {
                   hashCode = (hashCode &* 31) &+ activerec.hashValue
                }
                if hasMatbasefile {
                   hashCode = (hashCode &* 31) &+ matbasefile.hashValue
                }
                if hasCreated {
                   hashCode = (hashCode &* 31) &+ created.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "Motion.Message_.MotionRec"
        }
        override internal func className() -> String {
            return "Motion.Message_.MotionRec"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return Motion.Message_.MotionRec.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:Motion.Message_.MotionRec = Motion.Message_.MotionRec()
          internal func getMessage() -> Motion.Message_.MotionRec {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var hasName:Bool {
               get {
                    return builderResult.hasName
               }
          }
          var name:String {
               get {
                    return builderResult.name
               }
               set (value) {
                   builderResult.hasName = true
                   builderResult.name = value
               }
          }
          func setName(value:String) -> Motion.Message_.MotionRec.Builder {
            self.name = value
            return self
          }
          internal func clearName() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasName = false
               builderResult.name = ""
               return self
          }
          var hasDbIdrec:Bool {
               get {
                    return builderResult.hasDbIdrec
               }
          }
          var dbIdrec:Int32 {
               get {
                    return builderResult.dbIdrec
               }
               set (value) {
                   builderResult.hasDbIdrec = true
                   builderResult.dbIdrec = value
               }
          }
          func setDbIdrec(value:Int32) -> Motion.Message_.MotionRec.Builder {
            self.dbIdrec = value
            return self
          }
          internal func clearDbIdrec() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasDbIdrec = false
               builderResult.dbIdrec = Int32(0)
               return self
          }
          var hasTimestart:Bool {
               get {
                    return builderResult.hasTimestart
               }
          }
          var timestart:String {
               get {
                    return builderResult.timestart
               }
               set (value) {
                   builderResult.hasTimestart = true
                   builderResult.timestart = value
               }
          }
          func setTimestart(value:String) -> Motion.Message_.MotionRec.Builder {
            self.timestart = value
            return self
          }
          internal func clearTimestart() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasTimestart = false
               builderResult.timestart = ""
               return self
          }
          var hasTimeend:Bool {
               get {
                    return builderResult.hasTimeend
               }
          }
          var timeend:String {
               get {
                    return builderResult.timeend
               }
               set (value) {
                   builderResult.hasTimeend = true
                   builderResult.timeend = value
               }
          }
          func setTimeend(value:String) -> Motion.Message_.MotionRec.Builder {
            self.timeend = value
            return self
          }
          internal func clearTimeend() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasTimeend = false
               builderResult.timeend = ""
               return self
          }
          var hasRecname:Bool {
               get {
                    return builderResult.hasRecname
               }
          }
          var recname:String {
               get {
                    return builderResult.recname
               }
               set (value) {
                   builderResult.hasRecname = true
                   builderResult.recname = value
               }
          }
          func setRecname(value:String) -> Motion.Message_.MotionRec.Builder {
            self.recname = value
            return self
          }
          internal func clearRecname() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasRecname = false
               builderResult.recname = ""
               return self
          }
          var hasCamerasince:Bool {
               get {
                    return builderResult.hasCamerasince
               }
          }
          var camerasince:String {
               get {
                    return builderResult.camerasince
               }
               set (value) {
                   builderResult.hasCamerasince = true
                   builderResult.camerasince = value
               }
          }
          func setCamerasince(value:String) -> Motion.Message_.MotionRec.Builder {
            self.camerasince = value
            return self
          }
          internal func clearCamerasince() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasCamerasince = false
               builderResult.camerasince = ""
               return self
          }
          var hasStoreimage:Bool {
               get {
                    return builderResult.hasStoreimage
               }
          }
          var storeimage:Bool {
               get {
                    return builderResult.storeimage
               }
               set (value) {
                   builderResult.hasStoreimage = true
                   builderResult.storeimage = value
               }
          }
          func setStoreimage(value:Bool) -> Motion.Message_.MotionRec.Builder {
            self.storeimage = value
            return self
          }
          internal func clearStoreimage() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasStoreimage = false
               builderResult.storeimage = false
               return self
          }
          var hasStorevideo:Bool {
               get {
                    return builderResult.hasStorevideo
               }
          }
          var storevideo:Bool {
               get {
                    return builderResult.storevideo
               }
               set (value) {
                   builderResult.hasStorevideo = true
                   builderResult.storevideo = value
               }
          }
          func setStorevideo(value:Bool) -> Motion.Message_.MotionRec.Builder {
            self.storevideo = value
            return self
          }
          internal func clearStorevideo() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasStorevideo = false
               builderResult.storevideo = false
               return self
          }
          var hasCodename:Bool {
               get {
                    return builderResult.hasCodename
               }
          }
          var codename:String {
               get {
                    return builderResult.codename
               }
               set (value) {
                   builderResult.hasCodename = true
                   builderResult.codename = value
               }
          }
          func setCodename(value:String) -> Motion.Message_.MotionRec.Builder {
            self.codename = value
            return self
          }
          internal func clearCodename() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasCodename = false
               builderResult.codename = ""
               return self
          }
          var hasHasregion:Bool {
               get {
                    return builderResult.hasHasregion
               }
          }
          var hasregion:Bool {
               get {
                    return builderResult.hasregion
               }
               set (value) {
                   builderResult.hasHasregion = true
                   builderResult.hasregion = value
               }
          }
          func setHasregion(value:Bool) -> Motion.Message_.MotionRec.Builder {
            self.hasregion = value
            return self
          }
          internal func clearHasregion() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasHasregion = false
               builderResult.hasregion = false
               return self
          }
          var hasCoordinates:Bool {
               get {
                    return builderResult.hasCoordinates
               }
          }
          var coordinates:String {
               get {
                    return builderResult.coordinates
               }
               set (value) {
                   builderResult.hasCoordinates = true
                   builderResult.coordinates = value
               }
          }
          func setCoordinates(value:String) -> Motion.Message_.MotionRec.Builder {
            self.coordinates = value
            return self
          }
          internal func clearCoordinates() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasCoordinates = false
               builderResult.coordinates = ""
               return self
          }
          var hasDelay:Bool {
               get {
                    return builderResult.hasDelay
               }
          }
          var delay:Int32 {
               get {
                    return builderResult.delay
               }
               set (value) {
                   builderResult.hasDelay = true
                   builderResult.delay = value
               }
          }
          func setDelay(value:Int32) -> Motion.Message_.MotionRec.Builder {
            self.delay = value
            return self
          }
          internal func clearDelay() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasDelay = false
               builderResult.delay = Int32(0)
               return self
          }
          var hasStartrectime:Bool {
               get {
                    return builderResult.hasStartrectime
               }
          }
          var startrectime:String {
               get {
                    return builderResult.startrectime
               }
               set (value) {
                   builderResult.hasStartrectime = true
                   builderResult.startrectime = value
               }
          }
          func setStartrectime(value:String) -> Motion.Message_.MotionRec.Builder {
            self.startrectime = value
            return self
          }
          internal func clearStartrectime() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasStartrectime = false
               builderResult.startrectime = ""
               return self
          }
          var hasStoprectime:Bool {
               get {
                    return builderResult.hasStoprectime
               }
          }
          var stoprectime:String {
               get {
                    return builderResult.stoprectime
               }
               set (value) {
                   builderResult.hasStoprectime = true
                   builderResult.stoprectime = value
               }
          }
          func setStoprectime(value:String) -> Motion.Message_.MotionRec.Builder {
            self.stoprectime = value
            return self
          }
          internal func clearStoprectime() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasStoprectime = false
               builderResult.stoprectime = ""
               return self
          }
          var hasRunatstartup:Bool {
               get {
                    return builderResult.hasRunatstartup
               }
          }
          var runatstartup:Bool {
               get {
                    return builderResult.runatstartup
               }
               set (value) {
                   builderResult.hasRunatstartup = true
                   builderResult.runatstartup = value
               }
          }
          func setRunatstartup(value:Bool) -> Motion.Message_.MotionRec.Builder {
            self.runatstartup = value
            return self
          }
          internal func clearRunatstartup() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasRunatstartup = false
               builderResult.runatstartup = false
               return self
          }
          var hasActivemat:Bool {
               get {
                    return builderResult.hasActivemat
               }
          }
          var activemat:Int32 {
               get {
                    return builderResult.activemat
               }
               set (value) {
                   builderResult.hasActivemat = true
                   builderResult.activemat = value
               }
          }
          func setActivemat(value:Int32) -> Motion.Message_.MotionRec.Builder {
            self.activemat = value
            return self
          }
          internal func clearActivemat() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasActivemat = false
               builderResult.activemat = Int32(0)
               return self
          }
          var hasDbIdmat:Bool {
               get {
                    return builderResult.hasDbIdmat
               }
          }
          var dbIdmat:Int32 {
               get {
                    return builderResult.dbIdmat
               }
               set (value) {
                   builderResult.hasDbIdmat = true
                   builderResult.dbIdmat = value
               }
          }
          func setDbIdmat(value:Int32) -> Motion.Message_.MotionRec.Builder {
            self.dbIdmat = value
            return self
          }
          internal func clearDbIdmat() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasDbIdmat = false
               builderResult.dbIdmat = Int32(0)
               return self
          }
          var hasDbIdcoordinates:Bool {
               get {
                    return builderResult.hasDbIdcoordinates
               }
          }
          var dbIdcoordinates:Int32 {
               get {
                    return builderResult.dbIdcoordinates
               }
               set (value) {
                   builderResult.hasDbIdcoordinates = true
                   builderResult.dbIdcoordinates = value
               }
          }
          func setDbIdcoordinates(value:Int32) -> Motion.Message_.MotionRec.Builder {
            self.dbIdcoordinates = value
            return self
          }
          internal func clearDbIdcoordinates() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasDbIdcoordinates = false
               builderResult.dbIdcoordinates = Int32(0)
               return self
          }
          var hasDbIntervalid:Bool {
               get {
                    return builderResult.hasDbIntervalid
               }
          }
          var dbIntervalid:Int32 {
               get {
                    return builderResult.dbIntervalid
               }
               set (value) {
                   builderResult.hasDbIntervalid = true
                   builderResult.dbIntervalid = value
               }
          }
          func setDbIntervalid(value:Int32) -> Motion.Message_.MotionRec.Builder {
            self.dbIntervalid = value
            return self
          }
          internal func clearDbIntervalid() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasDbIntervalid = false
               builderResult.dbIntervalid = Int32(0)
               return self
          }
          var hasMatcols:Bool {
               get {
                    return builderResult.hasMatcols
               }
          }
          var matcols:Int32 {
               get {
                    return builderResult.matcols
               }
               set (value) {
                   builderResult.hasMatcols = true
                   builderResult.matcols = value
               }
          }
          func setMatcols(value:Int32) -> Motion.Message_.MotionRec.Builder {
            self.matcols = value
            return self
          }
          internal func clearMatcols() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasMatcols = false
               builderResult.matcols = Int32(0)
               return self
          }
          var hasMatrows:Bool {
               get {
                    return builderResult.hasMatrows
               }
          }
          var matrows:Int32 {
               get {
                    return builderResult.matrows
               }
               set (value) {
                   builderResult.hasMatrows = true
                   builderResult.matrows = value
               }
          }
          func setMatrows(value:Int32) -> Motion.Message_.MotionRec.Builder {
            self.matrows = value
            return self
          }
          internal func clearMatrows() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasMatrows = false
               builderResult.matrows = Int32(0)
               return self
          }
          var hasMatwidth:Bool {
               get {
                    return builderResult.hasMatwidth
               }
          }
          var matwidth:Int32 {
               get {
                    return builderResult.matwidth
               }
               set (value) {
                   builderResult.hasMatwidth = true
                   builderResult.matwidth = value
               }
          }
          func setMatwidth(value:Int32) -> Motion.Message_.MotionRec.Builder {
            self.matwidth = value
            return self
          }
          internal func clearMatwidth() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasMatwidth = false
               builderResult.matwidth = Int32(0)
               return self
          }
          var hasMatheight:Bool {
               get {
                    return builderResult.hasMatheight
               }
          }
          var matheight:Int32 {
               get {
                    return builderResult.matheight
               }
               set (value) {
                   builderResult.hasMatheight = true
                   builderResult.matheight = value
               }
          }
          func setMatheight(value:Int32) -> Motion.Message_.MotionRec.Builder {
            self.matheight = value
            return self
          }
          internal func clearMatheight() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasMatheight = false
               builderResult.matheight = Int32(0)
               return self
          }
          var hasLastinstance:Bool {
               get {
                    return builderResult.hasLastinstance
               }
          }
          var lastinstance:String {
               get {
                    return builderResult.lastinstance
               }
               set (value) {
                   builderResult.hasLastinstance = true
                   builderResult.lastinstance = value
               }
          }
          func setLastinstance(value:String) -> Motion.Message_.MotionRec.Builder {
            self.lastinstance = value
            return self
          }
          internal func clearLastinstance() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasLastinstance = false
               builderResult.lastinstance = ""
               return self
          }
          var hasDbIdmonth:Bool {
               get {
                    return builderResult.hasDbIdmonth
               }
          }
          var dbIdmonth:Int32 {
               get {
                    return builderResult.dbIdmonth
               }
               set (value) {
                   builderResult.hasDbIdmonth = true
                   builderResult.dbIdmonth = value
               }
          }
          func setDbIdmonth(value:Int32) -> Motion.Message_.MotionRec.Builder {
            self.dbIdmonth = value
            return self
          }
          internal func clearDbIdmonth() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasDbIdmonth = false
               builderResult.dbIdmonth = Int32(0)
               return self
          }
          var hasDbIdday:Bool {
               get {
                    return builderResult.hasDbIdday
               }
          }
          var dbIdday:Int32 {
               get {
                    return builderResult.dbIdday
               }
               set (value) {
                   builderResult.hasDbIdday = true
                   builderResult.dbIdday = value
               }
          }
          func setDbIdday(value:Int32) -> Motion.Message_.MotionRec.Builder {
            self.dbIdday = value
            return self
          }
          internal func clearDbIdday() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasDbIdday = false
               builderResult.dbIdday = Int32(0)
               return self
          }
          var hasXmlfilepath:Bool {
               get {
                    return builderResult.hasXmlfilepath
               }
          }
          var xmlfilepath:String {
               get {
                    return builderResult.xmlfilepath
               }
               set (value) {
                   builderResult.hasXmlfilepath = true
                   builderResult.xmlfilepath = value
               }
          }
          func setXmlfilepath(value:String) -> Motion.Message_.MotionRec.Builder {
            self.xmlfilepath = value
            return self
          }
          internal func clearXmlfilepath() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasXmlfilepath = false
               builderResult.xmlfilepath = ""
               return self
          }
          var hasDbRecognitionsetupid:Bool {
               get {
                    return builderResult.hasDbRecognitionsetupid
               }
          }
          var dbRecognitionsetupid:Int32 {
               get {
                    return builderResult.dbRecognitionsetupid
               }
               set (value) {
                   builderResult.hasDbRecognitionsetupid = true
                   builderResult.dbRecognitionsetupid = value
               }
          }
          func setDbRecognitionsetupid(value:Int32) -> Motion.Message_.MotionRec.Builder {
            self.dbRecognitionsetupid = value
            return self
          }
          internal func clearDbRecognitionsetupid() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasDbRecognitionsetupid = false
               builderResult.dbRecognitionsetupid = Int32(0)
               return self
          }
          var hasHascron:Bool {
               get {
                    return builderResult.hasHascron
               }
          }
          var hascron:Bool {
               get {
                    return builderResult.hascron
               }
               set (value) {
                   builderResult.hasHascron = true
                   builderResult.hascron = value
               }
          }
          func setHascron(value:Bool) -> Motion.Message_.MotionRec.Builder {
            self.hascron = value
            return self
          }
          internal func clearHascron() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasHascron = false
               builderResult.hascron = false
               return self
          }
          var motioncron:Array<Motion.Message_.MotionCron> {
               get {
                   return builderResult.motioncron
               }
               set (value) {
                   builderResult.motioncron = value
               }
          }
          func setMotioncron(value:Array<Motion.Message_.MotionCron>) -> Motion.Message_.MotionRec.Builder {
            self.motioncron = value
            return self
          }
          internal func clearMotioncron() -> Motion.Message_.MotionRec.Builder {
            builderResult.motioncron.removeAll(keepCapacity: false)
            return self
          }
          var hasSpeed:Bool {
               get {
                    return builderResult.hasSpeed
               }
          }
          var speed:Int32 {
               get {
                    return builderResult.speed
               }
               set (value) {
                   builderResult.hasSpeed = true
                   builderResult.speed = value
               }
          }
          func setSpeed(value:Int32) -> Motion.Message_.MotionRec.Builder {
            self.speed = value
            return self
          }
          internal func clearSpeed() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasSpeed = false
               builderResult.speed = Int32(0)
               return self
          }
          var hasActiverec:Bool {
               get {
                    return builderResult.hasActiverec
               }
          }
          var activerec:Int32 {
               get {
                    return builderResult.activerec
               }
               set (value) {
                   builderResult.hasActiverec = true
                   builderResult.activerec = value
               }
          }
          func setActiverec(value:Int32) -> Motion.Message_.MotionRec.Builder {
            self.activerec = value
            return self
          }
          internal func clearActiverec() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasActiverec = false
               builderResult.activerec = Int32(0)
               return self
          }
          var hasMatbasefile:Bool {
               get {
                    return builderResult.hasMatbasefile
               }
          }
          var matbasefile:String {
               get {
                    return builderResult.matbasefile
               }
               set (value) {
                   builderResult.hasMatbasefile = true
                   builderResult.matbasefile = value
               }
          }
          func setMatbasefile(value:String) -> Motion.Message_.MotionRec.Builder {
            self.matbasefile = value
            return self
          }
          internal func clearMatbasefile() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasMatbasefile = false
               builderResult.matbasefile = ""
               return self
          }
          var hasCreated:Bool {
               get {
                    return builderResult.hasCreated
               }
          }
          var created:String {
               get {
                    return builderResult.created
               }
               set (value) {
                   builderResult.hasCreated = true
                   builderResult.created = value
               }
          }
          func setCreated(value:String) -> Motion.Message_.MotionRec.Builder {
            self.created = value
            return self
          }
          internal func clearCreated() -> Motion.Message_.MotionRec.Builder{
               builderResult.hasCreated = false
               builderResult.created = ""
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> Motion.Message_.MotionRec.Builder {
            builderResult = Motion.Message_.MotionRec()
            return self
          }
          internal override func clone() throws -> Motion.Message_.MotionRec.Builder {
            return try Motion.Message_.MotionRec.builderWithPrototype(builderResult)
          }
          internal override func build() throws -> Motion.Message_.MotionRec {
               try checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> Motion.Message_.MotionRec {
            let returnMe:Motion.Message_.MotionRec = builderResult
            return returnMe
          }
          internal func mergeFrom(other:Motion.Message_.MotionRec) throws -> Motion.Message_.MotionRec.Builder {
            if other == Motion.Message_.MotionRec() {
             return self
            }
            if other.hasName {
                 name = other.name
            }
            if other.hasDbIdrec {
                 dbIdrec = other.dbIdrec
            }
            if other.hasTimestart {
                 timestart = other.timestart
            }
            if other.hasTimeend {
                 timeend = other.timeend
            }
            if other.hasRecname {
                 recname = other.recname
            }
            if other.hasCamerasince {
                 camerasince = other.camerasince
            }
            if other.hasStoreimage {
                 storeimage = other.storeimage
            }
            if other.hasStorevideo {
                 storevideo = other.storevideo
            }
            if other.hasCodename {
                 codename = other.codename
            }
            if other.hasHasregion {
                 hasregion = other.hasregion
            }
            if other.hasCoordinates {
                 coordinates = other.coordinates
            }
            if other.hasDelay {
                 delay = other.delay
            }
            if other.hasStartrectime {
                 startrectime = other.startrectime
            }
            if other.hasStoprectime {
                 stoprectime = other.stoprectime
            }
            if other.hasRunatstartup {
                 runatstartup = other.runatstartup
            }
            if other.hasActivemat {
                 activemat = other.activemat
            }
            if other.hasDbIdmat {
                 dbIdmat = other.dbIdmat
            }
            if other.hasDbIdcoordinates {
                 dbIdcoordinates = other.dbIdcoordinates
            }
            if other.hasDbIntervalid {
                 dbIntervalid = other.dbIntervalid
            }
            if other.hasMatcols {
                 matcols = other.matcols
            }
            if other.hasMatrows {
                 matrows = other.matrows
            }
            if other.hasMatwidth {
                 matwidth = other.matwidth
            }
            if other.hasMatheight {
                 matheight = other.matheight
            }
            if other.hasLastinstance {
                 lastinstance = other.lastinstance
            }
            if other.hasDbIdmonth {
                 dbIdmonth = other.dbIdmonth
            }
            if other.hasDbIdday {
                 dbIdday = other.dbIdday
            }
            if other.hasXmlfilepath {
                 xmlfilepath = other.xmlfilepath
            }
            if other.hasDbRecognitionsetupid {
                 dbRecognitionsetupid = other.dbRecognitionsetupid
            }
            if other.hasHascron {
                 hascron = other.hascron
            }
            if !other.motioncron.isEmpty  {
               builderResult.motioncron += other.motioncron
            }
            if other.hasSpeed {
                 speed = other.speed
            }
            if other.hasActiverec {
                 activerec = other.activerec
            }
            if other.hasMatbasefile {
                 matbasefile = other.matbasefile
            }
            if other.hasCreated {
                 created = other.created
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.MotionRec.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionRec.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = try input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                name = try input.readString()

              case 16 :
                dbIdrec = try input.readInt32()

              case 26 :
                timestart = try input.readString()

              case 34 :
                timeend = try input.readString()

              case 42 :
                recname = try input.readString()

              case 50 :
                camerasince = try input.readString()

              case 56 :
                storeimage = try input.readBool()

              case 64 :
                storevideo = try input.readBool()

              case 74 :
                codename = try input.readString()

              case 80 :
                hasregion = try input.readBool()

              case 90 :
                coordinates = try input.readString()

              case 96 :
                delay = try input.readInt32()

              case 106 :
                startrectime = try input.readString()

              case 114 :
                stoprectime = try input.readString()

              case 120 :
                runatstartup = try input.readBool()

              case 128 :
                activemat = try input.readInt32()

              case 136 :
                dbIdmat = try input.readInt32()

              case 144 :
                dbIdcoordinates = try input.readInt32()

              case 152 :
                dbIntervalid = try input.readInt32()

              case 160 :
                matcols = try input.readInt32()

              case 168 :
                matrows = try input.readInt32()

              case 176 :
                matwidth = try input.readInt32()

              case 184 :
                matheight = try input.readInt32()

              case 194 :
                lastinstance = try input.readString()

              case 200 :
                dbIdmonth = try input.readInt32()

              case 208 :
                dbIdday = try input.readInt32()

              case 218 :
                xmlfilepath = try input.readString()

              case 224 :
                dbRecognitionsetupid = try input.readInt32()

              case 232 :
                hascron = try input.readBool()

              case 242 :
                let subBuilder = Motion.Message_.MotionCron.Builder()
                try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                motioncron += [subBuilder.buildPartial()]

              case 248 :
                speed = try input.readInt32()

              case 256 :
                activerec = try input.readInt32()

              case 266 :
                matbasefile = try input.readString()

              case 274 :
                created = try input.readString()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class MotionCron : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasCommand:Bool = false
        private(set) var command:String = ""

        private(set) var hasProgram:Bool = false
        private(set) var program:String = ""

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasCommand {
            try output.writeString(1, value:command)
          }
          if hasProgram {
            try output.writeString(2, value:program)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasCommand {
            serialize_size += command.computeStringSize(1)
          }
          if hasProgram {
            serialize_size += program.computeStringSize(2)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Motion.Message_.MotionCron> {
          var mergedArray = Array<Motion.Message_.MotionCron>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Motion.Message_.MotionCron? {
          return try Motion.Message_.MotionCron.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        internal class func parseFromData(data:NSData) throws -> Motion.Message_.MotionCron {
          return try Motion.Message_.MotionCron.Builder().mergeFromData(data, extensionRegistry:Motion.MotionRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionCron {
          return try Motion.Message_.MotionCron.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) throws -> Motion.Message_.MotionCron {
          return try Motion.Message_.MotionCron.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionCron {
          return try Motion.Message_.MotionCron.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.MotionCron {
          return try Motion.Message_.MotionCron.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionCron {
          return try Motion.Message_.MotionCron.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> Motion.Message_.MotionCron.Builder {
          return Motion.Message_.MotionCron.classBuilder() as! Motion.Message_.MotionCron.Builder
        }
        internal func getBuilder() -> Motion.Message_.MotionCron.Builder {
          return classBuilder() as! Motion.Message_.MotionCron.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return Motion.Message_.MotionCron.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return Motion.Message_.MotionCron.Builder()
        }
        internal func toBuilder() throws -> Motion.Message_.MotionCron.Builder {
          return try Motion.Message_.MotionCron.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:Motion.Message_.MotionCron) throws -> Motion.Message_.MotionCron.Builder {
          return try Motion.Message_.MotionCron.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) throws {
          if hasCommand {
            output += "\(indent) command: \(command) \n"
          }
          if hasProgram {
            output += "\(indent) program: \(program) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasCommand {
                   hashCode = (hashCode &* 31) &+ command.hashValue
                }
                if hasProgram {
                   hashCode = (hashCode &* 31) &+ program.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "Motion.Message_.MotionCron"
        }
        override internal func className() -> String {
            return "Motion.Message_.MotionCron"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return Motion.Message_.MotionCron.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:Motion.Message_.MotionCron = Motion.Message_.MotionCron()
          internal func getMessage() -> Motion.Message_.MotionCron {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var hasCommand:Bool {
               get {
                    return builderResult.hasCommand
               }
          }
          var command:String {
               get {
                    return builderResult.command
               }
               set (value) {
                   builderResult.hasCommand = true
                   builderResult.command = value
               }
          }
          func setCommand(value:String) -> Motion.Message_.MotionCron.Builder {
            self.command = value
            return self
          }
          internal func clearCommand() -> Motion.Message_.MotionCron.Builder{
               builderResult.hasCommand = false
               builderResult.command = ""
               return self
          }
          var hasProgram:Bool {
               get {
                    return builderResult.hasProgram
               }
          }
          var program:String {
               get {
                    return builderResult.program
               }
               set (value) {
                   builderResult.hasProgram = true
                   builderResult.program = value
               }
          }
          func setProgram(value:String) -> Motion.Message_.MotionCron.Builder {
            self.program = value
            return self
          }
          internal func clearProgram() -> Motion.Message_.MotionCron.Builder{
               builderResult.hasProgram = false
               builderResult.program = ""
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> Motion.Message_.MotionCron.Builder {
            builderResult = Motion.Message_.MotionCron()
            return self
          }
          internal override func clone() throws -> Motion.Message_.MotionCron.Builder {
            return try Motion.Message_.MotionCron.builderWithPrototype(builderResult)
          }
          internal override func build() throws -> Motion.Message_.MotionCron {
               try checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> Motion.Message_.MotionCron {
            let returnMe:Motion.Message_.MotionCron = builderResult
            return returnMe
          }
          internal func mergeFrom(other:Motion.Message_.MotionCron) throws -> Motion.Message_.MotionCron.Builder {
            if other == Motion.Message_.MotionCron() {
             return self
            }
            if other.hasCommand {
                 command = other.command
            }
            if other.hasProgram {
                 program = other.program
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.MotionCron.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionCron.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = try input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                command = try input.readString()

              case 18 :
                program = try input.readString()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class MotionMonth : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var motionday:Array<Motion.Message_.MotionDay>  = Array<Motion.Message_.MotionDay>()
        private(set) var hasMonthlabel:Bool = false
        private(set) var monthlabel:String = ""

        private(set) var hasDbMonthid:Bool = false
        private(set) var dbMonthid:Int32 = Int32(0)

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
          var isInitmotionday:Bool = true
          for oneElementmotionday in motionday {
              if (!oneElementmotionday.isInitialized()) {
                  isInitmotionday = false
                  break 
              }
          }
          if !isInitmotionday {
           return isInitmotionday
           }
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
          for oneElementmotionday in motionday {
              try output.writeMessage(1, value:oneElementmotionday)
          }
          if hasMonthlabel {
            try output.writeString(2, value:monthlabel)
          }
          if hasDbMonthid {
            try output.writeInt32(3, value:dbMonthid)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          for oneElementmotionday in motionday {
              serialize_size += oneElementmotionday.computeMessageSize(1)
          }
          if hasMonthlabel {
            serialize_size += monthlabel.computeStringSize(2)
          }
          if hasDbMonthid {
            serialize_size += dbMonthid.computeInt32Size(3)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Motion.Message_.MotionMonth> {
          var mergedArray = Array<Motion.Message_.MotionMonth>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Motion.Message_.MotionMonth? {
          return try Motion.Message_.MotionMonth.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        internal class func parseFromData(data:NSData) throws -> Motion.Message_.MotionMonth {
          return try Motion.Message_.MotionMonth.Builder().mergeFromData(data, extensionRegistry:Motion.MotionRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionMonth {
          return try Motion.Message_.MotionMonth.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) throws -> Motion.Message_.MotionMonth {
          return try Motion.Message_.MotionMonth.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionMonth {
          return try Motion.Message_.MotionMonth.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.MotionMonth {
          return try Motion.Message_.MotionMonth.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionMonth {
          return try Motion.Message_.MotionMonth.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> Motion.Message_.MotionMonth.Builder {
          return Motion.Message_.MotionMonth.classBuilder() as! Motion.Message_.MotionMonth.Builder
        }
        internal func getBuilder() -> Motion.Message_.MotionMonth.Builder {
          return classBuilder() as! Motion.Message_.MotionMonth.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return Motion.Message_.MotionMonth.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return Motion.Message_.MotionMonth.Builder()
        }
        internal func toBuilder() throws -> Motion.Message_.MotionMonth.Builder {
          return try Motion.Message_.MotionMonth.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:Motion.Message_.MotionMonth) throws -> Motion.Message_.MotionMonth.Builder {
          return try Motion.Message_.MotionMonth.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) throws {
          var motiondayElementIndex:Int = 0
          for oneElementmotionday in motionday {
              output += "\(indent) motionday[\(motiondayElementIndex)] {\n"
              try oneElementmotionday.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent)}\n"
              motiondayElementIndex++
          }
          if hasMonthlabel {
            output += "\(indent) monthlabel: \(monthlabel) \n"
          }
          if hasDbMonthid {
            output += "\(indent) dbMonthid: \(dbMonthid) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementmotionday in motionday {
                    hashCode = (hashCode &* 31) &+ oneElementmotionday.hashValue
                }
                if hasMonthlabel {
                   hashCode = (hashCode &* 31) &+ monthlabel.hashValue
                }
                if hasDbMonthid {
                   hashCode = (hashCode &* 31) &+ dbMonthid.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "Motion.Message_.MotionMonth"
        }
        override internal func className() -> String {
            return "Motion.Message_.MotionMonth"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return Motion.Message_.MotionMonth.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:Motion.Message_.MotionMonth = Motion.Message_.MotionMonth()
          internal func getMessage() -> Motion.Message_.MotionMonth {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var motionday:Array<Motion.Message_.MotionDay> {
               get {
                   return builderResult.motionday
               }
               set (value) {
                   builderResult.motionday = value
               }
          }
          func setMotionday(value:Array<Motion.Message_.MotionDay>) -> Motion.Message_.MotionMonth.Builder {
            self.motionday = value
            return self
          }
          internal func clearMotionday() -> Motion.Message_.MotionMonth.Builder {
            builderResult.motionday.removeAll(keepCapacity: false)
            return self
          }
          var hasMonthlabel:Bool {
               get {
                    return builderResult.hasMonthlabel
               }
          }
          var monthlabel:String {
               get {
                    return builderResult.monthlabel
               }
               set (value) {
                   builderResult.hasMonthlabel = true
                   builderResult.monthlabel = value
               }
          }
          func setMonthlabel(value:String) -> Motion.Message_.MotionMonth.Builder {
            self.monthlabel = value
            return self
          }
          internal func clearMonthlabel() -> Motion.Message_.MotionMonth.Builder{
               builderResult.hasMonthlabel = false
               builderResult.monthlabel = ""
               return self
          }
          var hasDbMonthid:Bool {
               get {
                    return builderResult.hasDbMonthid
               }
          }
          var dbMonthid:Int32 {
               get {
                    return builderResult.dbMonthid
               }
               set (value) {
                   builderResult.hasDbMonthid = true
                   builderResult.dbMonthid = value
               }
          }
          func setDbMonthid(value:Int32) -> Motion.Message_.MotionMonth.Builder {
            self.dbMonthid = value
            return self
          }
          internal func clearDbMonthid() -> Motion.Message_.MotionMonth.Builder{
               builderResult.hasDbMonthid = false
               builderResult.dbMonthid = Int32(0)
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> Motion.Message_.MotionMonth.Builder {
            builderResult = Motion.Message_.MotionMonth()
            return self
          }
          internal override func clone() throws -> Motion.Message_.MotionMonth.Builder {
            return try Motion.Message_.MotionMonth.builderWithPrototype(builderResult)
          }
          internal override func build() throws -> Motion.Message_.MotionMonth {
               try checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> Motion.Message_.MotionMonth {
            let returnMe:Motion.Message_.MotionMonth = builderResult
            return returnMe
          }
          internal func mergeFrom(other:Motion.Message_.MotionMonth) throws -> Motion.Message_.MotionMonth.Builder {
            if other == Motion.Message_.MotionMonth() {
             return self
            }
            if !other.motionday.isEmpty  {
               builderResult.motionday += other.motionday
            }
            if other.hasMonthlabel {
                 monthlabel = other.monthlabel
            }
            if other.hasDbMonthid {
                 dbMonthid = other.dbMonthid
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.MotionMonth.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionMonth.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = try input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                let subBuilder = Motion.Message_.MotionDay.Builder()
                try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                motionday += [subBuilder.buildPartial()]

              case 18 :
                monthlabel = try input.readString()

              case 24 :
                dbMonthid = try input.readInt32()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class MotionDay : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var instance:Array<Motion.Message_.Instance>  = Array<Motion.Message_.Instance>()
        private(set) var hasDaylabel:Bool = false
        private(set) var daylabel:String = ""

        private(set) var hasDbDayid:Bool = false
        private(set) var dbDayid:Int32 = Int32(0)

        private(set) var hasXmlfilepath:Bool = false
        private(set) var xmlfilepath:String = ""

        private(set) var hasTitle:Bool = false
        private(set) var title:String = ""

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
          var isInitinstance:Bool = true
          for oneElementinstance in instance {
              if (!oneElementinstance.isInitialized()) {
                  isInitinstance = false
                  break 
              }
          }
          if !isInitinstance {
           return isInitinstance
           }
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
          for oneElementinstance in instance {
              try output.writeMessage(1, value:oneElementinstance)
          }
          if hasDaylabel {
            try output.writeString(2, value:daylabel)
          }
          if hasDbDayid {
            try output.writeInt32(3, value:dbDayid)
          }
          if hasXmlfilepath {
            try output.writeString(4, value:xmlfilepath)
          }
          if hasTitle {
            try output.writeString(5, value:title)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          for oneElementinstance in instance {
              serialize_size += oneElementinstance.computeMessageSize(1)
          }
          if hasDaylabel {
            serialize_size += daylabel.computeStringSize(2)
          }
          if hasDbDayid {
            serialize_size += dbDayid.computeInt32Size(3)
          }
          if hasXmlfilepath {
            serialize_size += xmlfilepath.computeStringSize(4)
          }
          if hasTitle {
            serialize_size += title.computeStringSize(5)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Motion.Message_.MotionDay> {
          var mergedArray = Array<Motion.Message_.MotionDay>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Motion.Message_.MotionDay? {
          return try Motion.Message_.MotionDay.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        internal class func parseFromData(data:NSData) throws -> Motion.Message_.MotionDay {
          return try Motion.Message_.MotionDay.Builder().mergeFromData(data, extensionRegistry:Motion.MotionRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionDay {
          return try Motion.Message_.MotionDay.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) throws -> Motion.Message_.MotionDay {
          return try Motion.Message_.MotionDay.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionDay {
          return try Motion.Message_.MotionDay.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.MotionDay {
          return try Motion.Message_.MotionDay.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionDay {
          return try Motion.Message_.MotionDay.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> Motion.Message_.MotionDay.Builder {
          return Motion.Message_.MotionDay.classBuilder() as! Motion.Message_.MotionDay.Builder
        }
        internal func getBuilder() -> Motion.Message_.MotionDay.Builder {
          return classBuilder() as! Motion.Message_.MotionDay.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return Motion.Message_.MotionDay.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return Motion.Message_.MotionDay.Builder()
        }
        internal func toBuilder() throws -> Motion.Message_.MotionDay.Builder {
          return try Motion.Message_.MotionDay.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:Motion.Message_.MotionDay) throws -> Motion.Message_.MotionDay.Builder {
          return try Motion.Message_.MotionDay.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) throws {
          var instanceElementIndex:Int = 0
          for oneElementinstance in instance {
              output += "\(indent) instance[\(instanceElementIndex)] {\n"
              try oneElementinstance.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent)}\n"
              instanceElementIndex++
          }
          if hasDaylabel {
            output += "\(indent) daylabel: \(daylabel) \n"
          }
          if hasDbDayid {
            output += "\(indent) dbDayid: \(dbDayid) \n"
          }
          if hasXmlfilepath {
            output += "\(indent) xmlfilepath: \(xmlfilepath) \n"
          }
          if hasTitle {
            output += "\(indent) title: \(title) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementinstance in instance {
                    hashCode = (hashCode &* 31) &+ oneElementinstance.hashValue
                }
                if hasDaylabel {
                   hashCode = (hashCode &* 31) &+ daylabel.hashValue
                }
                if hasDbDayid {
                   hashCode = (hashCode &* 31) &+ dbDayid.hashValue
                }
                if hasXmlfilepath {
                   hashCode = (hashCode &* 31) &+ xmlfilepath.hashValue
                }
                if hasTitle {
                   hashCode = (hashCode &* 31) &+ title.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "Motion.Message_.MotionDay"
        }
        override internal func className() -> String {
            return "Motion.Message_.MotionDay"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return Motion.Message_.MotionDay.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:Motion.Message_.MotionDay = Motion.Message_.MotionDay()
          internal func getMessage() -> Motion.Message_.MotionDay {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var instance:Array<Motion.Message_.Instance> {
               get {
                   return builderResult.instance
               }
               set (value) {
                   builderResult.instance = value
               }
          }
          func setInstance(value:Array<Motion.Message_.Instance>) -> Motion.Message_.MotionDay.Builder {
            self.instance = value
            return self
          }
          internal func clearInstance() -> Motion.Message_.MotionDay.Builder {
            builderResult.instance.removeAll(keepCapacity: false)
            return self
          }
          var hasDaylabel:Bool {
               get {
                    return builderResult.hasDaylabel
               }
          }
          var daylabel:String {
               get {
                    return builderResult.daylabel
               }
               set (value) {
                   builderResult.hasDaylabel = true
                   builderResult.daylabel = value
               }
          }
          func setDaylabel(value:String) -> Motion.Message_.MotionDay.Builder {
            self.daylabel = value
            return self
          }
          internal func clearDaylabel() -> Motion.Message_.MotionDay.Builder{
               builderResult.hasDaylabel = false
               builderResult.daylabel = ""
               return self
          }
          var hasDbDayid:Bool {
               get {
                    return builderResult.hasDbDayid
               }
          }
          var dbDayid:Int32 {
               get {
                    return builderResult.dbDayid
               }
               set (value) {
                   builderResult.hasDbDayid = true
                   builderResult.dbDayid = value
               }
          }
          func setDbDayid(value:Int32) -> Motion.Message_.MotionDay.Builder {
            self.dbDayid = value
            return self
          }
          internal func clearDbDayid() -> Motion.Message_.MotionDay.Builder{
               builderResult.hasDbDayid = false
               builderResult.dbDayid = Int32(0)
               return self
          }
          var hasXmlfilepath:Bool {
               get {
                    return builderResult.hasXmlfilepath
               }
          }
          var xmlfilepath:String {
               get {
                    return builderResult.xmlfilepath
               }
               set (value) {
                   builderResult.hasXmlfilepath = true
                   builderResult.xmlfilepath = value
               }
          }
          func setXmlfilepath(value:String) -> Motion.Message_.MotionDay.Builder {
            self.xmlfilepath = value
            return self
          }
          internal func clearXmlfilepath() -> Motion.Message_.MotionDay.Builder{
               builderResult.hasXmlfilepath = false
               builderResult.xmlfilepath = ""
               return self
          }
          var hasTitle:Bool {
               get {
                    return builderResult.hasTitle
               }
          }
          var title:String {
               get {
                    return builderResult.title
               }
               set (value) {
                   builderResult.hasTitle = true
                   builderResult.title = value
               }
          }
          func setTitle(value:String) -> Motion.Message_.MotionDay.Builder {
            self.title = value
            return self
          }
          internal func clearTitle() -> Motion.Message_.MotionDay.Builder{
               builderResult.hasTitle = false
               builderResult.title = ""
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> Motion.Message_.MotionDay.Builder {
            builderResult = Motion.Message_.MotionDay()
            return self
          }
          internal override func clone() throws -> Motion.Message_.MotionDay.Builder {
            return try Motion.Message_.MotionDay.builderWithPrototype(builderResult)
          }
          internal override func build() throws -> Motion.Message_.MotionDay {
               try checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> Motion.Message_.MotionDay {
            let returnMe:Motion.Message_.MotionDay = builderResult
            return returnMe
          }
          internal func mergeFrom(other:Motion.Message_.MotionDay) throws -> Motion.Message_.MotionDay.Builder {
            if other == Motion.Message_.MotionDay() {
             return self
            }
            if !other.instance.isEmpty  {
               builderResult.instance += other.instance
            }
            if other.hasDaylabel {
                 daylabel = other.daylabel
            }
            if other.hasDbDayid {
                 dbDayid = other.dbDayid
            }
            if other.hasXmlfilepath {
                 xmlfilepath = other.xmlfilepath
            }
            if other.hasTitle {
                 title = other.title
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.MotionDay.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.MotionDay.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = try input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                let subBuilder = Motion.Message_.Instance.Builder()
                try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                instance += [subBuilder.buildPartial()]

              case 18 :
                daylabel = try input.readString()

              case 24 :
                dbDayid = try input.readInt32()

              case 34 :
                xmlfilepath = try input.readString()

              case 42 :
                title = try input.readString()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class Instance : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasIdinstance:Bool = false
        private(set) var idinstance:Int32 = Int32(0)

        private(set) var hasNumber:Bool = false
        private(set) var number:Int32 = Int32(0)

        private(set) var hasInstancestart:Bool = false
        private(set) var instancestart:String = ""

        private(set) var hasInstanceend:Bool = false
        private(set) var instanceend:String = ""

        private(set) var hasFileformat:Bool = false
        private(set) var fileformat:String = ""

        private(set) var image:Array<Motion.Message_.Image>  = Array<Motion.Message_.Image>()
        private(set) var crop:Array<Motion.Message_.Crop>  = Array<Motion.Message_.Crop>()
        private(set) var hasVideo:Bool = false
        private(set) var video:Motion.Message_.Video!
        private(set) var hasDir:Bool = false
        private(set) var dir:String = ""

        private(set) var hasXmlfile:Bool = false
        private(set) var xmlfile:String = ""

        private(set) var hasExtdata:Bool = false
        private(set) var extdata:String = ""

        private(set) var hasEnd:Bool = false
        private(set) var end:String = ""

        private(set) var hasBegintime:Bool = false
        private(set) var begintime:Int32 = Int32(0)

        private(set) var hasEndtime:Bool = false
        private(set) var endtime:Int32 = Int32(0)

        private(set) var hasInittime:Bool = false
        private(set) var inittime:Int32 = Int32(0)

        private(set) var hasInstance:Bool = false
        private(set) var instance:String = ""

        private(set) var hasInstancecode:Bool = false
        private(set) var instancecode:String = ""

        private(set) var hasTimeinfo:Bool = false
        private(set) var timeinfo:String = ""

        private(set) var hasDbDayid:Bool = false
        private(set) var dbDayid:Int32 = Int32(0)

        private(set) var hasDbRecognitionSetupId:Bool = false
        private(set) var dbRecognitionSetupId:Int32 = Int32(0)

        private(set) var hasRecname:Bool = false
        private(set) var recname:String = ""

        private(set) var hasCamera:Bool = false
        private(set) var camera:String = ""

        private(set) var hasCameranumber:Bool = false
        private(set) var cameranumber:Int32 = Int32(0)

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
          if !hasIdinstance {
            return false
          }
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasIdinstance {
            try output.writeInt32(1, value:idinstance)
          }
          if hasNumber {
            try output.writeInt32(2, value:number)
          }
          if hasInstancestart {
            try output.writeString(3, value:instancestart)
          }
          if hasInstanceend {
            try output.writeString(4, value:instanceend)
          }
          if hasFileformat {
            try output.writeString(5, value:fileformat)
          }
          for oneElementimage in image {
              try output.writeMessage(6, value:oneElementimage)
          }
          for oneElementcrop in crop {
              try output.writeMessage(7, value:oneElementcrop)
          }
          if hasVideo {
            try output.writeMessage(8, value:video)
          }
          if hasDir {
            try output.writeString(9, value:dir)
          }
          if hasXmlfile {
            try output.writeString(10, value:xmlfile)
          }
          if hasExtdata {
            try output.writeString(11, value:extdata)
          }
          if hasEnd {
            try output.writeString(12, value:end)
          }
          if hasBegintime {
            try output.writeInt32(13, value:begintime)
          }
          if hasEndtime {
            try output.writeInt32(14, value:endtime)
          }
          if hasInittime {
            try output.writeInt32(15, value:inittime)
          }
          if hasInstance {
            try output.writeString(16, value:instance)
          }
          if hasInstancecode {
            try output.writeString(17, value:instancecode)
          }
          if hasTimeinfo {
            try output.writeString(18, value:timeinfo)
          }
          if hasDbDayid {
            try output.writeInt32(19, value:dbDayid)
          }
          if hasDbRecognitionSetupId {
            try output.writeInt32(20, value:dbRecognitionSetupId)
          }
          if hasRecname {
            try output.writeString(21, value:recname)
          }
          if hasCamera {
            try output.writeString(22, value:camera)
          }
          if hasCameranumber {
            try output.writeInt32(23, value:cameranumber)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasIdinstance {
            serialize_size += idinstance.computeInt32Size(1)
          }
          if hasNumber {
            serialize_size += number.computeInt32Size(2)
          }
          if hasInstancestart {
            serialize_size += instancestart.computeStringSize(3)
          }
          if hasInstanceend {
            serialize_size += instanceend.computeStringSize(4)
          }
          if hasFileformat {
            serialize_size += fileformat.computeStringSize(5)
          }
          for oneElementimage in image {
              serialize_size += oneElementimage.computeMessageSize(6)
          }
          for oneElementcrop in crop {
              serialize_size += oneElementcrop.computeMessageSize(7)
          }
          if hasVideo {
              if let varSizevideo = video?.computeMessageSize(8) {
                  serialize_size += varSizevideo
              }
          }
          if hasDir {
            serialize_size += dir.computeStringSize(9)
          }
          if hasXmlfile {
            serialize_size += xmlfile.computeStringSize(10)
          }
          if hasExtdata {
            serialize_size += extdata.computeStringSize(11)
          }
          if hasEnd {
            serialize_size += end.computeStringSize(12)
          }
          if hasBegintime {
            serialize_size += begintime.computeInt32Size(13)
          }
          if hasEndtime {
            serialize_size += endtime.computeInt32Size(14)
          }
          if hasInittime {
            serialize_size += inittime.computeInt32Size(15)
          }
          if hasInstance {
            serialize_size += instance.computeStringSize(16)
          }
          if hasInstancecode {
            serialize_size += instancecode.computeStringSize(17)
          }
          if hasTimeinfo {
            serialize_size += timeinfo.computeStringSize(18)
          }
          if hasDbDayid {
            serialize_size += dbDayid.computeInt32Size(19)
          }
          if hasDbRecognitionSetupId {
            serialize_size += dbRecognitionSetupId.computeInt32Size(20)
          }
          if hasRecname {
            serialize_size += recname.computeStringSize(21)
          }
          if hasCamera {
            serialize_size += camera.computeStringSize(22)
          }
          if hasCameranumber {
            serialize_size += cameranumber.computeInt32Size(23)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Motion.Message_.Instance> {
          var mergedArray = Array<Motion.Message_.Instance>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Motion.Message_.Instance? {
          return try Motion.Message_.Instance.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        internal class func parseFromData(data:NSData) throws -> Motion.Message_.Instance {
          return try Motion.Message_.Instance.Builder().mergeFromData(data, extensionRegistry:Motion.MotionRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.Instance {
          return try Motion.Message_.Instance.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) throws -> Motion.Message_.Instance {
          return try Motion.Message_.Instance.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.Instance {
          return try Motion.Message_.Instance.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.Instance {
          return try Motion.Message_.Instance.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.Instance {
          return try Motion.Message_.Instance.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> Motion.Message_.Instance.Builder {
          return Motion.Message_.Instance.classBuilder() as! Motion.Message_.Instance.Builder
        }
        internal func getBuilder() -> Motion.Message_.Instance.Builder {
          return classBuilder() as! Motion.Message_.Instance.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return Motion.Message_.Instance.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return Motion.Message_.Instance.Builder()
        }
        internal func toBuilder() throws -> Motion.Message_.Instance.Builder {
          return try Motion.Message_.Instance.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:Motion.Message_.Instance) throws -> Motion.Message_.Instance.Builder {
          return try Motion.Message_.Instance.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) throws {
          if hasIdinstance {
            output += "\(indent) idinstance: \(idinstance) \n"
          }
          if hasNumber {
            output += "\(indent) number: \(number) \n"
          }
          if hasInstancestart {
            output += "\(indent) instancestart: \(instancestart) \n"
          }
          if hasInstanceend {
            output += "\(indent) instanceend: \(instanceend) \n"
          }
          if hasFileformat {
            output += "\(indent) fileformat: \(fileformat) \n"
          }
          var imageElementIndex:Int = 0
          for oneElementimage in image {
              output += "\(indent) image[\(imageElementIndex)] {\n"
              try oneElementimage.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent)}\n"
              imageElementIndex++
          }
          var cropElementIndex:Int = 0
          for oneElementcrop in crop {
              output += "\(indent) crop[\(cropElementIndex)] {\n"
              try oneElementcrop.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent)}\n"
              cropElementIndex++
          }
          if hasVideo {
            output += "\(indent) video {\n"
            try video?.writeDescriptionTo(&output, indent:"\(indent)  ")
            output += "\(indent) }\n"
          }
          if hasDir {
            output += "\(indent) dir: \(dir) \n"
          }
          if hasXmlfile {
            output += "\(indent) xmlfile: \(xmlfile) \n"
          }
          if hasExtdata {
            output += "\(indent) extdata: \(extdata) \n"
          }
          if hasEnd {
            output += "\(indent) end: \(end) \n"
          }
          if hasBegintime {
            output += "\(indent) begintime: \(begintime) \n"
          }
          if hasEndtime {
            output += "\(indent) endtime: \(endtime) \n"
          }
          if hasInittime {
            output += "\(indent) inittime: \(inittime) \n"
          }
          if hasInstance {
            output += "\(indent) instance: \(instance) \n"
          }
          if hasInstancecode {
            output += "\(indent) instancecode: \(instancecode) \n"
          }
          if hasTimeinfo {
            output += "\(indent) timeinfo: \(timeinfo) \n"
          }
          if hasDbDayid {
            output += "\(indent) dbDayid: \(dbDayid) \n"
          }
          if hasDbRecognitionSetupId {
            output += "\(indent) dbRecognitionSetupId: \(dbRecognitionSetupId) \n"
          }
          if hasRecname {
            output += "\(indent) recname: \(recname) \n"
          }
          if hasCamera {
            output += "\(indent) camera: \(camera) \n"
          }
          if hasCameranumber {
            output += "\(indent) cameranumber: \(cameranumber) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasIdinstance {
                   hashCode = (hashCode &* 31) &+ idinstance.hashValue
                }
                if hasNumber {
                   hashCode = (hashCode &* 31) &+ number.hashValue
                }
                if hasInstancestart {
                   hashCode = (hashCode &* 31) &+ instancestart.hashValue
                }
                if hasInstanceend {
                   hashCode = (hashCode &* 31) &+ instanceend.hashValue
                }
                if hasFileformat {
                   hashCode = (hashCode &* 31) &+ fileformat.hashValue
                }
                for oneElementimage in image {
                    hashCode = (hashCode &* 31) &+ oneElementimage.hashValue
                }
                for oneElementcrop in crop {
                    hashCode = (hashCode &* 31) &+ oneElementcrop.hashValue
                }
                if hasVideo {
                    if let hashValuevideo = video?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuevideo
                    }
                }
                if hasDir {
                   hashCode = (hashCode &* 31) &+ dir.hashValue
                }
                if hasXmlfile {
                   hashCode = (hashCode &* 31) &+ xmlfile.hashValue
                }
                if hasExtdata {
                   hashCode = (hashCode &* 31) &+ extdata.hashValue
                }
                if hasEnd {
                   hashCode = (hashCode &* 31) &+ end.hashValue
                }
                if hasBegintime {
                   hashCode = (hashCode &* 31) &+ begintime.hashValue
                }
                if hasEndtime {
                   hashCode = (hashCode &* 31) &+ endtime.hashValue
                }
                if hasInittime {
                   hashCode = (hashCode &* 31) &+ inittime.hashValue
                }
                if hasInstance {
                   hashCode = (hashCode &* 31) &+ instance.hashValue
                }
                if hasInstancecode {
                   hashCode = (hashCode &* 31) &+ instancecode.hashValue
                }
                if hasTimeinfo {
                   hashCode = (hashCode &* 31) &+ timeinfo.hashValue
                }
                if hasDbDayid {
                   hashCode = (hashCode &* 31) &+ dbDayid.hashValue
                }
                if hasDbRecognitionSetupId {
                   hashCode = (hashCode &* 31) &+ dbRecognitionSetupId.hashValue
                }
                if hasRecname {
                   hashCode = (hashCode &* 31) &+ recname.hashValue
                }
                if hasCamera {
                   hashCode = (hashCode &* 31) &+ camera.hashValue
                }
                if hasCameranumber {
                   hashCode = (hashCode &* 31) &+ cameranumber.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "Motion.Message_.Instance"
        }
        override internal func className() -> String {
            return "Motion.Message_.Instance"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return Motion.Message_.Instance.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:Motion.Message_.Instance = Motion.Message_.Instance()
          internal func getMessage() -> Motion.Message_.Instance {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var hasIdinstance:Bool {
               get {
                    return builderResult.hasIdinstance
               }
          }
          var idinstance:Int32 {
               get {
                    return builderResult.idinstance
               }
               set (value) {
                   builderResult.hasIdinstance = true
                   builderResult.idinstance = value
               }
          }
          func setIdinstance(value:Int32) -> Motion.Message_.Instance.Builder {
            self.idinstance = value
            return self
          }
          internal func clearIdinstance() -> Motion.Message_.Instance.Builder{
               builderResult.hasIdinstance = false
               builderResult.idinstance = Int32(0)
               return self
          }
          var hasNumber:Bool {
               get {
                    return builderResult.hasNumber
               }
          }
          var number:Int32 {
               get {
                    return builderResult.number
               }
               set (value) {
                   builderResult.hasNumber = true
                   builderResult.number = value
               }
          }
          func setNumber(value:Int32) -> Motion.Message_.Instance.Builder {
            self.number = value
            return self
          }
          internal func clearNumber() -> Motion.Message_.Instance.Builder{
               builderResult.hasNumber = false
               builderResult.number = Int32(0)
               return self
          }
          var hasInstancestart:Bool {
               get {
                    return builderResult.hasInstancestart
               }
          }
          var instancestart:String {
               get {
                    return builderResult.instancestart
               }
               set (value) {
                   builderResult.hasInstancestart = true
                   builderResult.instancestart = value
               }
          }
          func setInstancestart(value:String) -> Motion.Message_.Instance.Builder {
            self.instancestart = value
            return self
          }
          internal func clearInstancestart() -> Motion.Message_.Instance.Builder{
               builderResult.hasInstancestart = false
               builderResult.instancestart = ""
               return self
          }
          var hasInstanceend:Bool {
               get {
                    return builderResult.hasInstanceend
               }
          }
          var instanceend:String {
               get {
                    return builderResult.instanceend
               }
               set (value) {
                   builderResult.hasInstanceend = true
                   builderResult.instanceend = value
               }
          }
          func setInstanceend(value:String) -> Motion.Message_.Instance.Builder {
            self.instanceend = value
            return self
          }
          internal func clearInstanceend() -> Motion.Message_.Instance.Builder{
               builderResult.hasInstanceend = false
               builderResult.instanceend = ""
               return self
          }
          var hasFileformat:Bool {
               get {
                    return builderResult.hasFileformat
               }
          }
          var fileformat:String {
               get {
                    return builderResult.fileformat
               }
               set (value) {
                   builderResult.hasFileformat = true
                   builderResult.fileformat = value
               }
          }
          func setFileformat(value:String) -> Motion.Message_.Instance.Builder {
            self.fileformat = value
            return self
          }
          internal func clearFileformat() -> Motion.Message_.Instance.Builder{
               builderResult.hasFileformat = false
               builderResult.fileformat = ""
               return self
          }
          var image:Array<Motion.Message_.Image> {
               get {
                   return builderResult.image
               }
               set (value) {
                   builderResult.image = value
               }
          }
          func setImage(value:Array<Motion.Message_.Image>) -> Motion.Message_.Instance.Builder {
            self.image = value
            return self
          }
          internal func clearImage() -> Motion.Message_.Instance.Builder {
            builderResult.image.removeAll(keepCapacity: false)
            return self
          }
          var crop:Array<Motion.Message_.Crop> {
               get {
                   return builderResult.crop
               }
               set (value) {
                   builderResult.crop = value
               }
          }
          func setCrop(value:Array<Motion.Message_.Crop>) -> Motion.Message_.Instance.Builder {
            self.crop = value
            return self
          }
          internal func clearCrop() -> Motion.Message_.Instance.Builder {
            builderResult.crop.removeAll(keepCapacity: false)
            return self
          }
          var hasVideo:Bool {
               get {
                   return builderResult.hasVideo
               }
          }
          var video:Motion.Message_.Video! {
               get {
                   if videoBuilder_ != nil {
                      builderResult.video = videoBuilder_.getMessage()
                   }
                   return builderResult.video
               }
               set (value) {
                   builderResult.hasVideo = true
                   builderResult.video = value
               }
          }
          private var videoBuilder_:Motion.Message_.Video.Builder! {
               didSet {
                  builderResult.hasVideo = true
               }
          }
          internal func getVideoBuilder() -> Motion.Message_.Video.Builder {
            if videoBuilder_ == nil {
               videoBuilder_ = Motion.Message_.Video.Builder()
               builderResult.video = videoBuilder_.getMessage()
               if video != nil {
                  try! videoBuilder_.mergeFrom(video)
               }
            }
            return videoBuilder_
          }
          func setVideo(value:Motion.Message_.Video!) -> Motion.Message_.Instance.Builder {
            self.video = value
            return self
          }
          internal func mergeVideo(value:Motion.Message_.Video) throws -> Motion.Message_.Instance.Builder {
            if builderResult.hasVideo {
              builderResult.video = try Motion.Message_.Video.builderWithPrototype(builderResult.video).mergeFrom(value).buildPartial()
            } else {
              builderResult.video = value
            }
            builderResult.hasVideo = true
            return self
          }
          internal func clearVideo() -> Motion.Message_.Instance.Builder {
            videoBuilder_ = nil
            builderResult.hasVideo = false
            builderResult.video = nil
            return self
          }
          var hasDir:Bool {
               get {
                    return builderResult.hasDir
               }
          }
          var dir:String {
               get {
                    return builderResult.dir
               }
               set (value) {
                   builderResult.hasDir = true
                   builderResult.dir = value
               }
          }
          func setDir(value:String) -> Motion.Message_.Instance.Builder {
            self.dir = value
            return self
          }
          internal func clearDir() -> Motion.Message_.Instance.Builder{
               builderResult.hasDir = false
               builderResult.dir = ""
               return self
          }
          var hasXmlfile:Bool {
               get {
                    return builderResult.hasXmlfile
               }
          }
          var xmlfile:String {
               get {
                    return builderResult.xmlfile
               }
               set (value) {
                   builderResult.hasXmlfile = true
                   builderResult.xmlfile = value
               }
          }
          func setXmlfile(value:String) -> Motion.Message_.Instance.Builder {
            self.xmlfile = value
            return self
          }
          internal func clearXmlfile() -> Motion.Message_.Instance.Builder{
               builderResult.hasXmlfile = false
               builderResult.xmlfile = ""
               return self
          }
          var hasExtdata:Bool {
               get {
                    return builderResult.hasExtdata
               }
          }
          var extdata:String {
               get {
                    return builderResult.extdata
               }
               set (value) {
                   builderResult.hasExtdata = true
                   builderResult.extdata = value
               }
          }
          func setExtdata(value:String) -> Motion.Message_.Instance.Builder {
            self.extdata = value
            return self
          }
          internal func clearExtdata() -> Motion.Message_.Instance.Builder{
               builderResult.hasExtdata = false
               builderResult.extdata = ""
               return self
          }
          var hasEnd:Bool {
               get {
                    return builderResult.hasEnd
               }
          }
          var end:String {
               get {
                    return builderResult.end
               }
               set (value) {
                   builderResult.hasEnd = true
                   builderResult.end = value
               }
          }
          func setEnd(value:String) -> Motion.Message_.Instance.Builder {
            self.end = value
            return self
          }
          internal func clearEnd() -> Motion.Message_.Instance.Builder{
               builderResult.hasEnd = false
               builderResult.end = ""
               return self
          }
          var hasBegintime:Bool {
               get {
                    return builderResult.hasBegintime
               }
          }
          var begintime:Int32 {
               get {
                    return builderResult.begintime
               }
               set (value) {
                   builderResult.hasBegintime = true
                   builderResult.begintime = value
               }
          }
          func setBegintime(value:Int32) -> Motion.Message_.Instance.Builder {
            self.begintime = value
            return self
          }
          internal func clearBegintime() -> Motion.Message_.Instance.Builder{
               builderResult.hasBegintime = false
               builderResult.begintime = Int32(0)
               return self
          }
          var hasEndtime:Bool {
               get {
                    return builderResult.hasEndtime
               }
          }
          var endtime:Int32 {
               get {
                    return builderResult.endtime
               }
               set (value) {
                   builderResult.hasEndtime = true
                   builderResult.endtime = value
               }
          }
          func setEndtime(value:Int32) -> Motion.Message_.Instance.Builder {
            self.endtime = value
            return self
          }
          internal func clearEndtime() -> Motion.Message_.Instance.Builder{
               builderResult.hasEndtime = false
               builderResult.endtime = Int32(0)
               return self
          }
          var hasInittime:Bool {
               get {
                    return builderResult.hasInittime
               }
          }
          var inittime:Int32 {
               get {
                    return builderResult.inittime
               }
               set (value) {
                   builderResult.hasInittime = true
                   builderResult.inittime = value
               }
          }
          func setInittime(value:Int32) -> Motion.Message_.Instance.Builder {
            self.inittime = value
            return self
          }
          internal func clearInittime() -> Motion.Message_.Instance.Builder{
               builderResult.hasInittime = false
               builderResult.inittime = Int32(0)
               return self
          }
          var hasInstance:Bool {
               get {
                    return builderResult.hasInstance
               }
          }
          var instance:String {
               get {
                    return builderResult.instance
               }
               set (value) {
                   builderResult.hasInstance = true
                   builderResult.instance = value
               }
          }
          func setInstance(value:String) -> Motion.Message_.Instance.Builder {
            self.instance = value
            return self
          }
          internal func clearInstance() -> Motion.Message_.Instance.Builder{
               builderResult.hasInstance = false
               builderResult.instance = ""
               return self
          }
          var hasInstancecode:Bool {
               get {
                    return builderResult.hasInstancecode
               }
          }
          var instancecode:String {
               get {
                    return builderResult.instancecode
               }
               set (value) {
                   builderResult.hasInstancecode = true
                   builderResult.instancecode = value
               }
          }
          func setInstancecode(value:String) -> Motion.Message_.Instance.Builder {
            self.instancecode = value
            return self
          }
          internal func clearInstancecode() -> Motion.Message_.Instance.Builder{
               builderResult.hasInstancecode = false
               builderResult.instancecode = ""
               return self
          }
          var hasTimeinfo:Bool {
               get {
                    return builderResult.hasTimeinfo
               }
          }
          var timeinfo:String {
               get {
                    return builderResult.timeinfo
               }
               set (value) {
                   builderResult.hasTimeinfo = true
                   builderResult.timeinfo = value
               }
          }
          func setTimeinfo(value:String) -> Motion.Message_.Instance.Builder {
            self.timeinfo = value
            return self
          }
          internal func clearTimeinfo() -> Motion.Message_.Instance.Builder{
               builderResult.hasTimeinfo = false
               builderResult.timeinfo = ""
               return self
          }
          var hasDbDayid:Bool {
               get {
                    return builderResult.hasDbDayid
               }
          }
          var dbDayid:Int32 {
               get {
                    return builderResult.dbDayid
               }
               set (value) {
                   builderResult.hasDbDayid = true
                   builderResult.dbDayid = value
               }
          }
          func setDbDayid(value:Int32) -> Motion.Message_.Instance.Builder {
            self.dbDayid = value
            return self
          }
          internal func clearDbDayid() -> Motion.Message_.Instance.Builder{
               builderResult.hasDbDayid = false
               builderResult.dbDayid = Int32(0)
               return self
          }
          var hasDbRecognitionSetupId:Bool {
               get {
                    return builderResult.hasDbRecognitionSetupId
               }
          }
          var dbRecognitionSetupId:Int32 {
               get {
                    return builderResult.dbRecognitionSetupId
               }
               set (value) {
                   builderResult.hasDbRecognitionSetupId = true
                   builderResult.dbRecognitionSetupId = value
               }
          }
          func setDbRecognitionSetupId(value:Int32) -> Motion.Message_.Instance.Builder {
            self.dbRecognitionSetupId = value
            return self
          }
          internal func clearDbRecognitionSetupId() -> Motion.Message_.Instance.Builder{
               builderResult.hasDbRecognitionSetupId = false
               builderResult.dbRecognitionSetupId = Int32(0)
               return self
          }
          var hasRecname:Bool {
               get {
                    return builderResult.hasRecname
               }
          }
          var recname:String {
               get {
                    return builderResult.recname
               }
               set (value) {
                   builderResult.hasRecname = true
                   builderResult.recname = value
               }
          }
          func setRecname(value:String) -> Motion.Message_.Instance.Builder {
            self.recname = value
            return self
          }
          internal func clearRecname() -> Motion.Message_.Instance.Builder{
               builderResult.hasRecname = false
               builderResult.recname = ""
               return self
          }
          var hasCamera:Bool {
               get {
                    return builderResult.hasCamera
               }
          }
          var camera:String {
               get {
                    return builderResult.camera
               }
               set (value) {
                   builderResult.hasCamera = true
                   builderResult.camera = value
               }
          }
          func setCamera(value:String) -> Motion.Message_.Instance.Builder {
            self.camera = value
            return self
          }
          internal func clearCamera() -> Motion.Message_.Instance.Builder{
               builderResult.hasCamera = false
               builderResult.camera = ""
               return self
          }
          var hasCameranumber:Bool {
               get {
                    return builderResult.hasCameranumber
               }
          }
          var cameranumber:Int32 {
               get {
                    return builderResult.cameranumber
               }
               set (value) {
                   builderResult.hasCameranumber = true
                   builderResult.cameranumber = value
               }
          }
          func setCameranumber(value:Int32) -> Motion.Message_.Instance.Builder {
            self.cameranumber = value
            return self
          }
          internal func clearCameranumber() -> Motion.Message_.Instance.Builder{
               builderResult.hasCameranumber = false
               builderResult.cameranumber = Int32(0)
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> Motion.Message_.Instance.Builder {
            builderResult = Motion.Message_.Instance()
            return self
          }
          internal override func clone() throws -> Motion.Message_.Instance.Builder {
            return try Motion.Message_.Instance.builderWithPrototype(builderResult)
          }
          internal override func build() throws -> Motion.Message_.Instance {
               try checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> Motion.Message_.Instance {
            let returnMe:Motion.Message_.Instance = builderResult
            return returnMe
          }
          internal func mergeFrom(other:Motion.Message_.Instance) throws -> Motion.Message_.Instance.Builder {
            if other == Motion.Message_.Instance() {
             return self
            }
            if other.hasIdinstance {
                 idinstance = other.idinstance
            }
            if other.hasNumber {
                 number = other.number
            }
            if other.hasInstancestart {
                 instancestart = other.instancestart
            }
            if other.hasInstanceend {
                 instanceend = other.instanceend
            }
            if other.hasFileformat {
                 fileformat = other.fileformat
            }
            if !other.image.isEmpty  {
               builderResult.image += other.image
            }
            if !other.crop.isEmpty  {
               builderResult.crop += other.crop
            }
            if (other.hasVideo) {
                try mergeVideo(other.video)
            }
            if other.hasDir {
                 dir = other.dir
            }
            if other.hasXmlfile {
                 xmlfile = other.xmlfile
            }
            if other.hasExtdata {
                 extdata = other.extdata
            }
            if other.hasEnd {
                 end = other.end
            }
            if other.hasBegintime {
                 begintime = other.begintime
            }
            if other.hasEndtime {
                 endtime = other.endtime
            }
            if other.hasInittime {
                 inittime = other.inittime
            }
            if other.hasInstance {
                 instance = other.instance
            }
            if other.hasInstancecode {
                 instancecode = other.instancecode
            }
            if other.hasTimeinfo {
                 timeinfo = other.timeinfo
            }
            if other.hasDbDayid {
                 dbDayid = other.dbDayid
            }
            if other.hasDbRecognitionSetupId {
                 dbRecognitionSetupId = other.dbRecognitionSetupId
            }
            if other.hasRecname {
                 recname = other.recname
            }
            if other.hasCamera {
                 camera = other.camera
            }
            if other.hasCameranumber {
                 cameranumber = other.cameranumber
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.Instance.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.Instance.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = try input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 8 :
                idinstance = try input.readInt32()

              case 16 :
                number = try input.readInt32()

              case 26 :
                instancestart = try input.readString()

              case 34 :
                instanceend = try input.readString()

              case 42 :
                fileformat = try input.readString()

              case 50 :
                let subBuilder = Motion.Message_.Image.Builder()
                try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                image += [subBuilder.buildPartial()]

              case 58 :
                let subBuilder = Motion.Message_.Crop.Builder()
                try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                crop += [subBuilder.buildPartial()]

              case 66 :
                let subBuilder:Motion.Message_.Video.Builder = Motion.Message_.Video.Builder()
                if hasVideo {
                  try subBuilder.mergeFrom(video)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                video = subBuilder.buildPartial()

              case 74 :
                dir = try input.readString()

              case 82 :
                xmlfile = try input.readString()

              case 90 :
                extdata = try input.readString()

              case 98 :
                end = try input.readString()

              case 104 :
                begintime = try input.readInt32()

              case 112 :
                endtime = try input.readInt32()

              case 120 :
                inittime = try input.readInt32()

              case 130 :
                instance = try input.readString()

              case 138 :
                instancecode = try input.readString()

              case 146 :
                timeinfo = try input.readString()

              case 152 :
                dbDayid = try input.readInt32()

              case 160 :
                dbRecognitionSetupId = try input.readInt32()

              case 170 :
                recname = try input.readString()

              case 178 :
                camera = try input.readString()

              case 184 :
                cameranumber = try input.readInt32()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class Image : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasPath:Bool = false
        private(set) var path:String = ""

        private(set) var hasName:Bool = false
        private(set) var name:String = ""

        private(set) var hasImagechanges:Bool = false
        private(set) var imagechanges:Int32 = Int32(0)

        private(set) var hasTime:Bool = false
        private(set) var time:String = ""

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasPath {
            try output.writeString(1, value:path)
          }
          if hasName {
            try output.writeString(2, value:name)
          }
          if hasImagechanges {
            try output.writeInt32(3, value:imagechanges)
          }
          if hasTime {
            try output.writeString(4, value:time)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasPath {
            serialize_size += path.computeStringSize(1)
          }
          if hasName {
            serialize_size += name.computeStringSize(2)
          }
          if hasImagechanges {
            serialize_size += imagechanges.computeInt32Size(3)
          }
          if hasTime {
            serialize_size += time.computeStringSize(4)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Motion.Message_.Image> {
          var mergedArray = Array<Motion.Message_.Image>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Motion.Message_.Image? {
          return try Motion.Message_.Image.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        internal class func parseFromData(data:NSData) throws -> Motion.Message_.Image {
          return try Motion.Message_.Image.Builder().mergeFromData(data, extensionRegistry:Motion.MotionRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.Image {
          return try Motion.Message_.Image.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) throws -> Motion.Message_.Image {
          return try Motion.Message_.Image.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.Image {
          return try Motion.Message_.Image.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.Image {
          return try Motion.Message_.Image.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.Image {
          return try Motion.Message_.Image.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> Motion.Message_.Image.Builder {
          return Motion.Message_.Image.classBuilder() as! Motion.Message_.Image.Builder
        }
        internal func getBuilder() -> Motion.Message_.Image.Builder {
          return classBuilder() as! Motion.Message_.Image.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return Motion.Message_.Image.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return Motion.Message_.Image.Builder()
        }
        internal func toBuilder() throws -> Motion.Message_.Image.Builder {
          return try Motion.Message_.Image.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:Motion.Message_.Image) throws -> Motion.Message_.Image.Builder {
          return try Motion.Message_.Image.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) throws {
          if hasPath {
            output += "\(indent) path: \(path) \n"
          }
          if hasName {
            output += "\(indent) name: \(name) \n"
          }
          if hasImagechanges {
            output += "\(indent) imagechanges: \(imagechanges) \n"
          }
          if hasTime {
            output += "\(indent) time: \(time) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasPath {
                   hashCode = (hashCode &* 31) &+ path.hashValue
                }
                if hasName {
                   hashCode = (hashCode &* 31) &+ name.hashValue
                }
                if hasImagechanges {
                   hashCode = (hashCode &* 31) &+ imagechanges.hashValue
                }
                if hasTime {
                   hashCode = (hashCode &* 31) &+ time.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "Motion.Message_.Image"
        }
        override internal func className() -> String {
            return "Motion.Message_.Image"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return Motion.Message_.Image.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:Motion.Message_.Image = Motion.Message_.Image()
          internal func getMessage() -> Motion.Message_.Image {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var hasPath:Bool {
               get {
                    return builderResult.hasPath
               }
          }
          var path:String {
               get {
                    return builderResult.path
               }
               set (value) {
                   builderResult.hasPath = true
                   builderResult.path = value
               }
          }
          func setPath(value:String) -> Motion.Message_.Image.Builder {
            self.path = value
            return self
          }
          internal func clearPath() -> Motion.Message_.Image.Builder{
               builderResult.hasPath = false
               builderResult.path = ""
               return self
          }
          var hasName:Bool {
               get {
                    return builderResult.hasName
               }
          }
          var name:String {
               get {
                    return builderResult.name
               }
               set (value) {
                   builderResult.hasName = true
                   builderResult.name = value
               }
          }
          func setName(value:String) -> Motion.Message_.Image.Builder {
            self.name = value
            return self
          }
          internal func clearName() -> Motion.Message_.Image.Builder{
               builderResult.hasName = false
               builderResult.name = ""
               return self
          }
          var hasImagechanges:Bool {
               get {
                    return builderResult.hasImagechanges
               }
          }
          var imagechanges:Int32 {
               get {
                    return builderResult.imagechanges
               }
               set (value) {
                   builderResult.hasImagechanges = true
                   builderResult.imagechanges = value
               }
          }
          func setImagechanges(value:Int32) -> Motion.Message_.Image.Builder {
            self.imagechanges = value
            return self
          }
          internal func clearImagechanges() -> Motion.Message_.Image.Builder{
               builderResult.hasImagechanges = false
               builderResult.imagechanges = Int32(0)
               return self
          }
          var hasTime:Bool {
               get {
                    return builderResult.hasTime
               }
          }
          var time:String {
               get {
                    return builderResult.time
               }
               set (value) {
                   builderResult.hasTime = true
                   builderResult.time = value
               }
          }
          func setTime(value:String) -> Motion.Message_.Image.Builder {
            self.time = value
            return self
          }
          internal func clearTime() -> Motion.Message_.Image.Builder{
               builderResult.hasTime = false
               builderResult.time = ""
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> Motion.Message_.Image.Builder {
            builderResult = Motion.Message_.Image()
            return self
          }
          internal override func clone() throws -> Motion.Message_.Image.Builder {
            return try Motion.Message_.Image.builderWithPrototype(builderResult)
          }
          internal override func build() throws -> Motion.Message_.Image {
               try checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> Motion.Message_.Image {
            let returnMe:Motion.Message_.Image = builderResult
            return returnMe
          }
          internal func mergeFrom(other:Motion.Message_.Image) throws -> Motion.Message_.Image.Builder {
            if other == Motion.Message_.Image() {
             return self
            }
            if other.hasPath {
                 path = other.path
            }
            if other.hasName {
                 name = other.name
            }
            if other.hasImagechanges {
                 imagechanges = other.imagechanges
            }
            if other.hasTime {
                 time = other.time
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.Image.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.Image.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = try input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                path = try input.readString()

              case 18 :
                name = try input.readString()

              case 24 :
                imagechanges = try input.readInt32()

              case 34 :
                time = try input.readString()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class Crop : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasRect:Bool = false
        private(set) var rect:String = ""

        private(set) var hasDbImagefatherid:Bool = false
        private(set) var dbImagefatherid:Int32 = Int32(0)

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasRect {
            try output.writeString(1, value:rect)
          }
          if hasDbImagefatherid {
            try output.writeInt32(2, value:dbImagefatherid)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasRect {
            serialize_size += rect.computeStringSize(1)
          }
          if hasDbImagefatherid {
            serialize_size += dbImagefatherid.computeInt32Size(2)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Motion.Message_.Crop> {
          var mergedArray = Array<Motion.Message_.Crop>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Motion.Message_.Crop? {
          return try Motion.Message_.Crop.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        internal class func parseFromData(data:NSData) throws -> Motion.Message_.Crop {
          return try Motion.Message_.Crop.Builder().mergeFromData(data, extensionRegistry:Motion.MotionRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.Crop {
          return try Motion.Message_.Crop.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) throws -> Motion.Message_.Crop {
          return try Motion.Message_.Crop.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.Crop {
          return try Motion.Message_.Crop.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.Crop {
          return try Motion.Message_.Crop.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.Crop {
          return try Motion.Message_.Crop.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> Motion.Message_.Crop.Builder {
          return Motion.Message_.Crop.classBuilder() as! Motion.Message_.Crop.Builder
        }
        internal func getBuilder() -> Motion.Message_.Crop.Builder {
          return classBuilder() as! Motion.Message_.Crop.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return Motion.Message_.Crop.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return Motion.Message_.Crop.Builder()
        }
        internal func toBuilder() throws -> Motion.Message_.Crop.Builder {
          return try Motion.Message_.Crop.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:Motion.Message_.Crop) throws -> Motion.Message_.Crop.Builder {
          return try Motion.Message_.Crop.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) throws {
          if hasRect {
            output += "\(indent) rect: \(rect) \n"
          }
          if hasDbImagefatherid {
            output += "\(indent) dbImagefatherid: \(dbImagefatherid) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasRect {
                   hashCode = (hashCode &* 31) &+ rect.hashValue
                }
                if hasDbImagefatherid {
                   hashCode = (hashCode &* 31) &+ dbImagefatherid.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "Motion.Message_.Crop"
        }
        override internal func className() -> String {
            return "Motion.Message_.Crop"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return Motion.Message_.Crop.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:Motion.Message_.Crop = Motion.Message_.Crop()
          internal func getMessage() -> Motion.Message_.Crop {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var hasRect:Bool {
               get {
                    return builderResult.hasRect
               }
          }
          var rect:String {
               get {
                    return builderResult.rect
               }
               set (value) {
                   builderResult.hasRect = true
                   builderResult.rect = value
               }
          }
          func setRect(value:String) -> Motion.Message_.Crop.Builder {
            self.rect = value
            return self
          }
          internal func clearRect() -> Motion.Message_.Crop.Builder{
               builderResult.hasRect = false
               builderResult.rect = ""
               return self
          }
          var hasDbImagefatherid:Bool {
               get {
                    return builderResult.hasDbImagefatherid
               }
          }
          var dbImagefatherid:Int32 {
               get {
                    return builderResult.dbImagefatherid
               }
               set (value) {
                   builderResult.hasDbImagefatherid = true
                   builderResult.dbImagefatherid = value
               }
          }
          func setDbImagefatherid(value:Int32) -> Motion.Message_.Crop.Builder {
            self.dbImagefatherid = value
            return self
          }
          internal func clearDbImagefatherid() -> Motion.Message_.Crop.Builder{
               builderResult.hasDbImagefatherid = false
               builderResult.dbImagefatherid = Int32(0)
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> Motion.Message_.Crop.Builder {
            builderResult = Motion.Message_.Crop()
            return self
          }
          internal override func clone() throws -> Motion.Message_.Crop.Builder {
            return try Motion.Message_.Crop.builderWithPrototype(builderResult)
          }
          internal override func build() throws -> Motion.Message_.Crop {
               try checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> Motion.Message_.Crop {
            let returnMe:Motion.Message_.Crop = builderResult
            return returnMe
          }
          internal func mergeFrom(other:Motion.Message_.Crop) throws -> Motion.Message_.Crop.Builder {
            if other == Motion.Message_.Crop() {
             return self
            }
            if other.hasRect {
                 rect = other.rect
            }
            if other.hasDbImagefatherid {
                 dbImagefatherid = other.dbImagefatherid
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.Crop.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.Crop.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = try input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                rect = try input.readString()

              case 16 :
                dbImagefatherid = try input.readInt32()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class Video : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasPath:Bool = false
        private(set) var path:String = ""

        private(set) var hasName:Bool = false
        private(set) var name:String = ""

        private(set) var hasInstancefolder:Bool = false
        private(set) var instancefolder:String = ""

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasPath {
            try output.writeString(1, value:path)
          }
          if hasName {
            try output.writeString(2, value:name)
          }
          if hasInstancefolder {
            try output.writeString(3, value:instancefolder)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasPath {
            serialize_size += path.computeStringSize(1)
          }
          if hasName {
            serialize_size += name.computeStringSize(2)
          }
          if hasInstancefolder {
            serialize_size += instancefolder.computeStringSize(3)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Motion.Message_.Video> {
          var mergedArray = Array<Motion.Message_.Video>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Motion.Message_.Video? {
          return try Motion.Message_.Video.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        internal class func parseFromData(data:NSData) throws -> Motion.Message_.Video {
          return try Motion.Message_.Video.Builder().mergeFromData(data, extensionRegistry:Motion.MotionRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.Video {
          return try Motion.Message_.Video.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) throws -> Motion.Message_.Video {
          return try Motion.Message_.Video.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.Video {
          return try Motion.Message_.Video.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.Video {
          return try Motion.Message_.Video.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.Video {
          return try Motion.Message_.Video.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> Motion.Message_.Video.Builder {
          return Motion.Message_.Video.classBuilder() as! Motion.Message_.Video.Builder
        }
        internal func getBuilder() -> Motion.Message_.Video.Builder {
          return classBuilder() as! Motion.Message_.Video.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return Motion.Message_.Video.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return Motion.Message_.Video.Builder()
        }
        internal func toBuilder() throws -> Motion.Message_.Video.Builder {
          return try Motion.Message_.Video.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:Motion.Message_.Video) throws -> Motion.Message_.Video.Builder {
          return try Motion.Message_.Video.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) throws {
          if hasPath {
            output += "\(indent) path: \(path) \n"
          }
          if hasName {
            output += "\(indent) name: \(name) \n"
          }
          if hasInstancefolder {
            output += "\(indent) instancefolder: \(instancefolder) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasPath {
                   hashCode = (hashCode &* 31) &+ path.hashValue
                }
                if hasName {
                   hashCode = (hashCode &* 31) &+ name.hashValue
                }
                if hasInstancefolder {
                   hashCode = (hashCode &* 31) &+ instancefolder.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "Motion.Message_.Video"
        }
        override internal func className() -> String {
            return "Motion.Message_.Video"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return Motion.Message_.Video.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:Motion.Message_.Video = Motion.Message_.Video()
          internal func getMessage() -> Motion.Message_.Video {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var hasPath:Bool {
               get {
                    return builderResult.hasPath
               }
          }
          var path:String {
               get {
                    return builderResult.path
               }
               set (value) {
                   builderResult.hasPath = true
                   builderResult.path = value
               }
          }
          func setPath(value:String) -> Motion.Message_.Video.Builder {
            self.path = value
            return self
          }
          internal func clearPath() -> Motion.Message_.Video.Builder{
               builderResult.hasPath = false
               builderResult.path = ""
               return self
          }
          var hasName:Bool {
               get {
                    return builderResult.hasName
               }
          }
          var name:String {
               get {
                    return builderResult.name
               }
               set (value) {
                   builderResult.hasName = true
                   builderResult.name = value
               }
          }
          func setName(value:String) -> Motion.Message_.Video.Builder {
            self.name = value
            return self
          }
          internal func clearName() -> Motion.Message_.Video.Builder{
               builderResult.hasName = false
               builderResult.name = ""
               return self
          }
          var hasInstancefolder:Bool {
               get {
                    return builderResult.hasInstancefolder
               }
          }
          var instancefolder:String {
               get {
                    return builderResult.instancefolder
               }
               set (value) {
                   builderResult.hasInstancefolder = true
                   builderResult.instancefolder = value
               }
          }
          func setInstancefolder(value:String) -> Motion.Message_.Video.Builder {
            self.instancefolder = value
            return self
          }
          internal func clearInstancefolder() -> Motion.Message_.Video.Builder{
               builderResult.hasInstancefolder = false
               builderResult.instancefolder = ""
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> Motion.Message_.Video.Builder {
            builderResult = Motion.Message_.Video()
            return self
          }
          internal override func clone() throws -> Motion.Message_.Video.Builder {
            return try Motion.Message_.Video.builderWithPrototype(builderResult)
          }
          internal override func build() throws -> Motion.Message_.Video {
               try checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> Motion.Message_.Video {
            let returnMe:Motion.Message_.Video = builderResult
            return returnMe
          }
          internal func mergeFrom(other:Motion.Message_.Video) throws -> Motion.Message_.Video.Builder {
            if other == Motion.Message_.Video() {
             return self
            }
            if other.hasPath {
                 path = other.path
            }
            if other.hasName {
                 name = other.name
            }
            if other.hasInstancefolder {
                 instancefolder = other.instancefolder
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.Video.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.Video.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = try input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                path = try input.readString()

              case 18 :
                name = try input.readString()

              case 26 :
                instancefolder = try input.readString()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



      //Enum type declaration start 

      internal enum ResponseType:Int32 {
        case LoginSuccessful = 100
        case LoginFailed = 101
        case ErrorInvalidUsername = 102
        case ErrorInvalidPassword = 103
        case ErrorLoginFailiure = 104
        case ErrorTimeout = 105

      }

      //Enum type declaration end 



      //Enum type declaration start 

      internal enum ActionType:Int32 {
        case Engage = 1000
        case RecStart = 1002
        case RecRunning = 1003
        case RecStop = 1004
        case Unengage = 1005
        case GetTime = 1006
        case SetTime = 1007
        case TimeSet = 1008
        case StrmStart = 1009
        case StrmStop = 1010
        case TakePicture = 1011
        case Dissconnect = 1012
        case Refresh = 1013
        case GetXml = 1014
        case GetImage = 1015
        case GetVideo = 1016
        case Save = 1017
        case Open = 1018
        case Update = 1019
        case SaveOk = 1020
        case UpdateOk = 1021
        case GetMat = 1022
        case ResponseOk = 2000
        case ResponseNext = 2010
        case ResponseEnd = 2020
        case ResponseFinish = 2030
        case RecHasChanges = 2040
        case RecHasInstance = 2050
        case ProtoHasFile = 3030
        case ProtoNoFile = 3031
        case ServerInfo = 3032
        case ServerInfoOk = 3033

      }

      //Enum type declaration end 



      //Enum type declaration start 

      internal enum SocketType:Int32 {
        case SocketProtoTostring = 10
        case SocketProtoToarray = 11
        case SocketPlainText = 12
        case SplittedMessage = 13
        case SingleMessage = 14
        case SocketBufferNanoSize = 1024
        case SocketBufferMiniSize = 2048
        case SocketBufferMicroSize = 4096
        case SocketBufferSmallSize = 8196
        case SocketBufferRegularSize = 16392
        case SocketBufferMediumSize = 32784
        case SocketBufferBigSize = 65568
        case TcpEchoPort = 5010
        case TcpStreamingPort = 5020
        case UdpPort = 5030
        case TcpMsgPort = 5040

      }

      //Enum type declaration end 



      //Enum type declaration start 

      internal enum ProcessType:Int32 {
        case ProcessPeopleCount = 4001
        case ProcessFaceDetect = 4002
        case ProcessWalkDirection = 4003

      }

      //Enum type declaration end 

    private(set) var hasActivecam:Bool = false
    private(set) var activecam:Int32 = Int32(0)

    private(set) var types:Motion.Message_.ActionType = Motion.Message_.ActionType.Engage
    private(set) var hasTypes:Bool = false
    private(set) var hasTime:Bool = false
    private(set) var time:String = ""

    private(set) var hasData:Bool = false
    private(set) var data:NSData = NSData()

    private(set) var hasDataAmount:Bool = false
    private(set) var dataAmount:Int32 = Int32(0)

    private(set) var hasDataTotal:Bool = false
    private(set) var dataTotal:Int32 = Int32(0)

    private(set) var hasServerip:Bool = false
    private(set) var serverip:String = ""

    private(set) var hasClientip:Bool = false
    private(set) var clientip:String = ""

    private(set) var hasDevicestarttime:Bool = false
    private(set) var devicestarttime:String = ""

    private(set) var motioncamera:Array<Motion.Message_.MotionCamera>  = Array<Motion.Message_.MotionCamera>()
    private(set) var hasCurrmonth:Bool = false
    private(set) var currmonth:String = ""

    private(set) var hasCurrday:Bool = false
    private(set) var currday:String = ""

    private(set) var hasCurrdaytitle:Bool = false
    private(set) var currdaytitle:String = ""

    private(set) var hasCurrcam:Bool = false
    private(set) var currcam:Int32 = Int32(0)

    private(set) var hasPackagesize:Bool = false
    private(set) var packagesize:Int32 = Int32(0)

    private(set) var hasImagefilepath:Bool = false
    private(set) var imagefilepath:String = ""

    private(set) var hasVideofilepath:Bool = false
    private(set) var videofilepath:String = ""

    private(set) var hasRecname:Bool = false
    private(set) var recname:String = ""

    private(set) var hasActivecamnum:Bool = false
    private(set) var activecamnum:Int32 = Int32(0)

    private(set) var hasClientnumber:Bool = false
    private(set) var clientnumber:Int32 = Int32(0)

    private(set) var hasServerurl:Bool = false
    private(set) var serverurl:String = ""

    private(set) var hasClientname:Bool = false
    private(set) var clientname:String = ""

    private(set) var motionuser:Array<Motion.Message_.MotionUser>  = Array<Motion.Message_.MotionUser>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasTypes {
        return false
      }
      var isInitmotioncamera:Bool = true
      for oneElementmotioncamera in motioncamera {
          if (!oneElementmotioncamera.isInitialized()) {
              isInitmotioncamera = false
              break 
          }
      }
      if !isInitmotioncamera {
       return isInitmotioncamera
       }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasActivecam {
        try output.writeInt32(1, value:activecam)
      }
      if hasTypes {
        try output.writeEnum(2, value:types.rawValue)
      }
      if hasTime {
        try output.writeString(3, value:time)
      }
      if hasData {
        try output.writeData(4, value:data)
      }
      if hasDataAmount {
        try output.writeInt32(5, value:dataAmount)
      }
      if hasDataTotal {
        try output.writeInt32(6, value:dataTotal)
      }
      if hasServerip {
        try output.writeString(7, value:serverip)
      }
      if hasClientip {
        try output.writeString(8, value:clientip)
      }
      if hasDevicestarttime {
        try output.writeString(9, value:devicestarttime)
      }
      for oneElementmotioncamera in motioncamera {
          try output.writeMessage(10, value:oneElementmotioncamera)
      }
      if hasCurrmonth {
        try output.writeString(11, value:currmonth)
      }
      if hasCurrday {
        try output.writeString(12, value:currday)
      }
      if hasCurrdaytitle {
        try output.writeString(13, value:currdaytitle)
      }
      if hasCurrcam {
        try output.writeInt32(14, value:currcam)
      }
      if hasPackagesize {
        try output.writeInt32(15, value:packagesize)
      }
      if hasImagefilepath {
        try output.writeString(16, value:imagefilepath)
      }
      if hasVideofilepath {
        try output.writeString(17, value:videofilepath)
      }
      if hasRecname {
        try output.writeString(18, value:recname)
      }
      if hasActivecamnum {
        try output.writeInt32(19, value:activecamnum)
      }
      if hasClientnumber {
        try output.writeInt32(20, value:clientnumber)
      }
      if hasServerurl {
        try output.writeString(21, value:serverurl)
      }
      if hasClientname {
        try output.writeString(22, value:clientname)
      }
      for oneElementmotionuser in motionuser {
          try output.writeMessage(23, value:oneElementmotionuser)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasActivecam {
        serialize_size += activecam.computeInt32Size(1)
      }
      if (hasTypes) {
        serialize_size += types.rawValue.computeEnumSize(2)
      }
      if hasTime {
        serialize_size += time.computeStringSize(3)
      }
      if hasData {
        serialize_size += data.computeDataSize(4)
      }
      if hasDataAmount {
        serialize_size += dataAmount.computeInt32Size(5)
      }
      if hasDataTotal {
        serialize_size += dataTotal.computeInt32Size(6)
      }
      if hasServerip {
        serialize_size += serverip.computeStringSize(7)
      }
      if hasClientip {
        serialize_size += clientip.computeStringSize(8)
      }
      if hasDevicestarttime {
        serialize_size += devicestarttime.computeStringSize(9)
      }
      for oneElementmotioncamera in motioncamera {
          serialize_size += oneElementmotioncamera.computeMessageSize(10)
      }
      if hasCurrmonth {
        serialize_size += currmonth.computeStringSize(11)
      }
      if hasCurrday {
        serialize_size += currday.computeStringSize(12)
      }
      if hasCurrdaytitle {
        serialize_size += currdaytitle.computeStringSize(13)
      }
      if hasCurrcam {
        serialize_size += currcam.computeInt32Size(14)
      }
      if hasPackagesize {
        serialize_size += packagesize.computeInt32Size(15)
      }
      if hasImagefilepath {
        serialize_size += imagefilepath.computeStringSize(16)
      }
      if hasVideofilepath {
        serialize_size += videofilepath.computeStringSize(17)
      }
      if hasRecname {
        serialize_size += recname.computeStringSize(18)
      }
      if hasActivecamnum {
        serialize_size += activecamnum.computeInt32Size(19)
      }
      if hasClientnumber {
        serialize_size += clientnumber.computeInt32Size(20)
      }
      if hasServerurl {
        serialize_size += serverurl.computeStringSize(21)
      }
      if hasClientname {
        serialize_size += clientname.computeStringSize(22)
      }
      for oneElementmotionuser in motionuser {
          serialize_size += oneElementmotionuser.computeMessageSize(23)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Motion.Message_> {
      var mergedArray = Array<Motion.Message_>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Motion.Message_? {
      return try Motion.Message_.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    internal class func parseFromData(data:NSData) throws -> Motion.Message_ {
      return try Motion.Message_.Builder().mergeFromData(data, extensionRegistry:Motion.MotionRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_ {
      return try Motion.Message_.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) throws -> Motion.Message_ {
      return try Motion.Message_.Builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_ {
      return try Motion.Message_.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_ {
      return try Motion.Message_.Builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_ {
      return try Motion.Message_.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func getBuilder() -> Motion.Message_.Builder {
      return Motion.Message_.classBuilder() as! Motion.Message_.Builder
    }
    internal func getBuilder() -> Motion.Message_.Builder {
      return classBuilder() as! Motion.Message_.Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Motion.Message_.Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Motion.Message_.Builder()
    }
    internal func toBuilder() throws -> Motion.Message_.Builder {
      return try Motion.Message_.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Motion.Message_) throws -> Motion.Message_.Builder {
      return try Motion.Message_.Builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasActivecam {
        output += "\(indent) activecam: \(activecam) \n"
      }
      if (hasTypes) {
        output += "\(indent) types: \(types.rawValue)\n"
      }
      if hasTime {
        output += "\(indent) time: \(time) \n"
      }
      if hasData {
        output += "\(indent) data: \(data) \n"
      }
      if hasDataAmount {
        output += "\(indent) dataAmount: \(dataAmount) \n"
      }
      if hasDataTotal {
        output += "\(indent) dataTotal: \(dataTotal) \n"
      }
      if hasServerip {
        output += "\(indent) serverip: \(serverip) \n"
      }
      if hasClientip {
        output += "\(indent) clientip: \(clientip) \n"
      }
      if hasDevicestarttime {
        output += "\(indent) devicestarttime: \(devicestarttime) \n"
      }
      var motioncameraElementIndex:Int = 0
      for oneElementmotioncamera in motioncamera {
          output += "\(indent) motioncamera[\(motioncameraElementIndex)] {\n"
          try oneElementmotioncamera.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          motioncameraElementIndex++
      }
      if hasCurrmonth {
        output += "\(indent) currmonth: \(currmonth) \n"
      }
      if hasCurrday {
        output += "\(indent) currday: \(currday) \n"
      }
      if hasCurrdaytitle {
        output += "\(indent) currdaytitle: \(currdaytitle) \n"
      }
      if hasCurrcam {
        output += "\(indent) currcam: \(currcam) \n"
      }
      if hasPackagesize {
        output += "\(indent) packagesize: \(packagesize) \n"
      }
      if hasImagefilepath {
        output += "\(indent) imagefilepath: \(imagefilepath) \n"
      }
      if hasVideofilepath {
        output += "\(indent) videofilepath: \(videofilepath) \n"
      }
      if hasRecname {
        output += "\(indent) recname: \(recname) \n"
      }
      if hasActivecamnum {
        output += "\(indent) activecamnum: \(activecamnum) \n"
      }
      if hasClientnumber {
        output += "\(indent) clientnumber: \(clientnumber) \n"
      }
      if hasServerurl {
        output += "\(indent) serverurl: \(serverurl) \n"
      }
      if hasClientname {
        output += "\(indent) clientname: \(clientname) \n"
      }
      var motionuserElementIndex:Int = 0
      for oneElementmotionuser in motionuser {
          output += "\(indent) motionuser[\(motionuserElementIndex)] {\n"
          try oneElementmotionuser.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          motionuserElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasActivecam {
               hashCode = (hashCode &* 31) &+ activecam.hashValue
            }
            if hasTypes {
               hashCode = (hashCode &* 31) &+ Int(types.rawValue)
            }
            if hasTime {
               hashCode = (hashCode &* 31) &+ time.hashValue
            }
            if hasData {
               hashCode = (hashCode &* 31) &+ data.hashValue
            }
            if hasDataAmount {
               hashCode = (hashCode &* 31) &+ dataAmount.hashValue
            }
            if hasDataTotal {
               hashCode = (hashCode &* 31) &+ dataTotal.hashValue
            }
            if hasServerip {
               hashCode = (hashCode &* 31) &+ serverip.hashValue
            }
            if hasClientip {
               hashCode = (hashCode &* 31) &+ clientip.hashValue
            }
            if hasDevicestarttime {
               hashCode = (hashCode &* 31) &+ devicestarttime.hashValue
            }
            for oneElementmotioncamera in motioncamera {
                hashCode = (hashCode &* 31) &+ oneElementmotioncamera.hashValue
            }
            if hasCurrmonth {
               hashCode = (hashCode &* 31) &+ currmonth.hashValue
            }
            if hasCurrday {
               hashCode = (hashCode &* 31) &+ currday.hashValue
            }
            if hasCurrdaytitle {
               hashCode = (hashCode &* 31) &+ currdaytitle.hashValue
            }
            if hasCurrcam {
               hashCode = (hashCode &* 31) &+ currcam.hashValue
            }
            if hasPackagesize {
               hashCode = (hashCode &* 31) &+ packagesize.hashValue
            }
            if hasImagefilepath {
               hashCode = (hashCode &* 31) &+ imagefilepath.hashValue
            }
            if hasVideofilepath {
               hashCode = (hashCode &* 31) &+ videofilepath.hashValue
            }
            if hasRecname {
               hashCode = (hashCode &* 31) &+ recname.hashValue
            }
            if hasActivecamnum {
               hashCode = (hashCode &* 31) &+ activecamnum.hashValue
            }
            if hasClientnumber {
               hashCode = (hashCode &* 31) &+ clientnumber.hashValue
            }
            if hasServerurl {
               hashCode = (hashCode &* 31) &+ serverurl.hashValue
            }
            if hasClientname {
               hashCode = (hashCode &* 31) &+ clientname.hashValue
            }
            for oneElementmotionuser in motionuser {
                hashCode = (hashCode &* 31) &+ oneElementmotionuser.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Motion.Message_"
    }
    override internal func className() -> String {
        return "Motion.Message_"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Motion.Message_.self
    }
    //Meta information declaration end

    final internal class Builder : GeneratedMessageBuilder {
      private var builderResult:Motion.Message_ = Motion.Message_()
      internal func getMessage() -> Motion.Message_ {
          return builderResult
      }

      required override internal init () {
         super.init()
      }
      var hasActivecam:Bool {
           get {
                return builderResult.hasActivecam
           }
      }
      var activecam:Int32 {
           get {
                return builderResult.activecam
           }
           set (value) {
               builderResult.hasActivecam = true
               builderResult.activecam = value
           }
      }
      func setActivecam(value:Int32) -> Motion.Message_.Builder {
        self.activecam = value
        return self
      }
      internal func clearActivecam() -> Motion.Message_.Builder{
           builderResult.hasActivecam = false
           builderResult.activecam = Int32(0)
           return self
      }
        var hasTypes:Bool{
            get {
                return builderResult.hasTypes
            }
        }
        var types:Motion.Message_.ActionType {
            get {
                return builderResult.types
            }
            set (value) {
                builderResult.hasTypes = true
                builderResult.types = value
            }
        }
        internal func setTypes(value:Motion.Message_.ActionType) -> Motion.Message_.Builder {
          self.types = value
          return self
        }
        internal func clearTypes() -> Motion.Message_.Builder {
           builderResult.hasTypes = false
           builderResult.types = .Engage
           return self
        }
      var hasTime:Bool {
           get {
                return builderResult.hasTime
           }
      }
      var time:String {
           get {
                return builderResult.time
           }
           set (value) {
               builderResult.hasTime = true
               builderResult.time = value
           }
      }
      func setTime(value:String) -> Motion.Message_.Builder {
        self.time = value
        return self
      }
      internal func clearTime() -> Motion.Message_.Builder{
           builderResult.hasTime = false
           builderResult.time = ""
           return self
      }
      var hasData:Bool {
           get {
                return builderResult.hasData
           }
      }
      var data:NSData {
           get {
                return builderResult.data
           }
           set (value) {
               builderResult.hasData = true
               builderResult.data = value
           }
      }
      func setData(value:NSData) -> Motion.Message_.Builder {
        self.data = value
        return self
      }
      internal func clearData() -> Motion.Message_.Builder{
           builderResult.hasData = false
           builderResult.data = NSData()
           return self
      }
      var hasDataAmount:Bool {
           get {
                return builderResult.hasDataAmount
           }
      }
      var dataAmount:Int32 {
           get {
                return builderResult.dataAmount
           }
           set (value) {
               builderResult.hasDataAmount = true
               builderResult.dataAmount = value
           }
      }
      func setDataAmount(value:Int32) -> Motion.Message_.Builder {
        self.dataAmount = value
        return self
      }
      internal func clearDataAmount() -> Motion.Message_.Builder{
           builderResult.hasDataAmount = false
           builderResult.dataAmount = Int32(0)
           return self
      }
      var hasDataTotal:Bool {
           get {
                return builderResult.hasDataTotal
           }
      }
      var dataTotal:Int32 {
           get {
                return builderResult.dataTotal
           }
           set (value) {
               builderResult.hasDataTotal = true
               builderResult.dataTotal = value
           }
      }
      func setDataTotal(value:Int32) -> Motion.Message_.Builder {
        self.dataTotal = value
        return self
      }
      internal func clearDataTotal() -> Motion.Message_.Builder{
           builderResult.hasDataTotal = false
           builderResult.dataTotal = Int32(0)
           return self
      }
      var hasServerip:Bool {
           get {
                return builderResult.hasServerip
           }
      }
      var serverip:String {
           get {
                return builderResult.serverip
           }
           set (value) {
               builderResult.hasServerip = true
               builderResult.serverip = value
           }
      }
      func setServerip(value:String) -> Motion.Message_.Builder {
        self.serverip = value
        return self
      }
      internal func clearServerip() -> Motion.Message_.Builder{
           builderResult.hasServerip = false
           builderResult.serverip = ""
           return self
      }
      var hasClientip:Bool {
           get {
                return builderResult.hasClientip
           }
      }
      var clientip:String {
           get {
                return builderResult.clientip
           }
           set (value) {
               builderResult.hasClientip = true
               builderResult.clientip = value
           }
      }
      func setClientip(value:String) -> Motion.Message_.Builder {
        self.clientip = value
        return self
      }
      internal func clearClientip() -> Motion.Message_.Builder{
           builderResult.hasClientip = false
           builderResult.clientip = ""
           return self
      }
      var hasDevicestarttime:Bool {
           get {
                return builderResult.hasDevicestarttime
           }
      }
      var devicestarttime:String {
           get {
                return builderResult.devicestarttime
           }
           set (value) {
               builderResult.hasDevicestarttime = true
               builderResult.devicestarttime = value
           }
      }
      func setDevicestarttime(value:String) -> Motion.Message_.Builder {
        self.devicestarttime = value
        return self
      }
      internal func clearDevicestarttime() -> Motion.Message_.Builder{
           builderResult.hasDevicestarttime = false
           builderResult.devicestarttime = ""
           return self
      }
      var motioncamera:Array<Motion.Message_.MotionCamera> {
           get {
               return builderResult.motioncamera
           }
           set (value) {
               builderResult.motioncamera = value
           }
      }
      func setMotioncamera(value:Array<Motion.Message_.MotionCamera>) -> Motion.Message_.Builder {
        self.motioncamera = value
        return self
      }
      internal func clearMotioncamera() -> Motion.Message_.Builder {
        builderResult.motioncamera.removeAll(keepCapacity: false)
        return self
      }
      var hasCurrmonth:Bool {
           get {
                return builderResult.hasCurrmonth
           }
      }
      var currmonth:String {
           get {
                return builderResult.currmonth
           }
           set (value) {
               builderResult.hasCurrmonth = true
               builderResult.currmonth = value
           }
      }
      func setCurrmonth(value:String) -> Motion.Message_.Builder {
        self.currmonth = value
        return self
      }
      internal func clearCurrmonth() -> Motion.Message_.Builder{
           builderResult.hasCurrmonth = false
           builderResult.currmonth = ""
           return self
      }
      var hasCurrday:Bool {
           get {
                return builderResult.hasCurrday
           }
      }
      var currday:String {
           get {
                return builderResult.currday
           }
           set (value) {
               builderResult.hasCurrday = true
               builderResult.currday = value
           }
      }
      func setCurrday(value:String) -> Motion.Message_.Builder {
        self.currday = value
        return self
      }
      internal func clearCurrday() -> Motion.Message_.Builder{
           builderResult.hasCurrday = false
           builderResult.currday = ""
           return self
      }
      var hasCurrdaytitle:Bool {
           get {
                return builderResult.hasCurrdaytitle
           }
      }
      var currdaytitle:String {
           get {
                return builderResult.currdaytitle
           }
           set (value) {
               builderResult.hasCurrdaytitle = true
               builderResult.currdaytitle = value
           }
      }
      func setCurrdaytitle(value:String) -> Motion.Message_.Builder {
        self.currdaytitle = value
        return self
      }
      internal func clearCurrdaytitle() -> Motion.Message_.Builder{
           builderResult.hasCurrdaytitle = false
           builderResult.currdaytitle = ""
           return self
      }
      var hasCurrcam:Bool {
           get {
                return builderResult.hasCurrcam
           }
      }
      var currcam:Int32 {
           get {
                return builderResult.currcam
           }
           set (value) {
               builderResult.hasCurrcam = true
               builderResult.currcam = value
           }
      }
      func setCurrcam(value:Int32) -> Motion.Message_.Builder {
        self.currcam = value
        return self
      }
      internal func clearCurrcam() -> Motion.Message_.Builder{
           builderResult.hasCurrcam = false
           builderResult.currcam = Int32(0)
           return self
      }
      var hasPackagesize:Bool {
           get {
                return builderResult.hasPackagesize
           }
      }
      var packagesize:Int32 {
           get {
                return builderResult.packagesize
           }
           set (value) {
               builderResult.hasPackagesize = true
               builderResult.packagesize = value
           }
      }
      func setPackagesize(value:Int32) -> Motion.Message_.Builder {
        self.packagesize = value
        return self
      }
      internal func clearPackagesize() -> Motion.Message_.Builder{
           builderResult.hasPackagesize = false
           builderResult.packagesize = Int32(0)
           return self
      }
      var hasImagefilepath:Bool {
           get {
                return builderResult.hasImagefilepath
           }
      }
      var imagefilepath:String {
           get {
                return builderResult.imagefilepath
           }
           set (value) {
               builderResult.hasImagefilepath = true
               builderResult.imagefilepath = value
           }
      }
      func setImagefilepath(value:String) -> Motion.Message_.Builder {
        self.imagefilepath = value
        return self
      }
      internal func clearImagefilepath() -> Motion.Message_.Builder{
           builderResult.hasImagefilepath = false
           builderResult.imagefilepath = ""
           return self
      }
      var hasVideofilepath:Bool {
           get {
                return builderResult.hasVideofilepath
           }
      }
      var videofilepath:String {
           get {
                return builderResult.videofilepath
           }
           set (value) {
               builderResult.hasVideofilepath = true
               builderResult.videofilepath = value
           }
      }
      func setVideofilepath(value:String) -> Motion.Message_.Builder {
        self.videofilepath = value
        return self
      }
      internal func clearVideofilepath() -> Motion.Message_.Builder{
           builderResult.hasVideofilepath = false
           builderResult.videofilepath = ""
           return self
      }
      var hasRecname:Bool {
           get {
                return builderResult.hasRecname
           }
      }
      var recname:String {
           get {
                return builderResult.recname
           }
           set (value) {
               builderResult.hasRecname = true
               builderResult.recname = value
           }
      }
      func setRecname(value:String) -> Motion.Message_.Builder {
        self.recname = value
        return self
      }
      internal func clearRecname() -> Motion.Message_.Builder{
           builderResult.hasRecname = false
           builderResult.recname = ""
           return self
      }
      var hasActivecamnum:Bool {
           get {
                return builderResult.hasActivecamnum
           }
      }
      var activecamnum:Int32 {
           get {
                return builderResult.activecamnum
           }
           set (value) {
               builderResult.hasActivecamnum = true
               builderResult.activecamnum = value
           }
      }
      func setActivecamnum(value:Int32) -> Motion.Message_.Builder {
        self.activecamnum = value
        return self
      }
      internal func clearActivecamnum() -> Motion.Message_.Builder{
           builderResult.hasActivecamnum = false
           builderResult.activecamnum = Int32(0)
           return self
      }
      var hasClientnumber:Bool {
           get {
                return builderResult.hasClientnumber
           }
      }
      var clientnumber:Int32 {
           get {
                return builderResult.clientnumber
           }
           set (value) {
               builderResult.hasClientnumber = true
               builderResult.clientnumber = value
           }
      }
      func setClientnumber(value:Int32) -> Motion.Message_.Builder {
        self.clientnumber = value
        return self
      }
      internal func clearClientnumber() -> Motion.Message_.Builder{
           builderResult.hasClientnumber = false
           builderResult.clientnumber = Int32(0)
           return self
      }
      var hasServerurl:Bool {
           get {
                return builderResult.hasServerurl
           }
      }
      var serverurl:String {
           get {
                return builderResult.serverurl
           }
           set (value) {
               builderResult.hasServerurl = true
               builderResult.serverurl = value
           }
      }
      func setServerurl(value:String) -> Motion.Message_.Builder {
        self.serverurl = value
        return self
      }
      internal func clearServerurl() -> Motion.Message_.Builder{
           builderResult.hasServerurl = false
           builderResult.serverurl = ""
           return self
      }
      var hasClientname:Bool {
           get {
                return builderResult.hasClientname
           }
      }
      var clientname:String {
           get {
                return builderResult.clientname
           }
           set (value) {
               builderResult.hasClientname = true
               builderResult.clientname = value
           }
      }
      func setClientname(value:String) -> Motion.Message_.Builder {
        self.clientname = value
        return self
      }
      internal func clearClientname() -> Motion.Message_.Builder{
           builderResult.hasClientname = false
           builderResult.clientname = ""
           return self
      }
      var motionuser:Array<Motion.Message_.MotionUser> {
           get {
               return builderResult.motionuser
           }
           set (value) {
               builderResult.motionuser = value
           }
      }
      func setMotionuser(value:Array<Motion.Message_.MotionUser>) -> Motion.Message_.Builder {
        self.motionuser = value
        return self
      }
      internal func clearMotionuser() -> Motion.Message_.Builder {
        builderResult.motionuser.removeAll(keepCapacity: false)
        return self
      }
      override internal var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      internal override func clear() -> Motion.Message_.Builder {
        builderResult = Motion.Message_()
        return self
      }
      internal override func clone() throws -> Motion.Message_.Builder {
        return try Motion.Message_.builderWithPrototype(builderResult)
      }
      internal override func build() throws -> Motion.Message_ {
           try checkInitialized()
           return buildPartial()
      }
      internal func buildPartial() -> Motion.Message_ {
        let returnMe:Motion.Message_ = builderResult
        return returnMe
      }
      internal func mergeFrom(other:Motion.Message_) throws -> Motion.Message_.Builder {
        if other == Motion.Message_() {
         return self
        }
        if other.hasActivecam {
             activecam = other.activecam
        }
        if other.hasTypes {
             types = other.types
        }
        if other.hasTime {
             time = other.time
        }
        if other.hasData {
             data = other.data
        }
        if other.hasDataAmount {
             dataAmount = other.dataAmount
        }
        if other.hasDataTotal {
             dataTotal = other.dataTotal
        }
        if other.hasServerip {
             serverip = other.serverip
        }
        if other.hasClientip {
             clientip = other.clientip
        }
        if other.hasDevicestarttime {
             devicestarttime = other.devicestarttime
        }
        if !other.motioncamera.isEmpty  {
           builderResult.motioncamera += other.motioncamera
        }
        if other.hasCurrmonth {
             currmonth = other.currmonth
        }
        if other.hasCurrday {
             currday = other.currday
        }
        if other.hasCurrdaytitle {
             currdaytitle = other.currdaytitle
        }
        if other.hasCurrcam {
             currcam = other.currcam
        }
        if other.hasPackagesize {
             packagesize = other.packagesize
        }
        if other.hasImagefilepath {
             imagefilepath = other.imagefilepath
        }
        if other.hasVideofilepath {
             videofilepath = other.videofilepath
        }
        if other.hasRecname {
             recname = other.recname
        }
        if other.hasActivecamnum {
             activecamnum = other.activecamnum
        }
        if other.hasClientnumber {
             clientnumber = other.clientnumber
        }
        if other.hasServerurl {
             serverurl = other.serverurl
        }
        if other.hasClientname {
             clientname = other.clientname
        }
        if !other.motionuser.isEmpty  {
           builderResult.motionuser += other.motionuser
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Motion.Message_.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Motion.Message_.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            activecam = try input.readInt32()

          case 16 :
            let valueInttypes = try input.readEnum()
            if let enumstypes = Motion.Message_.ActionType(rawValue:valueInttypes){
                 types = enumstypes
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueInttypes))
            }

          case 26 :
            time = try input.readString()

          case 34 :
            data = try input.readData()

          case 40 :
            dataAmount = try input.readInt32()

          case 48 :
            dataTotal = try input.readInt32()

          case 58 :
            serverip = try input.readString()

          case 66 :
            clientip = try input.readString()

          case 74 :
            devicestarttime = try input.readString()

          case 82 :
            let subBuilder = Motion.Message_.MotionCamera.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            motioncamera += [subBuilder.buildPartial()]

          case 90 :
            currmonth = try input.readString()

          case 98 :
            currday = try input.readString()

          case 106 :
            currdaytitle = try input.readString()

          case 112 :
            currcam = try input.readInt32()

          case 120 :
            packagesize = try input.readInt32()

          case 130 :
            imagefilepath = try input.readString()

          case 138 :
            videofilepath = try input.readString()

          case 146 :
            recname = try input.readString()

          case 152 :
            activecamnum = try input.readInt32()

          case 160 :
            clientnumber = try input.readInt32()

          case 170 :
            serverurl = try input.readString()

          case 178 :
            clientname = try input.readString()

          case 186 :
            let subBuilder = Motion.Message_.MotionUser.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            motionuser += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
