// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: motion.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "motion.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace motion {

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_MotionDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_MotionDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_MotionUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_MotionUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_MotionCamera_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_MotionCamera_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_MotionTrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_MotionTrack_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_MotionRec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_MotionRec_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_MotionCron_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_MotionCron_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_MotionMonth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_MotionMonth_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_MotionDay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_MotionDay_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_Instance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_Instance_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_Image_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_Crop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_Crop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_Video_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_Video_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_ResponseType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_ActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_SocketType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_ProcessType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_ServiceType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_motion_2eproto() {
  protobuf_AddDesc_motion_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "motion.proto");
  GOOGLE_CHECK(file != NULL);
  Message_descriptor_ = file->message_type(0);
  static const int Message_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, activecam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, motionuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, motioncamera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, motiondevice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, data_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, data_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, serverip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, clientip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, devicestarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, currmonth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, currday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, currdaytitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, currcam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, packagesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, imagefilepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, videofilepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, recname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, activecamnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, includethubmnails_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  Message_MotionDevice_descriptor_ = Message_descriptor_->nested_type(0);
  static const int Message_MotionDevice_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDevice, ipnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDevice, ippublic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDevice, macaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDevice, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDevice, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDevice, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDevice, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDevice, network_provider_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDevice, uptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDevice, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDevice, db_local_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDevice, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDevice, hardware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDevice, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDevice, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDevice, disktotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDevice, diskused_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDevice, diskavailable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDevice, disk_percentage_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDevice, temperature_),
  };
  Message_MotionDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_MotionDevice_descriptor_,
      Message_MotionDevice::default_instance_,
      Message_MotionDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_MotionDevice));
  Message_MotionUser_descriptor_ = Message_descriptor_->nested_type(1);
  static const int Message_MotionUser_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionUser, clientnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionUser, wpuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionUser, wppassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionUser, wpserverurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionUser, wpuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionUser, wpclientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionUser, wpclientmediaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionUser, pfobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionUser, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionUser, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionUser, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionUser, lastname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionUser, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionUser, uiidinstallation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionUser, service_type_),
  };
  Message_MotionUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_MotionUser_descriptor_,
      Message_MotionUser::default_instance_,
      Message_MotionUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_MotionUser));
  Message_MotionCamera_descriptor_ = Message_descriptor_->nested_type(2);
  static const int Message_MotionCamera_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, motionmonth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, motionrec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, cameraid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, cameranumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, cameraname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, hasrecjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, recognizing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, recognizing_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, db_idcamera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, db_idrec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, fromdatabase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, motiontrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, activemat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, matcols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, matrows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, matwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, matheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, db_idmat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, tempdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, thumbnail_),
  };
  Message_MotionCamera_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_MotionCamera_descriptor_,
      Message_MotionCamera::default_instance_,
      Message_MotionCamera_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_MotionCamera));
  Message_MotionTrack_descriptor_ = Message_descriptor_->nested_type(3);
  static const int Message_MotionTrack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionTrack, db_idinstance_),
  };
  Message_MotionTrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_MotionTrack_descriptor_,
      Message_MotionTrack::default_instance_,
      Message_MotionTrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionTrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionTrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_MotionTrack));
  Message_MotionRec_descriptor_ = Message_descriptor_->nested_type(4);
  static const int Message_MotionRec_offsets_[34] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, db_idrec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, timestart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, timeend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, recname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, camerasince_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, storeimage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, storevideo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, codename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, hasregion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, coordinates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, startrectime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, stoprectime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, runatstartup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, activemat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, db_idmat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, db_idcoordinates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, db_intervalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, matcols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, matrows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, matwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, matheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, lastinstance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, db_idmonth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, db_idday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, xmlfilepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, db_recognitionsetupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, hascron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, motioncron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, activerec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, matbasefile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, created_),
  };
  Message_MotionRec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_MotionRec_descriptor_,
      Message_MotionRec::default_instance_,
      Message_MotionRec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionRec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_MotionRec));
  Message_MotionCron_descriptor_ = Message_descriptor_->nested_type(5);
  static const int Message_MotionCron_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCron, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCron, program_),
  };
  Message_MotionCron_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_MotionCron_descriptor_,
      Message_MotionCron::default_instance_,
      Message_MotionCron_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCron, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCron, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_MotionCron));
  Message_MotionMonth_descriptor_ = Message_descriptor_->nested_type(6);
  static const int Message_MotionMonth_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionMonth, motionday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionMonth, monthlabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionMonth, db_monthid_),
  };
  Message_MotionMonth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_MotionMonth_descriptor_,
      Message_MotionMonth::default_instance_,
      Message_MotionMonth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionMonth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionMonth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_MotionMonth));
  Message_MotionDay_descriptor_ = Message_descriptor_->nested_type(7);
  static const int Message_MotionDay_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDay, instance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDay, daylabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDay, db_dayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDay, xmlfilepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDay, title_),
  };
  Message_MotionDay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_MotionDay_descriptor_,
      Message_MotionDay::default_instance_,
      Message_MotionDay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_MotionDay));
  Message_Instance_descriptor_ = Message_descriptor_->nested_type(8);
  static const int Message_Instance_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, idinstance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, instancestart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, instanceend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, fileformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, crop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, video_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, xmlfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, extdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, inittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, instance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, instancecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, timeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, db_dayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, db_recognition_setup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, recname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, cameranumber_),
  };
  Message_Instance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_Instance_descriptor_,
      Message_Instance::default_instance_,
      Message_Instance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_Instance));
  Message_Image_descriptor_ = Message_descriptor_->nested_type(9);
  static const int Message_Image_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Image, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Image, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Image, imagechanges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Image, time_),
  };
  Message_Image_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_Image_descriptor_,
      Message_Image::default_instance_,
      Message_Image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Image, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Image, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_Image));
  Message_Crop_descriptor_ = Message_descriptor_->nested_type(10);
  static const int Message_Crop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Crop, rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Crop, db_imagefatherid_),
  };
  Message_Crop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_Crop_descriptor_,
      Message_Crop::default_instance_,
      Message_Crop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Crop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Crop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_Crop));
  Message_Video_descriptor_ = Message_descriptor_->nested_type(11);
  static const int Message_Video_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Video, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Video, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Video, instancefolder_),
  };
  Message_Video_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_Video_descriptor_,
      Message_Video::default_instance_,
      Message_Video_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Video, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Video, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_Video));
  Message_ResponseType_descriptor_ = Message_descriptor_->enum_type(0);
  Message_ActionType_descriptor_ = Message_descriptor_->enum_type(1);
  Message_SocketType_descriptor_ = Message_descriptor_->enum_type(2);
  Message_ProcessType_descriptor_ = Message_descriptor_->enum_type(3);
  Message_ServiceType_descriptor_ = Message_descriptor_->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_motion_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_MotionDevice_descriptor_, &Message_MotionDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_MotionUser_descriptor_, &Message_MotionUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_MotionCamera_descriptor_, &Message_MotionCamera::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_MotionTrack_descriptor_, &Message_MotionTrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_MotionRec_descriptor_, &Message_MotionRec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_MotionCron_descriptor_, &Message_MotionCron::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_MotionMonth_descriptor_, &Message_MotionMonth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_MotionDay_descriptor_, &Message_MotionDay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_Instance_descriptor_, &Message_Instance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_Image_descriptor_, &Message_Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_Crop_descriptor_, &Message_Crop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_Video_descriptor_, &Message_Video::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_motion_2eproto() {
  delete Message::default_instance_;
  delete Message_reflection_;
  delete Message_MotionDevice::default_instance_;
  delete Message_MotionDevice_reflection_;
  delete Message_MotionUser::default_instance_;
  delete Message_MotionUser_reflection_;
  delete Message_MotionCamera::default_instance_;
  delete Message_MotionCamera_reflection_;
  delete Message_MotionTrack::default_instance_;
  delete Message_MotionTrack_reflection_;
  delete Message_MotionRec::default_instance_;
  delete Message_MotionRec_reflection_;
  delete Message_MotionCron::default_instance_;
  delete Message_MotionCron_reflection_;
  delete Message_MotionMonth::default_instance_;
  delete Message_MotionMonth_reflection_;
  delete Message_MotionDay::default_instance_;
  delete Message_MotionDay_reflection_;
  delete Message_Instance::default_instance_;
  delete Message_Instance_reflection_;
  delete Message_Image::default_instance_;
  delete Message_Image_reflection_;
  delete Message_Crop::default_instance_;
  delete Message_Crop_reflection_;
  delete Message_Video::default_instance_;
  delete Message_Video_reflection_;
}

void protobuf_AddDesc_motion_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014motion.proto\022\006motion\"\262%\n\007Message\022\021\n\tac"
    "tivecam\030\001 \001(\005\0220\n\004type\030\002 \002(\0162\032.motion.Mes"
    "sage.ActionType:\006ENGAGE\022.\n\nmotionuser\030\003 "
    "\003(\0132\032.motion.Message.MotionUser\0222\n\014motio"
    "ncamera\030\004 \003(\0132\034.motion.Message.MotionCam"
    "era\0222\n\014motiondevice\030\005 \003(\0132\034.motion.Messa"
    "ge.MotionDevice\022\014\n\004time\030\006 \001(\t\022\014\n\004data\030\007 "
    "\001(\014\022\023\n\013data_amount\030\010 \001(\005\022\022\n\ndata_total\030\t"
    " \001(\005\022\020\n\010serverip\030\n \001(\t\022\020\n\010clientip\030\013 \001(\t"
    "\022\027\n\017devicestarttime\030\014 \001(\t\022\021\n\tcurrmonth\030\r"
    " \001(\t\022\017\n\007currday\030\016 \001(\t\022\024\n\014currdaytitle\030\017 "
    "\001(\t\022\017\n\007currcam\030\020 \001(\005\022\023\n\013packagesize\030\021 \001("
    "\005\022\025\n\rimagefilepath\030\022 \001(\t\022\025\n\rvideofilepat"
    "h\030\023 \001(\t\022\017\n\007recname\030\024 \001(\t\022\024\n\014activecamnum"
    "\030\025 \001(\005\022\031\n\021includethubmnails\030\026 \001(\010\032\212\003\n\014Mo"
    "tionDevice\022\020\n\010ipnumber\030\001 \001(\t\022\020\n\010ippublic"
    "\030\002 \001(\t\022\022\n\nmacaddress\030\003 \001(\t\022\020\n\010hostname\030\004"
    " \001(\t\022\014\n\004city\030\005 \001(\t\022\017\n\007country\030\006 \001(\t\022\020\n\010l"
    "ocation\030\007 \001(\t\022\030\n\020network_provider\030\010 \001(\t\022"
    "\016\n\006uptime\030\t \001(\t\022\021\n\tstarttime\030\n \001(\t\022\020\n\010db"
    "_local\030\013 \001(\005\022\r\n\005model\030\014 \001(\t\022\020\n\010hardware\030"
    "\r \001(\t\022\016\n\006serial\030\016 \001(\t\022\020\n\010revision\030\017 \001(\t\022"
    "\021\n\tdisktotal\030\020 \001(\005\022\020\n\010diskused\030\021 \001(\005\022\025\n\r"
    "diskavailable\030\022 \001(\005\022\034\n\024disk_percentage_u"
    "sed\030\023 \001(\005\022\023\n\013temperature\030\024 \001(\005\032\266\002\n\nMotio"
    "nUser\022\024\n\014clientnumber\030\001 \001(\005\022\016\n\006wpuser\030\002 "
    "\001(\t\022\022\n\nwppassword\030\003 \001(\t\022\023\n\013wpserverurl\030\004"
    " \001(\t\022\020\n\010wpuserid\030\005 \001(\005\022\022\n\nwpclientid\030\006 \001"
    "(\005\022\027\n\017wpclientmediaid\030\007 \001(\005\022\022\n\npfobjecti"
    "d\030\010 \001(\t\022\020\n\010username\030\t \001(\t\022\r\n\005email\030\n \001(\t"
    "\022\021\n\tfirstname\030\013 \001(\t\022\020\n\010lastname\030\014 \001(\t\022\020\n"
    "\010location\030\r \001(\t\022\030\n\020uiidinstallation\030\016 \001("
    "\t\022\024\n\014service_type\030\017 \001(\005\032\357\003\n\014MotionCamera"
    "\0220\n\013motionmonth\030\001 \003(\0132\033.motion.Message.M"
    "otionMonth\022,\n\tmotionrec\030\002 \003(\0132\031.motion.M"
    "essage.MotionRec\022\023\n\010cameraid\030\003 \001(\005:\0010\022\024\n"
    "\014cameranumber\030\004 \001(\005\022\022\n\ncameraname\030\005 \001(\t\022"
    "\021\n\thasrecjob\030\006 \001(\010\022\023\n\013recognizing\030\007 \001(\010\022"
    "\030\n\020recognizing_flag\030\010 \001(\010\022\023\n\013db_idcamera"
    "\030\t \001(\005\022\020\n\010db_idrec\030\n \001(\005\022\024\n\014fromdatabase"
    "\030\013 \001(\010\0220\n\013motiontrack\030\014 \003(\0132\033.motion.Mes"
    "sage.MotionTrack\022\021\n\tactivemat\030\r \001(\005\022\017\n\007m"
    "atcols\030\016 \001(\005\022\017\n\007matrows\030\017 \001(\005\022\020\n\010matwidt"
    "h\030\020 \001(\005\022\021\n\tmatheight\030\021 \001(\005\022\020\n\010db_idmat\030\022"
    " \001(\005\022\020\n\010tempdata\030\023 \001(\014\022\021\n\tthumbnail\030\024 \001("
    "\014\032$\n\013MotionTrack\022\025\n\rdb_idinstance\030\001 \001(\005\032"
    "\275\005\n\tMotionRec\022\014\n\004name\030\001 \001(\t\022\020\n\010db_idrec\030"
    "\002 \001(\005\022\021\n\ttimestart\030\003 \001(\t\022\017\n\007timeend\030\004 \001("
    "\t\022\017\n\007recname\030\005 \001(\t\022\023\n\013camerasince\030\006 \001(\t\022"
    "\022\n\nstoreimage\030\007 \001(\010\022\022\n\nstorevideo\030\010 \001(\010\022"
    "\020\n\010codename\030\t \001(\t\022\021\n\thasregion\030\n \001(\010\022\023\n\013"
    "coordinates\030\013 \001(\t\022\r\n\005delay\030\014 \001(\005\022\024\n\014star"
    "trectime\030\r \001(\t\022\023\n\013stoprectime\030\016 \001(\t\022\024\n\014r"
    "unatstartup\030\017 \001(\010\022\021\n\tactivemat\030\020 \001(\005\022\020\n\010"
    "db_idmat\030\021 \001(\005\022\030\n\020db_idcoordinates\030\022 \001(\005"
    "\022\025\n\rdb_intervalid\030\023 \001(\005\022\017\n\007matcols\030\024 \001(\005"
    "\022\017\n\007matrows\030\025 \001(\005\022\020\n\010matwidth\030\026 \001(\005\022\021\n\tm"
    "atheight\030\027 \001(\005\022\024\n\014lastinstance\030\030 \001(\t\022\022\n\n"
    "db_idmonth\030\031 \001(\005\022\020\n\010db_idday\030\032 \001(\005\022\023\n\013xm"
    "lfilepath\030\033 \001(\t\022\035\n\025db_recognitionsetupid"
    "\030\034 \001(\005\022\017\n\007hascron\030\035 \001(\010\022.\n\nmotioncron\030\036 "
    "\003(\0132\032.motion.Message.MotionCron\022\r\n\005speed"
    "\030\037 \001(\005\022\021\n\tactiverec\030  \001(\005\022\023\n\013matbasefile"
    "\030! \001(\t\022\017\n\007created\030\" \001(\t\032.\n\nMotionCron\022\017\n"
    "\007command\030\001 \001(\t\022\017\n\007program\030\002 \001(\t\032c\n\013Motio"
    "nMonth\022,\n\tmotionday\030\001 \003(\0132\031.motion.Messa"
    "ge.MotionDay\022\022\n\nmonthlabel\030\002 \001(\t\022\022\n\ndb_m"
    "onthid\030\003 \001(\005\032\177\n\tMotionDay\022*\n\010instance\030\001 "
    "\003(\0132\030.motion.Message.Instance\022\020\n\010daylabe"
    "l\030\002 \001(\t\022\020\n\010db_dayid\030\003 \001(\005\022\023\n\013xmlfilepath"
    "\030\004 \001(\t\022\r\n\005title\030\005 \001(\t\032\364\003\n\010Instance\022\022\n\nid"
    "instance\030\001 \002(\005\022\016\n\006number\030\002 \001(\005\022\025\n\rinstan"
    "cestart\030\003 \001(\t\022\023\n\013instanceend\030\004 \001(\t\022\022\n\nfi"
    "leformat\030\005 \001(\t\022$\n\005image\030\006 \003(\0132\025.motion.M"
    "essage.Image\022\"\n\004crop\030\007 \003(\0132\024.motion.Mess"
    "age.Crop\022$\n\005video\030\010 \001(\0132\025.motion.Message"
    ".Video\022\013\n\003dir\030\t \001(\t\022\017\n\007xmlfile\030\n \001(\t\022\017\n\007"
    "extdata\030\013 \001(\t\022\013\n\003end\030\014 \001(\t\022\021\n\tbegintime\030"
    "\r \001(\005\022\017\n\007endtime\030\016 \001(\005\022\020\n\010inittime\030\017 \001(\005"
    "\022\020\n\010instance\030\020 \001(\t\022\024\n\014instancecode\030\021 \001(\t"
    "\022\020\n\010timeinfo\030\022 \001(\t\022\020\n\010db_dayid\030\023 \001(\005\022\037\n\027"
    "db_recognition_setup_id\030\024 \001(\005\022\017\n\007recname"
    "\030\025 \001(\t\022\016\n\006camera\030\026 \001(\t\022\024\n\014cameranumber\030\027"
    " \001(\005\032G\n\005Image\022\014\n\004path\030\001 \001(\t\022\014\n\004name\030\002 \001("
    "\t\022\024\n\014imagechanges\030\003 \001(\005\022\014\n\004time\030\004 \001(\t\032.\n"
    "\004Crop\022\014\n\004rect\030\001 \001(\t\022\030\n\020db_imagefatherid\030"
    "\002 \001(\005\032;\n\005Video\022\014\n\004path\030\001 \001(\t\022\014\n\004name\030\002 \001"
    "(\t\022\026\n\016instancefolder\030\003 \001(\t\"\233\001\n\014ResponseT"
    "ype\022\024\n\020LOGIN_SUCCESSFUL\020d\022\020\n\014LOGIN_FAILE"
    "D\020e\022\032\n\026ERROR_INVALID_USERNAME\020f\022\032\n\026ERROR"
    "_INVALID_PASSWORD\020g\022\030\n\024ERROR_LOGIN_FAILI"
    "URE\020h\022\021\n\rERROR_TIMEOUT\020i\"\243\004\n\nActionType\022"
    "\013\n\006ENGAGE\020\350\007\022\016\n\tREC_START\020\352\007\022\020\n\013REC_RUNN"
    "ING\020\353\007\022\r\n\010REC_STOP\020\354\007\022\r\n\010UNENGAGE\020\355\007\022\r\n\010"
    "GET_TIME\020\356\007\022\r\n\010SET_TIME\020\357\007\022\r\n\010TIME_SET\020\360"
    "\007\022\017\n\nSTRM_START\020\361\007\022\016\n\tSTRM_STOP\020\362\007\022\021\n\014TA"
    "KE_PICTURE\020\363\007\022\020\n\013DISSCONNECT\020\364\007\022\014\n\007REFRE"
    "SH\020\365\007\022\014\n\007GET_XML\020\366\007\022\016\n\tGET_IMAGE\020\367\007\022\016\n\tG"
    "ET_VIDEO\020\370\007\022\t\n\004SAVE\020\371\007\022\t\n\004OPEN\020\372\007\022\013\n\006UPD"
    "ATE\020\373\007\022\014\n\007SAVE_OK\020\374\007\022\016\n\tUPDATE_OK\020\375\007\022\014\n\007"
    "GET_MAT\020\376\007\022\020\n\013RESPONSE_OK\020\320\017\022\022\n\rRESPONSE"
    "_NEXT\020\332\017\022\021\n\014RESPONSE_END\020\344\017\022\024\n\017RESPONSE_"
    "FINISH\020\356\017\022\024\n\017REC_HAS_CHANGES\020\370\017\022\025\n\020REC_H"
    "AS_INSTANCE\020\202\020\022\023\n\016PROTO_HAS_FILE\020\326\027\022\022\n\rP"
    "ROTO_NO_FILE\020\327\027\022\020\n\013SERVER_INFO\020\330\027\022\023\n\016SER"
    "VER_INFO_OK\020\331\027\"\254\003\n\nSocketType\022\031\n\025SOCKET_"
    "PROTO_TOSTRING\020\n\022\030\n\024SOCKET_PROTO_TOARRAY"
    "\020\013\022\025\n\021SOCKET_PLAIN_TEXT\020\014\022\024\n\020SPLITTED_ME"
    "SSAGE\020\r\022\022\n\016SINGLE_MESSAGE\020\016\022\034\n\027SOCKET_BU"
    "FFER_NANO_SIZE\020\200\010\022\034\n\027SOCKET_BUFFER_MINI_"
    "SIZE\020\200\020\022\035\n\030SOCKET_BUFFER_MICRO_SIZE\020\200 \022\035"
    "\n\030SOCKET_BUFFER_SMALL_SIZE\020\204@\022 \n\032SOCKET_"
    "BUFFER_REGULAR_SIZE\020\210\200\001\022\037\n\031SOCKET_BUFFER"
    "_MEDIUM_SIZE\020\220\200\002\022\034\n\026SOCKET_BUFFER_BIG_SI"
    "ZE\020\240\200\004\022\022\n\rTCP_ECHO_PORT\020\222\'\022\027\n\022TCP_STREAM"
    "ING_PORT\020\234\'\022\r\n\010UDP_PORT\020\246\'\022\021\n\014TCP_MSG_PO"
    "RT\020\260\'\"_\n\013ProcessType\022\031\n\024PROCESS_PEOPLE_C"
    "OUNT\020\241\037\022\030\n\023PROCESS_FACE_DETECT\020\242\037\022\033\n\026PRO"
    "CESS_WALK_DIRECTION\020\243\037\"C\n\013ServiceType\022\031\n"
    "\024SERVICE_FREE_ACCOUNT\020\211\'\022\031\n\024SERVICE_PAID"
    "_ACCOUNT\020\212\'", 4811);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "motion.proto", &protobuf_RegisterTypes);
  Message::default_instance_ = new Message();
  Message_MotionDevice::default_instance_ = new Message_MotionDevice();
  Message_MotionUser::default_instance_ = new Message_MotionUser();
  Message_MotionCamera::default_instance_ = new Message_MotionCamera();
  Message_MotionTrack::default_instance_ = new Message_MotionTrack();
  Message_MotionRec::default_instance_ = new Message_MotionRec();
  Message_MotionCron::default_instance_ = new Message_MotionCron();
  Message_MotionMonth::default_instance_ = new Message_MotionMonth();
  Message_MotionDay::default_instance_ = new Message_MotionDay();
  Message_Instance::default_instance_ = new Message_Instance();
  Message_Image::default_instance_ = new Message_Image();
  Message_Crop::default_instance_ = new Message_Crop();
  Message_Video::default_instance_ = new Message_Video();
  Message::default_instance_->InitAsDefaultInstance();
  Message_MotionDevice::default_instance_->InitAsDefaultInstance();
  Message_MotionUser::default_instance_->InitAsDefaultInstance();
  Message_MotionCamera::default_instance_->InitAsDefaultInstance();
  Message_MotionTrack::default_instance_->InitAsDefaultInstance();
  Message_MotionRec::default_instance_->InitAsDefaultInstance();
  Message_MotionCron::default_instance_->InitAsDefaultInstance();
  Message_MotionMonth::default_instance_->InitAsDefaultInstance();
  Message_MotionDay::default_instance_->InitAsDefaultInstance();
  Message_Instance::default_instance_->InitAsDefaultInstance();
  Message_Image::default_instance_->InitAsDefaultInstance();
  Message_Crop::default_instance_->InitAsDefaultInstance();
  Message_Video::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_motion_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_motion_2eproto {
  StaticDescriptorInitializer_motion_2eproto() {
    protobuf_AddDesc_motion_2eproto();
  }
} static_descriptor_initializer_motion_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Message_ResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_ResponseType_descriptor_;
}
bool Message_ResponseType_IsValid(int value) {
  switch(value) {
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_ResponseType Message::LOGIN_SUCCESSFUL;
const Message_ResponseType Message::LOGIN_FAILED;
const Message_ResponseType Message::ERROR_INVALID_USERNAME;
const Message_ResponseType Message::ERROR_INVALID_PASSWORD;
const Message_ResponseType Message::ERROR_LOGIN_FAILIURE;
const Message_ResponseType Message::ERROR_TIMEOUT;
const Message_ResponseType Message::ResponseType_MIN;
const Message_ResponseType Message::ResponseType_MAX;
const int Message::ResponseType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Message_ActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_ActionType_descriptor_;
}
bool Message_ActionType_IsValid(int value) {
  switch(value) {
    case 1000:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
    case 2000:
    case 2010:
    case 2020:
    case 2030:
    case 2040:
    case 2050:
    case 3030:
    case 3031:
    case 3032:
    case 3033:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_ActionType Message::ENGAGE;
const Message_ActionType Message::REC_START;
const Message_ActionType Message::REC_RUNNING;
const Message_ActionType Message::REC_STOP;
const Message_ActionType Message::UNENGAGE;
const Message_ActionType Message::GET_TIME;
const Message_ActionType Message::SET_TIME;
const Message_ActionType Message::TIME_SET;
const Message_ActionType Message::STRM_START;
const Message_ActionType Message::STRM_STOP;
const Message_ActionType Message::TAKE_PICTURE;
const Message_ActionType Message::DISSCONNECT;
const Message_ActionType Message::REFRESH;
const Message_ActionType Message::GET_XML;
const Message_ActionType Message::GET_IMAGE;
const Message_ActionType Message::GET_VIDEO;
const Message_ActionType Message::SAVE;
const Message_ActionType Message::OPEN;
const Message_ActionType Message::UPDATE;
const Message_ActionType Message::SAVE_OK;
const Message_ActionType Message::UPDATE_OK;
const Message_ActionType Message::GET_MAT;
const Message_ActionType Message::RESPONSE_OK;
const Message_ActionType Message::RESPONSE_NEXT;
const Message_ActionType Message::RESPONSE_END;
const Message_ActionType Message::RESPONSE_FINISH;
const Message_ActionType Message::REC_HAS_CHANGES;
const Message_ActionType Message::REC_HAS_INSTANCE;
const Message_ActionType Message::PROTO_HAS_FILE;
const Message_ActionType Message::PROTO_NO_FILE;
const Message_ActionType Message::SERVER_INFO;
const Message_ActionType Message::SERVER_INFO_OK;
const Message_ActionType Message::ActionType_MIN;
const Message_ActionType Message::ActionType_MAX;
const int Message::ActionType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Message_SocketType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_SocketType_descriptor_;
}
bool Message_SocketType_IsValid(int value) {
  switch(value) {
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 1024:
    case 2048:
    case 4096:
    case 5010:
    case 5020:
    case 5030:
    case 5040:
    case 8196:
    case 16392:
    case 32784:
    case 65568:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_SocketType Message::SOCKET_PROTO_TOSTRING;
const Message_SocketType Message::SOCKET_PROTO_TOARRAY;
const Message_SocketType Message::SOCKET_PLAIN_TEXT;
const Message_SocketType Message::SPLITTED_MESSAGE;
const Message_SocketType Message::SINGLE_MESSAGE;
const Message_SocketType Message::SOCKET_BUFFER_NANO_SIZE;
const Message_SocketType Message::SOCKET_BUFFER_MINI_SIZE;
const Message_SocketType Message::SOCKET_BUFFER_MICRO_SIZE;
const Message_SocketType Message::SOCKET_BUFFER_SMALL_SIZE;
const Message_SocketType Message::SOCKET_BUFFER_REGULAR_SIZE;
const Message_SocketType Message::SOCKET_BUFFER_MEDIUM_SIZE;
const Message_SocketType Message::SOCKET_BUFFER_BIG_SIZE;
const Message_SocketType Message::TCP_ECHO_PORT;
const Message_SocketType Message::TCP_STREAMING_PORT;
const Message_SocketType Message::UDP_PORT;
const Message_SocketType Message::TCP_MSG_PORT;
const Message_SocketType Message::SocketType_MIN;
const Message_SocketType Message::SocketType_MAX;
const int Message::SocketType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Message_ProcessType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_ProcessType_descriptor_;
}
bool Message_ProcessType_IsValid(int value) {
  switch(value) {
    case 4001:
    case 4002:
    case 4003:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_ProcessType Message::PROCESS_PEOPLE_COUNT;
const Message_ProcessType Message::PROCESS_FACE_DETECT;
const Message_ProcessType Message::PROCESS_WALK_DIRECTION;
const Message_ProcessType Message::ProcessType_MIN;
const Message_ProcessType Message::ProcessType_MAX;
const int Message::ProcessType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Message_ServiceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_ServiceType_descriptor_;
}
bool Message_ServiceType_IsValid(int value) {
  switch(value) {
    case 5001:
    case 5002:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_ServiceType Message::SERVICE_FREE_ACCOUNT;
const Message_ServiceType Message::SERVICE_PAID_ACCOUNT;
const Message_ServiceType Message::ServiceType_MIN;
const Message_ServiceType Message::ServiceType_MAX;
const int Message::ServiceType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Message_MotionDevice::kIpnumberFieldNumber;
const int Message_MotionDevice::kIppublicFieldNumber;
const int Message_MotionDevice::kMacaddressFieldNumber;
const int Message_MotionDevice::kHostnameFieldNumber;
const int Message_MotionDevice::kCityFieldNumber;
const int Message_MotionDevice::kCountryFieldNumber;
const int Message_MotionDevice::kLocationFieldNumber;
const int Message_MotionDevice::kNetworkProviderFieldNumber;
const int Message_MotionDevice::kUptimeFieldNumber;
const int Message_MotionDevice::kStarttimeFieldNumber;
const int Message_MotionDevice::kDbLocalFieldNumber;
const int Message_MotionDevice::kModelFieldNumber;
const int Message_MotionDevice::kHardwareFieldNumber;
const int Message_MotionDevice::kSerialFieldNumber;
const int Message_MotionDevice::kRevisionFieldNumber;
const int Message_MotionDevice::kDisktotalFieldNumber;
const int Message_MotionDevice::kDiskusedFieldNumber;
const int Message_MotionDevice::kDiskavailableFieldNumber;
const int Message_MotionDevice::kDiskPercentageUsedFieldNumber;
const int Message_MotionDevice::kTemperatureFieldNumber;
#endif  // !_MSC_VER

Message_MotionDevice::Message_MotionDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Message.MotionDevice)
}

void Message_MotionDevice::InitAsDefaultInstance() {
}

Message_MotionDevice::Message_MotionDevice(const Message_MotionDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Message.MotionDevice)
}

void Message_MotionDevice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ipnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ippublic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_provider_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uptime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_local_ = 0;
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hardware_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  disktotal_ = 0;
  diskused_ = 0;
  diskavailable_ = 0;
  disk_percentage_used_ = 0;
  temperature_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_MotionDevice::~Message_MotionDevice() {
  // @@protoc_insertion_point(destructor:motion.Message.MotionDevice)
  SharedDtor();
}

void Message_MotionDevice::SharedDtor() {
  if (ipnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipnumber_;
  }
  if (ippublic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ippublic_;
  }
  if (macaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete macaddress_;
  }
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostname_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete location_;
  }
  if (network_provider_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete network_provider_;
  }
  if (uptime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uptime_;
  }
  if (starttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete starttime_;
  }
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (hardware_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hardware_;
  }
  if (serial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serial_;
  }
  if (revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete revision_;
  }
  if (this != default_instance_) {
  }
}

void Message_MotionDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_MotionDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_MotionDevice_descriptor_;
}

const Message_MotionDevice& Message_MotionDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Message_MotionDevice* Message_MotionDevice::default_instance_ = NULL;

Message_MotionDevice* Message_MotionDevice::New() const {
  return new Message_MotionDevice;
}

void Message_MotionDevice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Message_MotionDevice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_ipnumber()) {
      if (ipnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ipnumber_->clear();
      }
    }
    if (has_ippublic()) {
      if (ippublic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ippublic_->clear();
      }
    }
    if (has_macaddress()) {
      if (macaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        macaddress_->clear();
      }
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hostname_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        country_->clear();
      }
    }
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        location_->clear();
      }
    }
    if (has_network_provider()) {
      if (network_provider_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        network_provider_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(db_local_, disktotal_);
    if (has_uptime()) {
      if (uptime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uptime_->clear();
      }
    }
    if (has_starttime()) {
      if (starttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        starttime_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_->clear();
      }
    }
    if (has_hardware()) {
      if (hardware_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hardware_->clear();
      }
    }
    if (has_serial()) {
      if (serial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serial_->clear();
      }
    }
    if (has_revision()) {
      if (revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        revision_->clear();
      }
    }
  }
  ZR_(diskused_, temperature_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_MotionDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Message.MotionDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ipnumber = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipnumber().data(), this->ipnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ipnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ippublic;
        break;
      }

      // optional string ippublic = 2;
      case 2: {
        if (tag == 18) {
         parse_ippublic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ippublic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ippublic().data(), this->ippublic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ippublic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_macaddress;
        break;
      }

      // optional string macaddress = 3;
      case 3: {
        if (tag == 26) {
         parse_macaddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->macaddress().data(), this->macaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "macaddress");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hostname;
        break;
      }

      // optional string hostname = 4;
      case 4: {
        if (tag == 34) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hostname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_city;
        break;
      }

      // optional string city = 5;
      case 5: {
        if (tag == 42) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_country;
        break;
      }

      // optional string country = 6;
      case 6: {
        if (tag == 50) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_location;
        break;
      }

      // optional string location = 7;
      case 7: {
        if (tag == 58) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "location");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_network_provider;
        break;
      }

      // optional string network_provider = 8;
      case 8: {
        if (tag == 66) {
         parse_network_provider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_provider()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->network_provider().data(), this->network_provider().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "network_provider");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_uptime;
        break;
      }

      // optional string uptime = 9;
      case 9: {
        if (tag == 74) {
         parse_uptime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uptime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uptime().data(), this->uptime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uptime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_starttime;
        break;
      }

      // optional string starttime = 10;
      case 10: {
        if (tag == 82) {
         parse_starttime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "starttime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_db_local;
        break;
      }

      // optional int32 db_local = 11;
      case 11: {
        if (tag == 88) {
         parse_db_local:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_local_)));
          set_has_db_local();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_model;
        break;
      }

      // optional string model = 12;
      case 12: {
        if (tag == 98) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_hardware;
        break;
      }

      // optional string hardware = 13;
      case 13: {
        if (tag == 106) {
         parse_hardware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hardware().data(), this->hardware().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hardware");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_serial;
        break;
      }

      // optional string serial = 14;
      case 14: {
        if (tag == 114) {
         parse_serial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial().data(), this->serial().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serial");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_revision;
        break;
      }

      // optional string revision = 15;
      case 15: {
        if (tag == 122) {
         parse_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_revision()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->revision().data(), this->revision().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "revision");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_disktotal;
        break;
      }

      // optional int32 disktotal = 16;
      case 16: {
        if (tag == 128) {
         parse_disktotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &disktotal_)));
          set_has_disktotal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_diskused;
        break;
      }

      // optional int32 diskused = 17;
      case 17: {
        if (tag == 136) {
         parse_diskused:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diskused_)));
          set_has_diskused();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_diskavailable;
        break;
      }

      // optional int32 diskavailable = 18;
      case 18: {
        if (tag == 144) {
         parse_diskavailable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diskavailable_)));
          set_has_diskavailable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_disk_percentage_used;
        break;
      }

      // optional int32 disk_percentage_used = 19;
      case 19: {
        if (tag == 152) {
         parse_disk_percentage_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &disk_percentage_used_)));
          set_has_disk_percentage_used();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_temperature;
        break;
      }

      // optional int32 temperature = 20;
      case 20: {
        if (tag == 160) {
         parse_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &temperature_)));
          set_has_temperature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Message.MotionDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Message.MotionDevice)
  return false;
#undef DO_
}

void Message_MotionDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Message.MotionDevice)
  // optional string ipnumber = 1;
  if (has_ipnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipnumber().data(), this->ipnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ipnumber(), output);
  }

  // optional string ippublic = 2;
  if (has_ippublic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ippublic().data(), this->ippublic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ippublic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ippublic(), output);
  }

  // optional string macaddress = 3;
  if (has_macaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "macaddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->macaddress(), output);
  }

  // optional string hostname = 4;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hostname(), output);
  }

  // optional string city = 5;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->city(), output);
  }

  // optional string country = 6;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->country(), output);
  }

  // optional string location = 7;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->location(), output);
  }

  // optional string network_provider = 8;
  if (has_network_provider()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network_provider().data(), this->network_provider().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network_provider");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->network_provider(), output);
  }

  // optional string uptime = 9;
  if (has_uptime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uptime().data(), this->uptime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uptime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->uptime(), output);
  }

  // optional string starttime = 10;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->starttime(), output);
  }

  // optional int32 db_local = 11;
  if (has_db_local()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->db_local(), output);
  }

  // optional string model = 12;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->model(), output);
  }

  // optional string hardware = 13;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware().data(), this->hardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hardware");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->hardware(), output);
  }

  // optional string serial = 14;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial().data(), this->serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serial");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->serial(), output);
  }

  // optional string revision = 15;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->revision().data(), this->revision().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revision");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->revision(), output);
  }

  // optional int32 disktotal = 16;
  if (has_disktotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->disktotal(), output);
  }

  // optional int32 diskused = 17;
  if (has_diskused()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->diskused(), output);
  }

  // optional int32 diskavailable = 18;
  if (has_diskavailable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->diskavailable(), output);
  }

  // optional int32 disk_percentage_used = 19;
  if (has_disk_percentage_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->disk_percentage_used(), output);
  }

  // optional int32 temperature = 20;
  if (has_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->temperature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Message.MotionDevice)
}

::google::protobuf::uint8* Message_MotionDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Message.MotionDevice)
  // optional string ipnumber = 1;
  if (has_ipnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipnumber().data(), this->ipnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ipnumber(), target);
  }

  // optional string ippublic = 2;
  if (has_ippublic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ippublic().data(), this->ippublic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ippublic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ippublic(), target);
  }

  // optional string macaddress = 3;
  if (has_macaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "macaddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->macaddress(), target);
  }

  // optional string hostname = 4;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hostname(), target);
  }

  // optional string city = 5;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->city(), target);
  }

  // optional string country = 6;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->country(), target);
  }

  // optional string location = 7;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->location(), target);
  }

  // optional string network_provider = 8;
  if (has_network_provider()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network_provider().data(), this->network_provider().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network_provider");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->network_provider(), target);
  }

  // optional string uptime = 9;
  if (has_uptime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uptime().data(), this->uptime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uptime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->uptime(), target);
  }

  // optional string starttime = 10;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->starttime(), target);
  }

  // optional int32 db_local = 11;
  if (has_db_local()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->db_local(), target);
  }

  // optional string model = 12;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->model(), target);
  }

  // optional string hardware = 13;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware().data(), this->hardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hardware");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->hardware(), target);
  }

  // optional string serial = 14;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial().data(), this->serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serial");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->serial(), target);
  }

  // optional string revision = 15;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->revision().data(), this->revision().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revision");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->revision(), target);
  }

  // optional int32 disktotal = 16;
  if (has_disktotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->disktotal(), target);
  }

  // optional int32 diskused = 17;
  if (has_diskused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->diskused(), target);
  }

  // optional int32 diskavailable = 18;
  if (has_diskavailable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->diskavailable(), target);
  }

  // optional int32 disk_percentage_used = 19;
  if (has_disk_percentage_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->disk_percentage_used(), target);
  }

  // optional int32 temperature = 20;
  if (has_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->temperature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Message.MotionDevice)
  return target;
}

int Message_MotionDevice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ipnumber = 1;
    if (has_ipnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipnumber());
    }

    // optional string ippublic = 2;
    if (has_ippublic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ippublic());
    }

    // optional string macaddress = 3;
    if (has_macaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macaddress());
    }

    // optional string hostname = 4;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string city = 5;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string country = 6;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string location = 7;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

    // optional string network_provider = 8;
    if (has_network_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network_provider());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string uptime = 9;
    if (has_uptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uptime());
    }

    // optional string starttime = 10;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }

    // optional int32 db_local = 11;
    if (has_db_local()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_local());
    }

    // optional string model = 12;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string hardware = 13;
    if (has_hardware()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hardware());
    }

    // optional string serial = 14;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial());
    }

    // optional string revision = 15;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->revision());
    }

    // optional int32 disktotal = 16;
    if (has_disktotal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->disktotal());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 diskused = 17;
    if (has_diskused()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diskused());
    }

    // optional int32 diskavailable = 18;
    if (has_diskavailable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diskavailable());
    }

    // optional int32 disk_percentage_used = 19;
    if (has_disk_percentage_used()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->disk_percentage_used());
    }

    // optional int32 temperature = 20;
    if (has_temperature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->temperature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_MotionDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_MotionDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_MotionDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_MotionDevice::MergeFrom(const Message_MotionDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ipnumber()) {
      set_ipnumber(from.ipnumber());
    }
    if (from.has_ippublic()) {
      set_ippublic(from.ippublic());
    }
    if (from.has_macaddress()) {
      set_macaddress(from.macaddress());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_network_provider()) {
      set_network_provider(from.network_provider());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_uptime()) {
      set_uptime(from.uptime());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_db_local()) {
      set_db_local(from.db_local());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_hardware()) {
      set_hardware(from.hardware());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_revision()) {
      set_revision(from.revision());
    }
    if (from.has_disktotal()) {
      set_disktotal(from.disktotal());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_diskused()) {
      set_diskused(from.diskused());
    }
    if (from.has_diskavailable()) {
      set_diskavailable(from.diskavailable());
    }
    if (from.has_disk_percentage_used()) {
      set_disk_percentage_used(from.disk_percentage_used());
    }
    if (from.has_temperature()) {
      set_temperature(from.temperature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_MotionDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_MotionDevice::CopyFrom(const Message_MotionDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MotionDevice::IsInitialized() const {

  return true;
}

void Message_MotionDevice::Swap(Message_MotionDevice* other) {
  if (other != this) {
    std::swap(ipnumber_, other->ipnumber_);
    std::swap(ippublic_, other->ippublic_);
    std::swap(macaddress_, other->macaddress_);
    std::swap(hostname_, other->hostname_);
    std::swap(city_, other->city_);
    std::swap(country_, other->country_);
    std::swap(location_, other->location_);
    std::swap(network_provider_, other->network_provider_);
    std::swap(uptime_, other->uptime_);
    std::swap(starttime_, other->starttime_);
    std::swap(db_local_, other->db_local_);
    std::swap(model_, other->model_);
    std::swap(hardware_, other->hardware_);
    std::swap(serial_, other->serial_);
    std::swap(revision_, other->revision_);
    std::swap(disktotal_, other->disktotal_);
    std::swap(diskused_, other->diskused_);
    std::swap(diskavailable_, other->diskavailable_);
    std::swap(disk_percentage_used_, other->disk_percentage_used_);
    std::swap(temperature_, other->temperature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_MotionDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_MotionDevice_descriptor_;
  metadata.reflection = Message_MotionDevice_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message_MotionUser::kClientnumberFieldNumber;
const int Message_MotionUser::kWpuserFieldNumber;
const int Message_MotionUser::kWppasswordFieldNumber;
const int Message_MotionUser::kWpserverurlFieldNumber;
const int Message_MotionUser::kWpuseridFieldNumber;
const int Message_MotionUser::kWpclientidFieldNumber;
const int Message_MotionUser::kWpclientmediaidFieldNumber;
const int Message_MotionUser::kPfobjectidFieldNumber;
const int Message_MotionUser::kUsernameFieldNumber;
const int Message_MotionUser::kEmailFieldNumber;
const int Message_MotionUser::kFirstnameFieldNumber;
const int Message_MotionUser::kLastnameFieldNumber;
const int Message_MotionUser::kLocationFieldNumber;
const int Message_MotionUser::kUiidinstallationFieldNumber;
const int Message_MotionUser::kServiceTypeFieldNumber;
#endif  // !_MSC_VER

Message_MotionUser::Message_MotionUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Message.MotionUser)
}

void Message_MotionUser::InitAsDefaultInstance() {
}

Message_MotionUser::Message_MotionUser(const Message_MotionUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Message.MotionUser)
}

void Message_MotionUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clientnumber_ = 0;
  wpuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wppassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wpserverurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wpuserid_ = 0;
  wpclientid_ = 0;
  wpclientmediaid_ = 0;
  pfobjectid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uiidinstallation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_MotionUser::~Message_MotionUser() {
  // @@protoc_insertion_point(destructor:motion.Message.MotionUser)
  SharedDtor();
}

void Message_MotionUser::SharedDtor() {
  if (wpuser_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wpuser_;
  }
  if (wppassword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wppassword_;
  }
  if (wpserverurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wpserverurl_;
  }
  if (pfobjectid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pfobjectid_;
  }
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firstname_;
  }
  if (lastname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastname_;
  }
  if (location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete location_;
  }
  if (uiidinstallation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uiidinstallation_;
  }
  if (this != default_instance_) {
  }
}

void Message_MotionUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_MotionUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_MotionUser_descriptor_;
}

const Message_MotionUser& Message_MotionUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Message_MotionUser* Message_MotionUser::default_instance_ = NULL;

Message_MotionUser* Message_MotionUser::New() const {
  return new Message_MotionUser;
}

void Message_MotionUser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Message_MotionUser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(clientnumber_, wpuserid_);
    ZR_(wpclientid_, wpclientmediaid_);
    if (has_wpuser()) {
      if (wpuser_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wpuser_->clear();
      }
    }
    if (has_wppassword()) {
      if (wppassword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wppassword_->clear();
      }
    }
    if (has_wpserverurl()) {
      if (wpserverurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wpserverurl_->clear();
      }
    }
    if (has_pfobjectid()) {
      if (pfobjectid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pfobjectid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    if (has_firstname()) {
      if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        firstname_->clear();
      }
    }
    if (has_lastname()) {
      if (lastname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lastname_->clear();
      }
    }
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        location_->clear();
      }
    }
    if (has_uiidinstallation()) {
      if (uiidinstallation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uiidinstallation_->clear();
      }
    }
    service_type_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_MotionUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Message.MotionUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clientnumber = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientnumber_)));
          set_has_clientnumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wpuser;
        break;
      }

      // optional string wpuser = 2;
      case 2: {
        if (tag == 18) {
         parse_wpuser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wpuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wpuser().data(), this->wpuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "wpuser");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_wppassword;
        break;
      }

      // optional string wppassword = 3;
      case 3: {
        if (tag == 26) {
         parse_wppassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wppassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wppassword().data(), this->wppassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "wppassword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_wpserverurl;
        break;
      }

      // optional string wpserverurl = 4;
      case 4: {
        if (tag == 34) {
         parse_wpserverurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wpserverurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wpserverurl().data(), this->wpserverurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "wpserverurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_wpuserid;
        break;
      }

      // optional int32 wpuserid = 5;
      case 5: {
        if (tag == 40) {
         parse_wpuserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wpuserid_)));
          set_has_wpuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_wpclientid;
        break;
      }

      // optional int32 wpclientid = 6;
      case 6: {
        if (tag == 48) {
         parse_wpclientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wpclientid_)));
          set_has_wpclientid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_wpclientmediaid;
        break;
      }

      // optional int32 wpclientmediaid = 7;
      case 7: {
        if (tag == 56) {
         parse_wpclientmediaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wpclientmediaid_)));
          set_has_wpclientmediaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_pfobjectid;
        break;
      }

      // optional string pfobjectid = 8;
      case 8: {
        if (tag == 66) {
         parse_pfobjectid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pfobjectid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pfobjectid().data(), this->pfobjectid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pfobjectid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_username;
        break;
      }

      // optional string username = 9;
      case 9: {
        if (tag == 74) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_email;
        break;
      }

      // optional string email = 10;
      case 10: {
        if (tag == 82) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_firstname;
        break;
      }

      // optional string firstname = 11;
      case 11: {
        if (tag == 90) {
         parse_firstname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firstname().data(), this->firstname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "firstname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_lastname;
        break;
      }

      // optional string lastname = 12;
      case 12: {
        if (tag == 98) {
         parse_lastname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lastname().data(), this->lastname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lastname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_location;
        break;
      }

      // optional string location = 13;
      case 13: {
        if (tag == 106) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "location");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_uiidinstallation;
        break;
      }

      // optional string uiidinstallation = 14;
      case 14: {
        if (tag == 114) {
         parse_uiidinstallation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uiidinstallation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uiidinstallation().data(), this->uiidinstallation().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uiidinstallation");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_service_type;
        break;
      }

      // optional int32 service_type = 15;
      case 15: {
        if (tag == 120) {
         parse_service_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &service_type_)));
          set_has_service_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Message.MotionUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Message.MotionUser)
  return false;
#undef DO_
}

void Message_MotionUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Message.MotionUser)
  // optional int32 clientnumber = 1;
  if (has_clientnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clientnumber(), output);
  }

  // optional string wpuser = 2;
  if (has_wpuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wpuser().data(), this->wpuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wpuser");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->wpuser(), output);
  }

  // optional string wppassword = 3;
  if (has_wppassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wppassword().data(), this->wppassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wppassword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->wppassword(), output);
  }

  // optional string wpserverurl = 4;
  if (has_wpserverurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wpserverurl().data(), this->wpserverurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wpserverurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->wpserverurl(), output);
  }

  // optional int32 wpuserid = 5;
  if (has_wpuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wpuserid(), output);
  }

  // optional int32 wpclientid = 6;
  if (has_wpclientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wpclientid(), output);
  }

  // optional int32 wpclientmediaid = 7;
  if (has_wpclientmediaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->wpclientmediaid(), output);
  }

  // optional string pfobjectid = 8;
  if (has_pfobjectid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pfobjectid().data(), this->pfobjectid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pfobjectid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->pfobjectid(), output);
  }

  // optional string username = 9;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->username(), output);
  }

  // optional string email = 10;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->email(), output);
  }

  // optional string firstname = 11;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->firstname(), output);
  }

  // optional string lastname = 12;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lastname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->lastname(), output);
  }

  // optional string location = 13;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->location(), output);
  }

  // optional string uiidinstallation = 14;
  if (has_uiidinstallation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uiidinstallation().data(), this->uiidinstallation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uiidinstallation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->uiidinstallation(), output);
  }

  // optional int32 service_type = 15;
  if (has_service_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->service_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Message.MotionUser)
}

::google::protobuf::uint8* Message_MotionUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Message.MotionUser)
  // optional int32 clientnumber = 1;
  if (has_clientnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clientnumber(), target);
  }

  // optional string wpuser = 2;
  if (has_wpuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wpuser().data(), this->wpuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wpuser");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->wpuser(), target);
  }

  // optional string wppassword = 3;
  if (has_wppassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wppassword().data(), this->wppassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wppassword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->wppassword(), target);
  }

  // optional string wpserverurl = 4;
  if (has_wpserverurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wpserverurl().data(), this->wpserverurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wpserverurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->wpserverurl(), target);
  }

  // optional int32 wpuserid = 5;
  if (has_wpuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wpuserid(), target);
  }

  // optional int32 wpclientid = 6;
  if (has_wpclientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wpclientid(), target);
  }

  // optional int32 wpclientmediaid = 7;
  if (has_wpclientmediaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->wpclientmediaid(), target);
  }

  // optional string pfobjectid = 8;
  if (has_pfobjectid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pfobjectid().data(), this->pfobjectid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pfobjectid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->pfobjectid(), target);
  }

  // optional string username = 9;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->username(), target);
  }

  // optional string email = 10;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->email(), target);
  }

  // optional string firstname = 11;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->firstname(), target);
  }

  // optional string lastname = 12;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lastname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->lastname(), target);
  }

  // optional string location = 13;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->location(), target);
  }

  // optional string uiidinstallation = 14;
  if (has_uiidinstallation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uiidinstallation().data(), this->uiidinstallation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uiidinstallation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->uiidinstallation(), target);
  }

  // optional int32 service_type = 15;
  if (has_service_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->service_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Message.MotionUser)
  return target;
}

int Message_MotionUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 clientnumber = 1;
    if (has_clientnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientnumber());
    }

    // optional string wpuser = 2;
    if (has_wpuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wpuser());
    }

    // optional string wppassword = 3;
    if (has_wppassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wppassword());
    }

    // optional string wpserverurl = 4;
    if (has_wpserverurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wpserverurl());
    }

    // optional int32 wpuserid = 5;
    if (has_wpuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wpuserid());
    }

    // optional int32 wpclientid = 6;
    if (has_wpclientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wpclientid());
    }

    // optional int32 wpclientmediaid = 7;
    if (has_wpclientmediaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wpclientmediaid());
    }

    // optional string pfobjectid = 8;
    if (has_pfobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pfobjectid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string username = 9;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string email = 10;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string firstname = 11;
    if (has_firstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstname());
    }

    // optional string lastname = 12;
    if (has_lastname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastname());
    }

    // optional string location = 13;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

    // optional string uiidinstallation = 14;
    if (has_uiidinstallation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uiidinstallation());
    }

    // optional int32 service_type = 15;
    if (has_service_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->service_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_MotionUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_MotionUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_MotionUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_MotionUser::MergeFrom(const Message_MotionUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientnumber()) {
      set_clientnumber(from.clientnumber());
    }
    if (from.has_wpuser()) {
      set_wpuser(from.wpuser());
    }
    if (from.has_wppassword()) {
      set_wppassword(from.wppassword());
    }
    if (from.has_wpserverurl()) {
      set_wpserverurl(from.wpserverurl());
    }
    if (from.has_wpuserid()) {
      set_wpuserid(from.wpuserid());
    }
    if (from.has_wpclientid()) {
      set_wpclientid(from.wpclientid());
    }
    if (from.has_wpclientmediaid()) {
      set_wpclientmediaid(from.wpclientmediaid());
    }
    if (from.has_pfobjectid()) {
      set_pfobjectid(from.pfobjectid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_firstname()) {
      set_firstname(from.firstname());
    }
    if (from.has_lastname()) {
      set_lastname(from.lastname());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_uiidinstallation()) {
      set_uiidinstallation(from.uiidinstallation());
    }
    if (from.has_service_type()) {
      set_service_type(from.service_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_MotionUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_MotionUser::CopyFrom(const Message_MotionUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MotionUser::IsInitialized() const {

  return true;
}

void Message_MotionUser::Swap(Message_MotionUser* other) {
  if (other != this) {
    std::swap(clientnumber_, other->clientnumber_);
    std::swap(wpuser_, other->wpuser_);
    std::swap(wppassword_, other->wppassword_);
    std::swap(wpserverurl_, other->wpserverurl_);
    std::swap(wpuserid_, other->wpuserid_);
    std::swap(wpclientid_, other->wpclientid_);
    std::swap(wpclientmediaid_, other->wpclientmediaid_);
    std::swap(pfobjectid_, other->pfobjectid_);
    std::swap(username_, other->username_);
    std::swap(email_, other->email_);
    std::swap(firstname_, other->firstname_);
    std::swap(lastname_, other->lastname_);
    std::swap(location_, other->location_);
    std::swap(uiidinstallation_, other->uiidinstallation_);
    std::swap(service_type_, other->service_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_MotionUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_MotionUser_descriptor_;
  metadata.reflection = Message_MotionUser_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message_MotionCamera::kMotionmonthFieldNumber;
const int Message_MotionCamera::kMotionrecFieldNumber;
const int Message_MotionCamera::kCameraidFieldNumber;
const int Message_MotionCamera::kCameranumberFieldNumber;
const int Message_MotionCamera::kCameranameFieldNumber;
const int Message_MotionCamera::kHasrecjobFieldNumber;
const int Message_MotionCamera::kRecognizingFieldNumber;
const int Message_MotionCamera::kRecognizingFlagFieldNumber;
const int Message_MotionCamera::kDbIdcameraFieldNumber;
const int Message_MotionCamera::kDbIdrecFieldNumber;
const int Message_MotionCamera::kFromdatabaseFieldNumber;
const int Message_MotionCamera::kMotiontrackFieldNumber;
const int Message_MotionCamera::kActivematFieldNumber;
const int Message_MotionCamera::kMatcolsFieldNumber;
const int Message_MotionCamera::kMatrowsFieldNumber;
const int Message_MotionCamera::kMatwidthFieldNumber;
const int Message_MotionCamera::kMatheightFieldNumber;
const int Message_MotionCamera::kDbIdmatFieldNumber;
const int Message_MotionCamera::kTempdataFieldNumber;
const int Message_MotionCamera::kThumbnailFieldNumber;
#endif  // !_MSC_VER

Message_MotionCamera::Message_MotionCamera()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Message.MotionCamera)
}

void Message_MotionCamera::InitAsDefaultInstance() {
}

Message_MotionCamera::Message_MotionCamera(const Message_MotionCamera& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Message.MotionCamera)
}

void Message_MotionCamera::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cameraid_ = 0;
  cameranumber_ = 0;
  cameraname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hasrecjob_ = false;
  recognizing_ = false;
  recognizing_flag_ = false;
  db_idcamera_ = 0;
  db_idrec_ = 0;
  fromdatabase_ = false;
  activemat_ = 0;
  matcols_ = 0;
  matrows_ = 0;
  matwidth_ = 0;
  matheight_ = 0;
  db_idmat_ = 0;
  tempdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_MotionCamera::~Message_MotionCamera() {
  // @@protoc_insertion_point(destructor:motion.Message.MotionCamera)
  SharedDtor();
}

void Message_MotionCamera::SharedDtor() {
  if (cameraname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cameraname_;
  }
  if (tempdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tempdata_;
  }
  if (thumbnail_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thumbnail_;
  }
  if (this != default_instance_) {
  }
}

void Message_MotionCamera::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_MotionCamera::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_MotionCamera_descriptor_;
}

const Message_MotionCamera& Message_MotionCamera::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Message_MotionCamera* Message_MotionCamera::default_instance_ = NULL;

Message_MotionCamera* Message_MotionCamera::New() const {
  return new Message_MotionCamera;
}

void Message_MotionCamera::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Message_MotionCamera*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 252) {
    ZR_(cameraid_, cameranumber_);
    ZR_(hasrecjob_, recognizing_flag_);
    if (has_cameraname()) {
      if (cameraname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cameraname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 63232) {
    ZR_(fromdatabase_, activemat_);
    ZR_(matcols_, matwidth_);
  }
  if (_has_bits_[16 / 32] & 983040) {
    matheight_ = 0;
    db_idmat_ = 0;
    if (has_tempdata()) {
      if (tempdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tempdata_->clear();
      }
    }
    if (has_thumbnail()) {
      if (thumbnail_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        thumbnail_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  motionmonth_.Clear();
  motionrec_.Clear();
  motiontrack_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_MotionCamera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Message.MotionCamera)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .motion.Message.MotionMonth motionmonth = 1;
      case 1: {
        if (tag == 10) {
         parse_motionmonth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_motionmonth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_motionmonth;
        if (input->ExpectTag(18)) goto parse_motionrec;
        break;
      }

      // repeated .motion.Message.MotionRec motionrec = 2;
      case 2: {
        if (tag == 18) {
         parse_motionrec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_motionrec()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_motionrec;
        if (input->ExpectTag(24)) goto parse_cameraid;
        break;
      }

      // optional int32 cameraid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_cameraid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cameraid_)));
          set_has_cameraid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cameranumber;
        break;
      }

      // optional int32 cameranumber = 4;
      case 4: {
        if (tag == 32) {
         parse_cameranumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cameranumber_)));
          set_has_cameranumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cameraname;
        break;
      }

      // optional string cameraname = 5;
      case 5: {
        if (tag == 42) {
         parse_cameraname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cameraname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cameraname().data(), this->cameraname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cameraname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hasrecjob;
        break;
      }

      // optional bool hasrecjob = 6;
      case 6: {
        if (tag == 48) {
         parse_hasrecjob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasrecjob_)));
          set_has_hasrecjob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_recognizing;
        break;
      }

      // optional bool recognizing = 7;
      case 7: {
        if (tag == 56) {
         parse_recognizing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recognizing_)));
          set_has_recognizing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_recognizing_flag;
        break;
      }

      // optional bool recognizing_flag = 8;
      case 8: {
        if (tag == 64) {
         parse_recognizing_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recognizing_flag_)));
          set_has_recognizing_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_db_idcamera;
        break;
      }

      // optional int32 db_idcamera = 9;
      case 9: {
        if (tag == 72) {
         parse_db_idcamera:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_idcamera_)));
          set_has_db_idcamera();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_db_idrec;
        break;
      }

      // optional int32 db_idrec = 10;
      case 10: {
        if (tag == 80) {
         parse_db_idrec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_idrec_)));
          set_has_db_idrec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_fromdatabase;
        break;
      }

      // optional bool fromdatabase = 11;
      case 11: {
        if (tag == 88) {
         parse_fromdatabase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromdatabase_)));
          set_has_fromdatabase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_motiontrack;
        break;
      }

      // repeated .motion.Message.MotionTrack motiontrack = 12;
      case 12: {
        if (tag == 98) {
         parse_motiontrack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_motiontrack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_motiontrack;
        if (input->ExpectTag(104)) goto parse_activemat;
        break;
      }

      // optional int32 activemat = 13;
      case 13: {
        if (tag == 104) {
         parse_activemat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activemat_)));
          set_has_activemat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_matcols;
        break;
      }

      // optional int32 matcols = 14;
      case 14: {
        if (tag == 112) {
         parse_matcols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matcols_)));
          set_has_matcols();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_matrows;
        break;
      }

      // optional int32 matrows = 15;
      case 15: {
        if (tag == 120) {
         parse_matrows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matrows_)));
          set_has_matrows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_matwidth;
        break;
      }

      // optional int32 matwidth = 16;
      case 16: {
        if (tag == 128) {
         parse_matwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matwidth_)));
          set_has_matwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_matheight;
        break;
      }

      // optional int32 matheight = 17;
      case 17: {
        if (tag == 136) {
         parse_matheight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matheight_)));
          set_has_matheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_db_idmat;
        break;
      }

      // optional int32 db_idmat = 18;
      case 18: {
        if (tag == 144) {
         parse_db_idmat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_idmat_)));
          set_has_db_idmat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_tempdata;
        break;
      }

      // optional bytes tempdata = 19;
      case 19: {
        if (tag == 154) {
         parse_tempdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tempdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_thumbnail;
        break;
      }

      // optional bytes thumbnail = 20;
      case 20: {
        if (tag == 162) {
         parse_thumbnail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_thumbnail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Message.MotionCamera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Message.MotionCamera)
  return false;
#undef DO_
}

void Message_MotionCamera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Message.MotionCamera)
  // repeated .motion.Message.MotionMonth motionmonth = 1;
  for (int i = 0; i < this->motionmonth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->motionmonth(i), output);
  }

  // repeated .motion.Message.MotionRec motionrec = 2;
  for (int i = 0; i < this->motionrec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->motionrec(i), output);
  }

  // optional int32 cameraid = 3 [default = 0];
  if (has_cameraid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cameraid(), output);
  }

  // optional int32 cameranumber = 4;
  if (has_cameranumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cameranumber(), output);
  }

  // optional string cameraname = 5;
  if (has_cameraname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cameraname().data(), this->cameraname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cameraname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cameraname(), output);
  }

  // optional bool hasrecjob = 6;
  if (has_hasrecjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->hasrecjob(), output);
  }

  // optional bool recognizing = 7;
  if (has_recognizing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->recognizing(), output);
  }

  // optional bool recognizing_flag = 8;
  if (has_recognizing_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->recognizing_flag(), output);
  }

  // optional int32 db_idcamera = 9;
  if (has_db_idcamera()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->db_idcamera(), output);
  }

  // optional int32 db_idrec = 10;
  if (has_db_idrec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->db_idrec(), output);
  }

  // optional bool fromdatabase = 11;
  if (has_fromdatabase()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->fromdatabase(), output);
  }

  // repeated .motion.Message.MotionTrack motiontrack = 12;
  for (int i = 0; i < this->motiontrack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->motiontrack(i), output);
  }

  // optional int32 activemat = 13;
  if (has_activemat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->activemat(), output);
  }

  // optional int32 matcols = 14;
  if (has_matcols()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->matcols(), output);
  }

  // optional int32 matrows = 15;
  if (has_matrows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->matrows(), output);
  }

  // optional int32 matwidth = 16;
  if (has_matwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->matwidth(), output);
  }

  // optional int32 matheight = 17;
  if (has_matheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->matheight(), output);
  }

  // optional int32 db_idmat = 18;
  if (has_db_idmat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->db_idmat(), output);
  }

  // optional bytes tempdata = 19;
  if (has_tempdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->tempdata(), output);
  }

  // optional bytes thumbnail = 20;
  if (has_thumbnail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->thumbnail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Message.MotionCamera)
}

::google::protobuf::uint8* Message_MotionCamera::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Message.MotionCamera)
  // repeated .motion.Message.MotionMonth motionmonth = 1;
  for (int i = 0; i < this->motionmonth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->motionmonth(i), target);
  }

  // repeated .motion.Message.MotionRec motionrec = 2;
  for (int i = 0; i < this->motionrec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->motionrec(i), target);
  }

  // optional int32 cameraid = 3 [default = 0];
  if (has_cameraid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cameraid(), target);
  }

  // optional int32 cameranumber = 4;
  if (has_cameranumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cameranumber(), target);
  }

  // optional string cameraname = 5;
  if (has_cameraname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cameraname().data(), this->cameraname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cameraname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cameraname(), target);
  }

  // optional bool hasrecjob = 6;
  if (has_hasrecjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->hasrecjob(), target);
  }

  // optional bool recognizing = 7;
  if (has_recognizing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->recognizing(), target);
  }

  // optional bool recognizing_flag = 8;
  if (has_recognizing_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->recognizing_flag(), target);
  }

  // optional int32 db_idcamera = 9;
  if (has_db_idcamera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->db_idcamera(), target);
  }

  // optional int32 db_idrec = 10;
  if (has_db_idrec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->db_idrec(), target);
  }

  // optional bool fromdatabase = 11;
  if (has_fromdatabase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->fromdatabase(), target);
  }

  // repeated .motion.Message.MotionTrack motiontrack = 12;
  for (int i = 0; i < this->motiontrack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->motiontrack(i), target);
  }

  // optional int32 activemat = 13;
  if (has_activemat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->activemat(), target);
  }

  // optional int32 matcols = 14;
  if (has_matcols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->matcols(), target);
  }

  // optional int32 matrows = 15;
  if (has_matrows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->matrows(), target);
  }

  // optional int32 matwidth = 16;
  if (has_matwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->matwidth(), target);
  }

  // optional int32 matheight = 17;
  if (has_matheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->matheight(), target);
  }

  // optional int32 db_idmat = 18;
  if (has_db_idmat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->db_idmat(), target);
  }

  // optional bytes tempdata = 19;
  if (has_tempdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->tempdata(), target);
  }

  // optional bytes thumbnail = 20;
  if (has_thumbnail()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->thumbnail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Message.MotionCamera)
  return target;
}

int Message_MotionCamera::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 cameraid = 3 [default = 0];
    if (has_cameraid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cameraid());
    }

    // optional int32 cameranumber = 4;
    if (has_cameranumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cameranumber());
    }

    // optional string cameraname = 5;
    if (has_cameraname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cameraname());
    }

    // optional bool hasrecjob = 6;
    if (has_hasrecjob()) {
      total_size += 1 + 1;
    }

    // optional bool recognizing = 7;
    if (has_recognizing()) {
      total_size += 1 + 1;
    }

    // optional bool recognizing_flag = 8;
    if (has_recognizing_flag()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 db_idcamera = 9;
    if (has_db_idcamera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_idcamera());
    }

    // optional int32 db_idrec = 10;
    if (has_db_idrec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_idrec());
    }

    // optional bool fromdatabase = 11;
    if (has_fromdatabase()) {
      total_size += 1 + 1;
    }

    // optional int32 activemat = 13;
    if (has_activemat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activemat());
    }

    // optional int32 matcols = 14;
    if (has_matcols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matcols());
    }

    // optional int32 matrows = 15;
    if (has_matrows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matrows());
    }

    // optional int32 matwidth = 16;
    if (has_matwidth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matwidth());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 matheight = 17;
    if (has_matheight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matheight());
    }

    // optional int32 db_idmat = 18;
    if (has_db_idmat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_idmat());
    }

    // optional bytes tempdata = 19;
    if (has_tempdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tempdata());
    }

    // optional bytes thumbnail = 20;
    if (has_thumbnail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->thumbnail());
    }

  }
  // repeated .motion.Message.MotionMonth motionmonth = 1;
  total_size += 1 * this->motionmonth_size();
  for (int i = 0; i < this->motionmonth_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->motionmonth(i));
  }

  // repeated .motion.Message.MotionRec motionrec = 2;
  total_size += 1 * this->motionrec_size();
  for (int i = 0; i < this->motionrec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->motionrec(i));
  }

  // repeated .motion.Message.MotionTrack motiontrack = 12;
  total_size += 1 * this->motiontrack_size();
  for (int i = 0; i < this->motiontrack_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->motiontrack(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_MotionCamera::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_MotionCamera* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_MotionCamera*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_MotionCamera::MergeFrom(const Message_MotionCamera& from) {
  GOOGLE_CHECK_NE(&from, this);
  motionmonth_.MergeFrom(from.motionmonth_);
  motionrec_.MergeFrom(from.motionrec_);
  motiontrack_.MergeFrom(from.motiontrack_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_cameraid()) {
      set_cameraid(from.cameraid());
    }
    if (from.has_cameranumber()) {
      set_cameranumber(from.cameranumber());
    }
    if (from.has_cameraname()) {
      set_cameraname(from.cameraname());
    }
    if (from.has_hasrecjob()) {
      set_hasrecjob(from.hasrecjob());
    }
    if (from.has_recognizing()) {
      set_recognizing(from.recognizing());
    }
    if (from.has_recognizing_flag()) {
      set_recognizing_flag(from.recognizing_flag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_db_idcamera()) {
      set_db_idcamera(from.db_idcamera());
    }
    if (from.has_db_idrec()) {
      set_db_idrec(from.db_idrec());
    }
    if (from.has_fromdatabase()) {
      set_fromdatabase(from.fromdatabase());
    }
    if (from.has_activemat()) {
      set_activemat(from.activemat());
    }
    if (from.has_matcols()) {
      set_matcols(from.matcols());
    }
    if (from.has_matrows()) {
      set_matrows(from.matrows());
    }
    if (from.has_matwidth()) {
      set_matwidth(from.matwidth());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_matheight()) {
      set_matheight(from.matheight());
    }
    if (from.has_db_idmat()) {
      set_db_idmat(from.db_idmat());
    }
    if (from.has_tempdata()) {
      set_tempdata(from.tempdata());
    }
    if (from.has_thumbnail()) {
      set_thumbnail(from.thumbnail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_MotionCamera::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_MotionCamera::CopyFrom(const Message_MotionCamera& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MotionCamera::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->motionmonth())) return false;
  return true;
}

void Message_MotionCamera::Swap(Message_MotionCamera* other) {
  if (other != this) {
    motionmonth_.Swap(&other->motionmonth_);
    motionrec_.Swap(&other->motionrec_);
    std::swap(cameraid_, other->cameraid_);
    std::swap(cameranumber_, other->cameranumber_);
    std::swap(cameraname_, other->cameraname_);
    std::swap(hasrecjob_, other->hasrecjob_);
    std::swap(recognizing_, other->recognizing_);
    std::swap(recognizing_flag_, other->recognizing_flag_);
    std::swap(db_idcamera_, other->db_idcamera_);
    std::swap(db_idrec_, other->db_idrec_);
    std::swap(fromdatabase_, other->fromdatabase_);
    motiontrack_.Swap(&other->motiontrack_);
    std::swap(activemat_, other->activemat_);
    std::swap(matcols_, other->matcols_);
    std::swap(matrows_, other->matrows_);
    std::swap(matwidth_, other->matwidth_);
    std::swap(matheight_, other->matheight_);
    std::swap(db_idmat_, other->db_idmat_);
    std::swap(tempdata_, other->tempdata_);
    std::swap(thumbnail_, other->thumbnail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_MotionCamera::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_MotionCamera_descriptor_;
  metadata.reflection = Message_MotionCamera_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message_MotionTrack::kDbIdinstanceFieldNumber;
#endif  // !_MSC_VER

Message_MotionTrack::Message_MotionTrack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Message.MotionTrack)
}

void Message_MotionTrack::InitAsDefaultInstance() {
}

Message_MotionTrack::Message_MotionTrack(const Message_MotionTrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Message.MotionTrack)
}

void Message_MotionTrack::SharedCtor() {
  _cached_size_ = 0;
  db_idinstance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_MotionTrack::~Message_MotionTrack() {
  // @@protoc_insertion_point(destructor:motion.Message.MotionTrack)
  SharedDtor();
}

void Message_MotionTrack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Message_MotionTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_MotionTrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_MotionTrack_descriptor_;
}

const Message_MotionTrack& Message_MotionTrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Message_MotionTrack* Message_MotionTrack::default_instance_ = NULL;

Message_MotionTrack* Message_MotionTrack::New() const {
  return new Message_MotionTrack;
}

void Message_MotionTrack::Clear() {
  db_idinstance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_MotionTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Message.MotionTrack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 db_idinstance = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_idinstance_)));
          set_has_db_idinstance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Message.MotionTrack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Message.MotionTrack)
  return false;
#undef DO_
}

void Message_MotionTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Message.MotionTrack)
  // optional int32 db_idinstance = 1;
  if (has_db_idinstance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->db_idinstance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Message.MotionTrack)
}

::google::protobuf::uint8* Message_MotionTrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Message.MotionTrack)
  // optional int32 db_idinstance = 1;
  if (has_db_idinstance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->db_idinstance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Message.MotionTrack)
  return target;
}

int Message_MotionTrack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 db_idinstance = 1;
    if (has_db_idinstance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_idinstance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_MotionTrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_MotionTrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_MotionTrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_MotionTrack::MergeFrom(const Message_MotionTrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_idinstance()) {
      set_db_idinstance(from.db_idinstance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_MotionTrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_MotionTrack::CopyFrom(const Message_MotionTrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MotionTrack::IsInitialized() const {

  return true;
}

void Message_MotionTrack::Swap(Message_MotionTrack* other) {
  if (other != this) {
    std::swap(db_idinstance_, other->db_idinstance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_MotionTrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_MotionTrack_descriptor_;
  metadata.reflection = Message_MotionTrack_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message_MotionRec::kNameFieldNumber;
const int Message_MotionRec::kDbIdrecFieldNumber;
const int Message_MotionRec::kTimestartFieldNumber;
const int Message_MotionRec::kTimeendFieldNumber;
const int Message_MotionRec::kRecnameFieldNumber;
const int Message_MotionRec::kCamerasinceFieldNumber;
const int Message_MotionRec::kStoreimageFieldNumber;
const int Message_MotionRec::kStorevideoFieldNumber;
const int Message_MotionRec::kCodenameFieldNumber;
const int Message_MotionRec::kHasregionFieldNumber;
const int Message_MotionRec::kCoordinatesFieldNumber;
const int Message_MotionRec::kDelayFieldNumber;
const int Message_MotionRec::kStartrectimeFieldNumber;
const int Message_MotionRec::kStoprectimeFieldNumber;
const int Message_MotionRec::kRunatstartupFieldNumber;
const int Message_MotionRec::kActivematFieldNumber;
const int Message_MotionRec::kDbIdmatFieldNumber;
const int Message_MotionRec::kDbIdcoordinatesFieldNumber;
const int Message_MotionRec::kDbIntervalidFieldNumber;
const int Message_MotionRec::kMatcolsFieldNumber;
const int Message_MotionRec::kMatrowsFieldNumber;
const int Message_MotionRec::kMatwidthFieldNumber;
const int Message_MotionRec::kMatheightFieldNumber;
const int Message_MotionRec::kLastinstanceFieldNumber;
const int Message_MotionRec::kDbIdmonthFieldNumber;
const int Message_MotionRec::kDbIddayFieldNumber;
const int Message_MotionRec::kXmlfilepathFieldNumber;
const int Message_MotionRec::kDbRecognitionsetupidFieldNumber;
const int Message_MotionRec::kHascronFieldNumber;
const int Message_MotionRec::kMotioncronFieldNumber;
const int Message_MotionRec::kSpeedFieldNumber;
const int Message_MotionRec::kActiverecFieldNumber;
const int Message_MotionRec::kMatbasefileFieldNumber;
const int Message_MotionRec::kCreatedFieldNumber;
#endif  // !_MSC_VER

Message_MotionRec::Message_MotionRec()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Message.MotionRec)
}

void Message_MotionRec::InitAsDefaultInstance() {
}

Message_MotionRec::Message_MotionRec(const Message_MotionRec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Message.MotionRec)
}

void Message_MotionRec::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_idrec_ = 0;
  timestart_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeend_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camerasince_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storeimage_ = false;
  storevideo_ = false;
  codename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hasregion_ = false;
  coordinates_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delay_ = 0;
  startrectime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoprectime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  runatstartup_ = false;
  activemat_ = 0;
  db_idmat_ = 0;
  db_idcoordinates_ = 0;
  db_intervalid_ = 0;
  matcols_ = 0;
  matrows_ = 0;
  matwidth_ = 0;
  matheight_ = 0;
  lastinstance_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_idmonth_ = 0;
  db_idday_ = 0;
  xmlfilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_recognitionsetupid_ = 0;
  hascron_ = false;
  speed_ = 0;
  activerec_ = 0;
  matbasefile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  created_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_MotionRec::~Message_MotionRec() {
  // @@protoc_insertion_point(destructor:motion.Message.MotionRec)
  SharedDtor();
}

void Message_MotionRec::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (timestart_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timestart_;
  }
  if (timeend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timeend_;
  }
  if (recname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recname_;
  }
  if (camerasince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete camerasince_;
  }
  if (codename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete codename_;
  }
  if (coordinates_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete coordinates_;
  }
  if (startrectime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete startrectime_;
  }
  if (stoprectime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stoprectime_;
  }
  if (lastinstance_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastinstance_;
  }
  if (xmlfilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete xmlfilepath_;
  }
  if (matbasefile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete matbasefile_;
  }
  if (created_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete created_;
  }
  if (this != default_instance_) {
  }
}

void Message_MotionRec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_MotionRec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_MotionRec_descriptor_;
}

const Message_MotionRec& Message_MotionRec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Message_MotionRec* Message_MotionRec::default_instance_ = NULL;

Message_MotionRec* Message_MotionRec::New() const {
  return new Message_MotionRec;
}

void Message_MotionRec::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Message_MotionRec*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(db_idrec_, storevideo_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_timestart()) {
      if (timestart_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        timestart_->clear();
      }
    }
    if (has_timeend()) {
      if (timeend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        timeend_->clear();
      }
    }
    if (has_recname()) {
      if (recname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        recname_->clear();
      }
    }
    if (has_camerasince()) {
      if (camerasince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        camerasince_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(hasregion_, runatstartup_);
    ZR_(delay_, activemat_);
    if (has_codename()) {
      if (codename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        codename_->clear();
      }
    }
    if (has_coordinates()) {
      if (coordinates_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        coordinates_->clear();
      }
    }
    if (has_startrectime()) {
      if (startrectime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        startrectime_->clear();
      }
    }
    if (has_stoprectime()) {
      if (stoprectime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stoprectime_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(db_idmat_, matwidth_);
    matheight_ = 0;
    if (has_lastinstance()) {
      if (lastinstance_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lastinstance_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 3741319168) {
    ZR_(db_idday_, db_recognitionsetupid_);
    ZR_(hascron_, speed_);
    db_idmonth_ = 0;
    if (has_xmlfilepath()) {
      if (xmlfilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        xmlfilepath_->clear();
      }
    }
    activerec_ = 0;
  }
  if (_has_bits_[32 / 32] & 3) {
    if (has_matbasefile()) {
      if (matbasefile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        matbasefile_->clear();
      }
    }
    if (has_created()) {
      if (created_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        created_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  motioncron_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_MotionRec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Message.MotionRec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_db_idrec;
        break;
      }

      // optional int32 db_idrec = 2;
      case 2: {
        if (tag == 16) {
         parse_db_idrec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_idrec_)));
          set_has_db_idrec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_timestart;
        break;
      }

      // optional string timestart = 3;
      case 3: {
        if (tag == 26) {
         parse_timestart:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestart()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestart().data(), this->timestart().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "timestart");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_timeend;
        break;
      }

      // optional string timeend = 4;
      case 4: {
        if (tag == 34) {
         parse_timeend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timeend()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timeend().data(), this->timeend().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "timeend");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_recname;
        break;
      }

      // optional string recname = 5;
      case 5: {
        if (tag == 42) {
         parse_recname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recname().data(), this->recname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_camerasince;
        break;
      }

      // optional string camerasince = 6;
      case 6: {
        if (tag == 50) {
         parse_camerasince:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camerasince()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camerasince().data(), this->camerasince().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "camerasince");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_storeimage;
        break;
      }

      // optional bool storeimage = 7;
      case 7: {
        if (tag == 56) {
         parse_storeimage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &storeimage_)));
          set_has_storeimage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_storevideo;
        break;
      }

      // optional bool storevideo = 8;
      case 8: {
        if (tag == 64) {
         parse_storevideo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &storevideo_)));
          set_has_storevideo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_codename;
        break;
      }

      // optional string codename = 9;
      case 9: {
        if (tag == 74) {
         parse_codename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->codename().data(), this->codename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "codename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_hasregion;
        break;
      }

      // optional bool hasregion = 10;
      case 10: {
        if (tag == 80) {
         parse_hasregion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasregion_)));
          set_has_hasregion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_coordinates;
        break;
      }

      // optional string coordinates = 11;
      case 11: {
        if (tag == 90) {
         parse_coordinates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coordinates()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->coordinates().data(), this->coordinates().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "coordinates");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_delay;
        break;
      }

      // optional int32 delay = 12;
      case 12: {
        if (tag == 96) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_startrectime;
        break;
      }

      // optional string startrectime = 13;
      case 13: {
        if (tag == 106) {
         parse_startrectime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startrectime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->startrectime().data(), this->startrectime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "startrectime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_stoprectime;
        break;
      }

      // optional string stoprectime = 14;
      case 14: {
        if (tag == 114) {
         parse_stoprectime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stoprectime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stoprectime().data(), this->stoprectime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stoprectime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_runatstartup;
        break;
      }

      // optional bool runatstartup = 15;
      case 15: {
        if (tag == 120) {
         parse_runatstartup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &runatstartup_)));
          set_has_runatstartup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_activemat;
        break;
      }

      // optional int32 activemat = 16;
      case 16: {
        if (tag == 128) {
         parse_activemat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activemat_)));
          set_has_activemat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_db_idmat;
        break;
      }

      // optional int32 db_idmat = 17;
      case 17: {
        if (tag == 136) {
         parse_db_idmat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_idmat_)));
          set_has_db_idmat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_db_idcoordinates;
        break;
      }

      // optional int32 db_idcoordinates = 18;
      case 18: {
        if (tag == 144) {
         parse_db_idcoordinates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_idcoordinates_)));
          set_has_db_idcoordinates();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_db_intervalid;
        break;
      }

      // optional int32 db_intervalid = 19;
      case 19: {
        if (tag == 152) {
         parse_db_intervalid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_intervalid_)));
          set_has_db_intervalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_matcols;
        break;
      }

      // optional int32 matcols = 20;
      case 20: {
        if (tag == 160) {
         parse_matcols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matcols_)));
          set_has_matcols();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_matrows;
        break;
      }

      // optional int32 matrows = 21;
      case 21: {
        if (tag == 168) {
         parse_matrows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matrows_)));
          set_has_matrows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_matwidth;
        break;
      }

      // optional int32 matwidth = 22;
      case 22: {
        if (tag == 176) {
         parse_matwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matwidth_)));
          set_has_matwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_matheight;
        break;
      }

      // optional int32 matheight = 23;
      case 23: {
        if (tag == 184) {
         parse_matheight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matheight_)));
          set_has_matheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_lastinstance;
        break;
      }

      // optional string lastinstance = 24;
      case 24: {
        if (tag == 194) {
         parse_lastinstance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastinstance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lastinstance().data(), this->lastinstance().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lastinstance");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_db_idmonth;
        break;
      }

      // optional int32 db_idmonth = 25;
      case 25: {
        if (tag == 200) {
         parse_db_idmonth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_idmonth_)));
          set_has_db_idmonth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_db_idday;
        break;
      }

      // optional int32 db_idday = 26;
      case 26: {
        if (tag == 208) {
         parse_db_idday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_idday_)));
          set_has_db_idday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_xmlfilepath;
        break;
      }

      // optional string xmlfilepath = 27;
      case 27: {
        if (tag == 218) {
         parse_xmlfilepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xmlfilepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->xmlfilepath().data(), this->xmlfilepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xmlfilepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_db_recognitionsetupid;
        break;
      }

      // optional int32 db_recognitionsetupid = 28;
      case 28: {
        if (tag == 224) {
         parse_db_recognitionsetupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_recognitionsetupid_)));
          set_has_db_recognitionsetupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_hascron;
        break;
      }

      // optional bool hascron = 29;
      case 29: {
        if (tag == 232) {
         parse_hascron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hascron_)));
          set_has_hascron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_motioncron;
        break;
      }

      // repeated .motion.Message.MotionCron motioncron = 30;
      case 30: {
        if (tag == 242) {
         parse_motioncron:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_motioncron()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_motioncron;
        if (input->ExpectTag(248)) goto parse_speed;
        break;
      }

      // optional int32 speed = 31;
      case 31: {
        if (tag == 248) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_activerec;
        break;
      }

      // optional int32 activerec = 32;
      case 32: {
        if (tag == 256) {
         parse_activerec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activerec_)));
          set_has_activerec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_matbasefile;
        break;
      }

      // optional string matbasefile = 33;
      case 33: {
        if (tag == 266) {
         parse_matbasefile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matbasefile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->matbasefile().data(), this->matbasefile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "matbasefile");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_created;
        break;
      }

      // optional string created = 34;
      case 34: {
        if (tag == 274) {
         parse_created:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_created()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->created().data(), this->created().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "created");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Message.MotionRec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Message.MotionRec)
  return false;
#undef DO_
}

void Message_MotionRec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Message.MotionRec)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 db_idrec = 2;
  if (has_db_idrec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->db_idrec(), output);
  }

  // optional string timestart = 3;
  if (has_timestart()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestart().data(), this->timestart().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timestart");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->timestart(), output);
  }

  // optional string timeend = 4;
  if (has_timeend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timeend().data(), this->timeend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timeend");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->timeend(), output);
  }

  // optional string recname = 5;
  if (has_recname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recname().data(), this->recname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->recname(), output);
  }

  // optional string camerasince = 6;
  if (has_camerasince()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camerasince().data(), this->camerasince().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camerasince");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->camerasince(), output);
  }

  // optional bool storeimage = 7;
  if (has_storeimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->storeimage(), output);
  }

  // optional bool storevideo = 8;
  if (has_storevideo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->storevideo(), output);
  }

  // optional string codename = 9;
  if (has_codename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codename().data(), this->codename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->codename(), output);
  }

  // optional bool hasregion = 10;
  if (has_hasregion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->hasregion(), output);
  }

  // optional string coordinates = 11;
  if (has_coordinates()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coordinates().data(), this->coordinates().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "coordinates");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->coordinates(), output);
  }

  // optional int32 delay = 12;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->delay(), output);
  }

  // optional string startrectime = 13;
  if (has_startrectime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startrectime().data(), this->startrectime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "startrectime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->startrectime(), output);
  }

  // optional string stoprectime = 14;
  if (has_stoprectime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stoprectime().data(), this->stoprectime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stoprectime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->stoprectime(), output);
  }

  // optional bool runatstartup = 15;
  if (has_runatstartup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->runatstartup(), output);
  }

  // optional int32 activemat = 16;
  if (has_activemat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->activemat(), output);
  }

  // optional int32 db_idmat = 17;
  if (has_db_idmat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->db_idmat(), output);
  }

  // optional int32 db_idcoordinates = 18;
  if (has_db_idcoordinates()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->db_idcoordinates(), output);
  }

  // optional int32 db_intervalid = 19;
  if (has_db_intervalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->db_intervalid(), output);
  }

  // optional int32 matcols = 20;
  if (has_matcols()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->matcols(), output);
  }

  // optional int32 matrows = 21;
  if (has_matrows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->matrows(), output);
  }

  // optional int32 matwidth = 22;
  if (has_matwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->matwidth(), output);
  }

  // optional int32 matheight = 23;
  if (has_matheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->matheight(), output);
  }

  // optional string lastinstance = 24;
  if (has_lastinstance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastinstance().data(), this->lastinstance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lastinstance");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->lastinstance(), output);
  }

  // optional int32 db_idmonth = 25;
  if (has_db_idmonth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->db_idmonth(), output);
  }

  // optional int32 db_idday = 26;
  if (has_db_idday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->db_idday(), output);
  }

  // optional string xmlfilepath = 27;
  if (has_xmlfilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xmlfilepath().data(), this->xmlfilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xmlfilepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->xmlfilepath(), output);
  }

  // optional int32 db_recognitionsetupid = 28;
  if (has_db_recognitionsetupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->db_recognitionsetupid(), output);
  }

  // optional bool hascron = 29;
  if (has_hascron()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->hascron(), output);
  }

  // repeated .motion.Message.MotionCron motioncron = 30;
  for (int i = 0; i < this->motioncron_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->motioncron(i), output);
  }

  // optional int32 speed = 31;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->speed(), output);
  }

  // optional int32 activerec = 32;
  if (has_activerec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->activerec(), output);
  }

  // optional string matbasefile = 33;
  if (has_matbasefile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->matbasefile().data(), this->matbasefile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "matbasefile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->matbasefile(), output);
  }

  // optional string created = 34;
  if (has_created()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->created().data(), this->created().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "created");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->created(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Message.MotionRec)
}

::google::protobuf::uint8* Message_MotionRec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Message.MotionRec)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 db_idrec = 2;
  if (has_db_idrec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->db_idrec(), target);
  }

  // optional string timestart = 3;
  if (has_timestart()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestart().data(), this->timestart().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timestart");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->timestart(), target);
  }

  // optional string timeend = 4;
  if (has_timeend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timeend().data(), this->timeend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timeend");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->timeend(), target);
  }

  // optional string recname = 5;
  if (has_recname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recname().data(), this->recname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->recname(), target);
  }

  // optional string camerasince = 6;
  if (has_camerasince()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camerasince().data(), this->camerasince().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camerasince");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->camerasince(), target);
  }

  // optional bool storeimage = 7;
  if (has_storeimage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->storeimage(), target);
  }

  // optional bool storevideo = 8;
  if (has_storevideo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->storevideo(), target);
  }

  // optional string codename = 9;
  if (has_codename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codename().data(), this->codename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->codename(), target);
  }

  // optional bool hasregion = 10;
  if (has_hasregion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->hasregion(), target);
  }

  // optional string coordinates = 11;
  if (has_coordinates()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coordinates().data(), this->coordinates().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "coordinates");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->coordinates(), target);
  }

  // optional int32 delay = 12;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->delay(), target);
  }

  // optional string startrectime = 13;
  if (has_startrectime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startrectime().data(), this->startrectime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "startrectime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->startrectime(), target);
  }

  // optional string stoprectime = 14;
  if (has_stoprectime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stoprectime().data(), this->stoprectime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stoprectime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->stoprectime(), target);
  }

  // optional bool runatstartup = 15;
  if (has_runatstartup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->runatstartup(), target);
  }

  // optional int32 activemat = 16;
  if (has_activemat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->activemat(), target);
  }

  // optional int32 db_idmat = 17;
  if (has_db_idmat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->db_idmat(), target);
  }

  // optional int32 db_idcoordinates = 18;
  if (has_db_idcoordinates()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->db_idcoordinates(), target);
  }

  // optional int32 db_intervalid = 19;
  if (has_db_intervalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->db_intervalid(), target);
  }

  // optional int32 matcols = 20;
  if (has_matcols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->matcols(), target);
  }

  // optional int32 matrows = 21;
  if (has_matrows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->matrows(), target);
  }

  // optional int32 matwidth = 22;
  if (has_matwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->matwidth(), target);
  }

  // optional int32 matheight = 23;
  if (has_matheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->matheight(), target);
  }

  // optional string lastinstance = 24;
  if (has_lastinstance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastinstance().data(), this->lastinstance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lastinstance");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->lastinstance(), target);
  }

  // optional int32 db_idmonth = 25;
  if (has_db_idmonth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->db_idmonth(), target);
  }

  // optional int32 db_idday = 26;
  if (has_db_idday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->db_idday(), target);
  }

  // optional string xmlfilepath = 27;
  if (has_xmlfilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xmlfilepath().data(), this->xmlfilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xmlfilepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->xmlfilepath(), target);
  }

  // optional int32 db_recognitionsetupid = 28;
  if (has_db_recognitionsetupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->db_recognitionsetupid(), target);
  }

  // optional bool hascron = 29;
  if (has_hascron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->hascron(), target);
  }

  // repeated .motion.Message.MotionCron motioncron = 30;
  for (int i = 0; i < this->motioncron_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->motioncron(i), target);
  }

  // optional int32 speed = 31;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->speed(), target);
  }

  // optional int32 activerec = 32;
  if (has_activerec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->activerec(), target);
  }

  // optional string matbasefile = 33;
  if (has_matbasefile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->matbasefile().data(), this->matbasefile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "matbasefile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->matbasefile(), target);
  }

  // optional string created = 34;
  if (has_created()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->created().data(), this->created().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "created");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->created(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Message.MotionRec)
  return target;
}

int Message_MotionRec::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 db_idrec = 2;
    if (has_db_idrec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_idrec());
    }

    // optional string timestart = 3;
    if (has_timestart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestart());
    }

    // optional string timeend = 4;
    if (has_timeend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timeend());
    }

    // optional string recname = 5;
    if (has_recname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recname());
    }

    // optional string camerasince = 6;
    if (has_camerasince()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camerasince());
    }

    // optional bool storeimage = 7;
    if (has_storeimage()) {
      total_size += 1 + 1;
    }

    // optional bool storevideo = 8;
    if (has_storevideo()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string codename = 9;
    if (has_codename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codename());
    }

    // optional bool hasregion = 10;
    if (has_hasregion()) {
      total_size += 1 + 1;
    }

    // optional string coordinates = 11;
    if (has_coordinates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->coordinates());
    }

    // optional int32 delay = 12;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay());
    }

    // optional string startrectime = 13;
    if (has_startrectime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->startrectime());
    }

    // optional string stoprectime = 14;
    if (has_stoprectime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stoprectime());
    }

    // optional bool runatstartup = 15;
    if (has_runatstartup()) {
      total_size += 1 + 1;
    }

    // optional int32 activemat = 16;
    if (has_activemat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activemat());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 db_idmat = 17;
    if (has_db_idmat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_idmat());
    }

    // optional int32 db_idcoordinates = 18;
    if (has_db_idcoordinates()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_idcoordinates());
    }

    // optional int32 db_intervalid = 19;
    if (has_db_intervalid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_intervalid());
    }

    // optional int32 matcols = 20;
    if (has_matcols()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matcols());
    }

    // optional int32 matrows = 21;
    if (has_matrows()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matrows());
    }

    // optional int32 matwidth = 22;
    if (has_matwidth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matwidth());
    }

    // optional int32 matheight = 23;
    if (has_matheight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matheight());
    }

    // optional string lastinstance = 24;
    if (has_lastinstance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastinstance());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 db_idmonth = 25;
    if (has_db_idmonth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_idmonth());
    }

    // optional int32 db_idday = 26;
    if (has_db_idday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_idday());
    }

    // optional string xmlfilepath = 27;
    if (has_xmlfilepath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xmlfilepath());
    }

    // optional int32 db_recognitionsetupid = 28;
    if (has_db_recognitionsetupid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_recognitionsetupid());
    }

    // optional bool hascron = 29;
    if (has_hascron()) {
      total_size += 2 + 1;
    }

    // optional int32 speed = 31;
    if (has_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int32 activerec = 32;
    if (has_activerec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activerec());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string matbasefile = 33;
    if (has_matbasefile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->matbasefile());
    }

    // optional string created = 34;
    if (has_created()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->created());
    }

  }
  // repeated .motion.Message.MotionCron motioncron = 30;
  total_size += 2 * this->motioncron_size();
  for (int i = 0; i < this->motioncron_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->motioncron(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_MotionRec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_MotionRec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_MotionRec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_MotionRec::MergeFrom(const Message_MotionRec& from) {
  GOOGLE_CHECK_NE(&from, this);
  motioncron_.MergeFrom(from.motioncron_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_db_idrec()) {
      set_db_idrec(from.db_idrec());
    }
    if (from.has_timestart()) {
      set_timestart(from.timestart());
    }
    if (from.has_timeend()) {
      set_timeend(from.timeend());
    }
    if (from.has_recname()) {
      set_recname(from.recname());
    }
    if (from.has_camerasince()) {
      set_camerasince(from.camerasince());
    }
    if (from.has_storeimage()) {
      set_storeimage(from.storeimage());
    }
    if (from.has_storevideo()) {
      set_storevideo(from.storevideo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_codename()) {
      set_codename(from.codename());
    }
    if (from.has_hasregion()) {
      set_hasregion(from.hasregion());
    }
    if (from.has_coordinates()) {
      set_coordinates(from.coordinates());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_startrectime()) {
      set_startrectime(from.startrectime());
    }
    if (from.has_stoprectime()) {
      set_stoprectime(from.stoprectime());
    }
    if (from.has_runatstartup()) {
      set_runatstartup(from.runatstartup());
    }
    if (from.has_activemat()) {
      set_activemat(from.activemat());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_db_idmat()) {
      set_db_idmat(from.db_idmat());
    }
    if (from.has_db_idcoordinates()) {
      set_db_idcoordinates(from.db_idcoordinates());
    }
    if (from.has_db_intervalid()) {
      set_db_intervalid(from.db_intervalid());
    }
    if (from.has_matcols()) {
      set_matcols(from.matcols());
    }
    if (from.has_matrows()) {
      set_matrows(from.matrows());
    }
    if (from.has_matwidth()) {
      set_matwidth(from.matwidth());
    }
    if (from.has_matheight()) {
      set_matheight(from.matheight());
    }
    if (from.has_lastinstance()) {
      set_lastinstance(from.lastinstance());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_db_idmonth()) {
      set_db_idmonth(from.db_idmonth());
    }
    if (from.has_db_idday()) {
      set_db_idday(from.db_idday());
    }
    if (from.has_xmlfilepath()) {
      set_xmlfilepath(from.xmlfilepath());
    }
    if (from.has_db_recognitionsetupid()) {
      set_db_recognitionsetupid(from.db_recognitionsetupid());
    }
    if (from.has_hascron()) {
      set_hascron(from.hascron());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_activerec()) {
      set_activerec(from.activerec());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_matbasefile()) {
      set_matbasefile(from.matbasefile());
    }
    if (from.has_created()) {
      set_created(from.created());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_MotionRec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_MotionRec::CopyFrom(const Message_MotionRec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MotionRec::IsInitialized() const {

  return true;
}

void Message_MotionRec::Swap(Message_MotionRec* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(db_idrec_, other->db_idrec_);
    std::swap(timestart_, other->timestart_);
    std::swap(timeend_, other->timeend_);
    std::swap(recname_, other->recname_);
    std::swap(camerasince_, other->camerasince_);
    std::swap(storeimage_, other->storeimage_);
    std::swap(storevideo_, other->storevideo_);
    std::swap(codename_, other->codename_);
    std::swap(hasregion_, other->hasregion_);
    std::swap(coordinates_, other->coordinates_);
    std::swap(delay_, other->delay_);
    std::swap(startrectime_, other->startrectime_);
    std::swap(stoprectime_, other->stoprectime_);
    std::swap(runatstartup_, other->runatstartup_);
    std::swap(activemat_, other->activemat_);
    std::swap(db_idmat_, other->db_idmat_);
    std::swap(db_idcoordinates_, other->db_idcoordinates_);
    std::swap(db_intervalid_, other->db_intervalid_);
    std::swap(matcols_, other->matcols_);
    std::swap(matrows_, other->matrows_);
    std::swap(matwidth_, other->matwidth_);
    std::swap(matheight_, other->matheight_);
    std::swap(lastinstance_, other->lastinstance_);
    std::swap(db_idmonth_, other->db_idmonth_);
    std::swap(db_idday_, other->db_idday_);
    std::swap(xmlfilepath_, other->xmlfilepath_);
    std::swap(db_recognitionsetupid_, other->db_recognitionsetupid_);
    std::swap(hascron_, other->hascron_);
    motioncron_.Swap(&other->motioncron_);
    std::swap(speed_, other->speed_);
    std::swap(activerec_, other->activerec_);
    std::swap(matbasefile_, other->matbasefile_);
    std::swap(created_, other->created_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_MotionRec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_MotionRec_descriptor_;
  metadata.reflection = Message_MotionRec_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message_MotionCron::kCommandFieldNumber;
const int Message_MotionCron::kProgramFieldNumber;
#endif  // !_MSC_VER

Message_MotionCron::Message_MotionCron()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Message.MotionCron)
}

void Message_MotionCron::InitAsDefaultInstance() {
}

Message_MotionCron::Message_MotionCron(const Message_MotionCron& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Message.MotionCron)
}

void Message_MotionCron::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  program_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_MotionCron::~Message_MotionCron() {
  // @@protoc_insertion_point(destructor:motion.Message.MotionCron)
  SharedDtor();
}

void Message_MotionCron::SharedDtor() {
  if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete command_;
  }
  if (program_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete program_;
  }
  if (this != default_instance_) {
  }
}

void Message_MotionCron::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_MotionCron::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_MotionCron_descriptor_;
}

const Message_MotionCron& Message_MotionCron::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Message_MotionCron* Message_MotionCron::default_instance_ = NULL;

Message_MotionCron* Message_MotionCron::New() const {
  return new Message_MotionCron;
}

void Message_MotionCron::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_command()) {
      if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        command_->clear();
      }
    }
    if (has_program()) {
      if (program_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        program_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_MotionCron::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Message.MotionCron)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string command = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "command");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_program;
        break;
      }

      // optional string program = 2;
      case 2: {
        if (tag == 18) {
         parse_program:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_program()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->program().data(), this->program().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "program");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Message.MotionCron)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Message.MotionCron)
  return false;
#undef DO_
}

void Message_MotionCron::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Message.MotionCron)
  // optional string command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->command(), output);
  }

  // optional string program = 2;
  if (has_program()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->program().data(), this->program().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "program");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->program(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Message.MotionCron)
}

::google::protobuf::uint8* Message_MotionCron::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Message.MotionCron)
  // optional string command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }

  // optional string program = 2;
  if (has_program()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->program().data(), this->program().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "program");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->program(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Message.MotionCron)
  return target;
}

int Message_MotionCron::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

    // optional string program = 2;
    if (has_program()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->program());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_MotionCron::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_MotionCron* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_MotionCron*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_MotionCron::MergeFrom(const Message_MotionCron& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_program()) {
      set_program(from.program());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_MotionCron::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_MotionCron::CopyFrom(const Message_MotionCron& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MotionCron::IsInitialized() const {

  return true;
}

void Message_MotionCron::Swap(Message_MotionCron* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(program_, other->program_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_MotionCron::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_MotionCron_descriptor_;
  metadata.reflection = Message_MotionCron_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message_MotionMonth::kMotiondayFieldNumber;
const int Message_MotionMonth::kMonthlabelFieldNumber;
const int Message_MotionMonth::kDbMonthidFieldNumber;
#endif  // !_MSC_VER

Message_MotionMonth::Message_MotionMonth()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Message.MotionMonth)
}

void Message_MotionMonth::InitAsDefaultInstance() {
}

Message_MotionMonth::Message_MotionMonth(const Message_MotionMonth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Message.MotionMonth)
}

void Message_MotionMonth::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  monthlabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_monthid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_MotionMonth::~Message_MotionMonth() {
  // @@protoc_insertion_point(destructor:motion.Message.MotionMonth)
  SharedDtor();
}

void Message_MotionMonth::SharedDtor() {
  if (monthlabel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete monthlabel_;
  }
  if (this != default_instance_) {
  }
}

void Message_MotionMonth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_MotionMonth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_MotionMonth_descriptor_;
}

const Message_MotionMonth& Message_MotionMonth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Message_MotionMonth* Message_MotionMonth::default_instance_ = NULL;

Message_MotionMonth* Message_MotionMonth::New() const {
  return new Message_MotionMonth;
}

void Message_MotionMonth::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_monthlabel()) {
      if (monthlabel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        monthlabel_->clear();
      }
    }
    db_monthid_ = 0;
  }
  motionday_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_MotionMonth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Message.MotionMonth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .motion.Message.MotionDay motionday = 1;
      case 1: {
        if (tag == 10) {
         parse_motionday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_motionday()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_motionday;
        if (input->ExpectTag(18)) goto parse_monthlabel;
        break;
      }

      // optional string monthlabel = 2;
      case 2: {
        if (tag == 18) {
         parse_monthlabel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monthlabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->monthlabel().data(), this->monthlabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "monthlabel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_db_monthid;
        break;
      }

      // optional int32 db_monthid = 3;
      case 3: {
        if (tag == 24) {
         parse_db_monthid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_monthid_)));
          set_has_db_monthid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Message.MotionMonth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Message.MotionMonth)
  return false;
#undef DO_
}

void Message_MotionMonth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Message.MotionMonth)
  // repeated .motion.Message.MotionDay motionday = 1;
  for (int i = 0; i < this->motionday_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->motionday(i), output);
  }

  // optional string monthlabel = 2;
  if (has_monthlabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monthlabel().data(), this->monthlabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "monthlabel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->monthlabel(), output);
  }

  // optional int32 db_monthid = 3;
  if (has_db_monthid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->db_monthid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Message.MotionMonth)
}

::google::protobuf::uint8* Message_MotionMonth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Message.MotionMonth)
  // repeated .motion.Message.MotionDay motionday = 1;
  for (int i = 0; i < this->motionday_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->motionday(i), target);
  }

  // optional string monthlabel = 2;
  if (has_monthlabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monthlabel().data(), this->monthlabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "monthlabel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->monthlabel(), target);
  }

  // optional int32 db_monthid = 3;
  if (has_db_monthid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->db_monthid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Message.MotionMonth)
  return target;
}

int Message_MotionMonth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string monthlabel = 2;
    if (has_monthlabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monthlabel());
    }

    // optional int32 db_monthid = 3;
    if (has_db_monthid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_monthid());
    }

  }
  // repeated .motion.Message.MotionDay motionday = 1;
  total_size += 1 * this->motionday_size();
  for (int i = 0; i < this->motionday_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->motionday(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_MotionMonth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_MotionMonth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_MotionMonth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_MotionMonth::MergeFrom(const Message_MotionMonth& from) {
  GOOGLE_CHECK_NE(&from, this);
  motionday_.MergeFrom(from.motionday_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_monthlabel()) {
      set_monthlabel(from.monthlabel());
    }
    if (from.has_db_monthid()) {
      set_db_monthid(from.db_monthid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_MotionMonth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_MotionMonth::CopyFrom(const Message_MotionMonth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MotionMonth::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->motionday())) return false;
  return true;
}

void Message_MotionMonth::Swap(Message_MotionMonth* other) {
  if (other != this) {
    motionday_.Swap(&other->motionday_);
    std::swap(monthlabel_, other->monthlabel_);
    std::swap(db_monthid_, other->db_monthid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_MotionMonth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_MotionMonth_descriptor_;
  metadata.reflection = Message_MotionMonth_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message_MotionDay::kInstanceFieldNumber;
const int Message_MotionDay::kDaylabelFieldNumber;
const int Message_MotionDay::kDbDayidFieldNumber;
const int Message_MotionDay::kXmlfilepathFieldNumber;
const int Message_MotionDay::kTitleFieldNumber;
#endif  // !_MSC_VER

Message_MotionDay::Message_MotionDay()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Message.MotionDay)
}

void Message_MotionDay::InitAsDefaultInstance() {
}

Message_MotionDay::Message_MotionDay(const Message_MotionDay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Message.MotionDay)
}

void Message_MotionDay::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  daylabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_dayid_ = 0;
  xmlfilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_MotionDay::~Message_MotionDay() {
  // @@protoc_insertion_point(destructor:motion.Message.MotionDay)
  SharedDtor();
}

void Message_MotionDay::SharedDtor() {
  if (daylabel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete daylabel_;
  }
  if (xmlfilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete xmlfilepath_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void Message_MotionDay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_MotionDay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_MotionDay_descriptor_;
}

const Message_MotionDay& Message_MotionDay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Message_MotionDay* Message_MotionDay::default_instance_ = NULL;

Message_MotionDay* Message_MotionDay::New() const {
  return new Message_MotionDay;
}

void Message_MotionDay::Clear() {
  if (_has_bits_[0 / 32] & 30) {
    if (has_daylabel()) {
      if (daylabel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        daylabel_->clear();
      }
    }
    db_dayid_ = 0;
    if (has_xmlfilepath()) {
      if (xmlfilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        xmlfilepath_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
  }
  instance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_MotionDay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Message.MotionDay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .motion.Message.Instance instance = 1;
      case 1: {
        if (tag == 10) {
         parse_instance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_instance;
        if (input->ExpectTag(18)) goto parse_daylabel;
        break;
      }

      // optional string daylabel = 2;
      case 2: {
        if (tag == 18) {
         parse_daylabel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_daylabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->daylabel().data(), this->daylabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "daylabel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_db_dayid;
        break;
      }

      // optional int32 db_dayid = 3;
      case 3: {
        if (tag == 24) {
         parse_db_dayid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_dayid_)));
          set_has_db_dayid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_xmlfilepath;
        break;
      }

      // optional string xmlfilepath = 4;
      case 4: {
        if (tag == 34) {
         parse_xmlfilepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xmlfilepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->xmlfilepath().data(), this->xmlfilepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xmlfilepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_title;
        break;
      }

      // optional string title = 5;
      case 5: {
        if (tag == 42) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Message.MotionDay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Message.MotionDay)
  return false;
#undef DO_
}

void Message_MotionDay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Message.MotionDay)
  // repeated .motion.Message.Instance instance = 1;
  for (int i = 0; i < this->instance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->instance(i), output);
  }

  // optional string daylabel = 2;
  if (has_daylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->daylabel().data(), this->daylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "daylabel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->daylabel(), output);
  }

  // optional int32 db_dayid = 3;
  if (has_db_dayid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->db_dayid(), output);
  }

  // optional string xmlfilepath = 4;
  if (has_xmlfilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xmlfilepath().data(), this->xmlfilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xmlfilepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->xmlfilepath(), output);
  }

  // optional string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->title(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Message.MotionDay)
}

::google::protobuf::uint8* Message_MotionDay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Message.MotionDay)
  // repeated .motion.Message.Instance instance = 1;
  for (int i = 0; i < this->instance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->instance(i), target);
  }

  // optional string daylabel = 2;
  if (has_daylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->daylabel().data(), this->daylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "daylabel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->daylabel(), target);
  }

  // optional int32 db_dayid = 3;
  if (has_db_dayid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->db_dayid(), target);
  }

  // optional string xmlfilepath = 4;
  if (has_xmlfilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xmlfilepath().data(), this->xmlfilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xmlfilepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->xmlfilepath(), target);
  }

  // optional string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Message.MotionDay)
  return target;
}

int Message_MotionDay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string daylabel = 2;
    if (has_daylabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->daylabel());
    }

    // optional int32 db_dayid = 3;
    if (has_db_dayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_dayid());
    }

    // optional string xmlfilepath = 4;
    if (has_xmlfilepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xmlfilepath());
    }

    // optional string title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

  }
  // repeated .motion.Message.Instance instance = 1;
  total_size += 1 * this->instance_size();
  for (int i = 0; i < this->instance_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instance(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_MotionDay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_MotionDay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_MotionDay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_MotionDay::MergeFrom(const Message_MotionDay& from) {
  GOOGLE_CHECK_NE(&from, this);
  instance_.MergeFrom(from.instance_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_daylabel()) {
      set_daylabel(from.daylabel());
    }
    if (from.has_db_dayid()) {
      set_db_dayid(from.db_dayid());
    }
    if (from.has_xmlfilepath()) {
      set_xmlfilepath(from.xmlfilepath());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_MotionDay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_MotionDay::CopyFrom(const Message_MotionDay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MotionDay::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->instance())) return false;
  return true;
}

void Message_MotionDay::Swap(Message_MotionDay* other) {
  if (other != this) {
    instance_.Swap(&other->instance_);
    std::swap(daylabel_, other->daylabel_);
    std::swap(db_dayid_, other->db_dayid_);
    std::swap(xmlfilepath_, other->xmlfilepath_);
    std::swap(title_, other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_MotionDay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_MotionDay_descriptor_;
  metadata.reflection = Message_MotionDay_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message_Instance::kIdinstanceFieldNumber;
const int Message_Instance::kNumberFieldNumber;
const int Message_Instance::kInstancestartFieldNumber;
const int Message_Instance::kInstanceendFieldNumber;
const int Message_Instance::kFileformatFieldNumber;
const int Message_Instance::kImageFieldNumber;
const int Message_Instance::kCropFieldNumber;
const int Message_Instance::kVideoFieldNumber;
const int Message_Instance::kDirFieldNumber;
const int Message_Instance::kXmlfileFieldNumber;
const int Message_Instance::kExtdataFieldNumber;
const int Message_Instance::kEndFieldNumber;
const int Message_Instance::kBegintimeFieldNumber;
const int Message_Instance::kEndtimeFieldNumber;
const int Message_Instance::kInittimeFieldNumber;
const int Message_Instance::kInstanceFieldNumber;
const int Message_Instance::kInstancecodeFieldNumber;
const int Message_Instance::kTimeinfoFieldNumber;
const int Message_Instance::kDbDayidFieldNumber;
const int Message_Instance::kDbRecognitionSetupIdFieldNumber;
const int Message_Instance::kRecnameFieldNumber;
const int Message_Instance::kCameraFieldNumber;
const int Message_Instance::kCameranumberFieldNumber;
#endif  // !_MSC_VER

Message_Instance::Message_Instance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Message.Instance)
}

void Message_Instance::InitAsDefaultInstance() {
  video_ = const_cast< ::motion::Message_Video*>(&::motion::Message_Video::default_instance());
}

Message_Instance::Message_Instance(const Message_Instance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Message.Instance)
}

void Message_Instance::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  idinstance_ = 0;
  number_ = 0;
  instancestart_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instanceend_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fileformat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_ = NULL;
  dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xmlfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  begintime_ = 0;
  endtime_ = 0;
  inittime_ = 0;
  instance_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instancecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_dayid_ = 0;
  db_recognition_setup_id_ = 0;
  recname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cameranumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_Instance::~Message_Instance() {
  // @@protoc_insertion_point(destructor:motion.Message.Instance)
  SharedDtor();
}

void Message_Instance::SharedDtor() {
  if (instancestart_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete instancestart_;
  }
  if (instanceend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete instanceend_;
  }
  if (fileformat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fileformat_;
  }
  if (dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dir_;
  }
  if (xmlfile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete xmlfile_;
  }
  if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extdata_;
  }
  if (end_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_;
  }
  if (instance_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete instance_;
  }
  if (instancecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete instancecode_;
  }
  if (timeinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timeinfo_;
  }
  if (recname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recname_;
  }
  if (camera_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete camera_;
  }
  if (this != default_instance_) {
    delete video_;
  }
}

void Message_Instance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_Instance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Instance_descriptor_;
}

const Message_Instance& Message_Instance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Message_Instance* Message_Instance::default_instance_ = NULL;

Message_Instance* Message_Instance::New() const {
  return new Message_Instance;
}

void Message_Instance::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Message_Instance*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 159) {
    ZR_(idinstance_, number_);
    if (has_instancestart()) {
      if (instancestart_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        instancestart_->clear();
      }
    }
    if (has_instanceend()) {
      if (instanceend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        instanceend_->clear();
      }
    }
    if (has_fileformat()) {
      if (fileformat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fileformat_->clear();
      }
    }
    if (has_video()) {
      if (video_ != NULL) video_->::motion::Message_Video::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(begintime_, endtime_);
    if (has_dir()) {
      if (dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dir_->clear();
      }
    }
    if (has_xmlfile()) {
      if (xmlfile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        xmlfile_->clear();
      }
    }
    if (has_extdata()) {
      if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extdata_->clear();
      }
    }
    if (has_end()) {
      if (end_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_->clear();
      }
    }
    inittime_ = 0;
    if (has_instance()) {
      if (instance_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        instance_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 8323072) {
    ZR_(db_recognition_setup_id_, cameranumber_);
    if (has_instancecode()) {
      if (instancecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        instancecode_->clear();
      }
    }
    if (has_timeinfo()) {
      if (timeinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        timeinfo_->clear();
      }
    }
    db_dayid_ = 0;
    if (has_recname()) {
      if (recname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        recname_->clear();
      }
    }
    if (has_camera()) {
      if (camera_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        camera_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  image_.Clear();
  crop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_Instance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Message.Instance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 idinstance = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idinstance_)));
          set_has_idinstance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // optional int32 number = 2;
      case 2: {
        if (tag == 16) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_instancestart;
        break;
      }

      // optional string instancestart = 3;
      case 3: {
        if (tag == 26) {
         parse_instancestart:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instancestart()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instancestart().data(), this->instancestart().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "instancestart");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_instanceend;
        break;
      }

      // optional string instanceend = 4;
      case 4: {
        if (tag == 34) {
         parse_instanceend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instanceend()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instanceend().data(), this->instanceend().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "instanceend");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fileformat;
        break;
      }

      // optional string fileformat = 5;
      case 5: {
        if (tag == 42) {
         parse_fileformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileformat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fileformat().data(), this->fileformat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fileformat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_image;
        break;
      }

      // repeated .motion.Message.Image image = 6;
      case 6: {
        if (tag == 50) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_image;
        if (input->ExpectTag(58)) goto parse_crop;
        break;
      }

      // repeated .motion.Message.Crop crop = 7;
      case 7: {
        if (tag == 58) {
         parse_crop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_crop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_crop;
        if (input->ExpectTag(66)) goto parse_video;
        break;
      }

      // optional .motion.Message.Video video = 8;
      case 8: {
        if (tag == 66) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_dir;
        break;
      }

      // optional string dir = 9;
      case 9: {
        if (tag == 74) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dir().data(), this->dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_xmlfile;
        break;
      }

      // optional string xmlfile = 10;
      case 10: {
        if (tag == 82) {
         parse_xmlfile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xmlfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->xmlfile().data(), this->xmlfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xmlfile");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_extdata;
        break;
      }

      // optional string extdata = 11;
      case 11: {
        if (tag == 90) {
         parse_extdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extdata().data(), this->extdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_end;
        break;
      }

      // optional string end = 12;
      case 12: {
        if (tag == 98) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->end().data(), this->end().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "end");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_begintime;
        break;
      }

      // optional int32 begintime = 13;
      case 13: {
        if (tag == 104) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_endtime;
        break;
      }

      // optional int32 endtime = 14;
      case 14: {
        if (tag == 112) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_inittime;
        break;
      }

      // optional int32 inittime = 15;
      case 15: {
        if (tag == 120) {
         parse_inittime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inittime_)));
          set_has_inittime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_instance;
        break;
      }

      // optional string instance = 16;
      case 16: {
        if (tag == 130) {
         parse_instance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instance().data(), this->instance().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "instance");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_instancecode;
        break;
      }

      // optional string instancecode = 17;
      case 17: {
        if (tag == 138) {
         parse_instancecode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instancecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instancecode().data(), this->instancecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "instancecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_timeinfo;
        break;
      }

      // optional string timeinfo = 18;
      case 18: {
        if (tag == 146) {
         parse_timeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timeinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timeinfo().data(), this->timeinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "timeinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_db_dayid;
        break;
      }

      // optional int32 db_dayid = 19;
      case 19: {
        if (tag == 152) {
         parse_db_dayid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_dayid_)));
          set_has_db_dayid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_db_recognition_setup_id;
        break;
      }

      // optional int32 db_recognition_setup_id = 20;
      case 20: {
        if (tag == 160) {
         parse_db_recognition_setup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_recognition_setup_id_)));
          set_has_db_recognition_setup_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_recname;
        break;
      }

      // optional string recname = 21;
      case 21: {
        if (tag == 170) {
         parse_recname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recname().data(), this->recname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_camera;
        break;
      }

      // optional string camera = 22;
      case 22: {
        if (tag == 178) {
         parse_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera().data(), this->camera().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "camera");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_cameranumber;
        break;
      }

      // optional int32 cameranumber = 23;
      case 23: {
        if (tag == 184) {
         parse_cameranumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cameranumber_)));
          set_has_cameranumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Message.Instance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Message.Instance)
  return false;
#undef DO_
}

void Message_Instance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Message.Instance)
  // required int32 idinstance = 1;
  if (has_idinstance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->idinstance(), output);
  }

  // optional int32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number(), output);
  }

  // optional string instancestart = 3;
  if (has_instancestart()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instancestart().data(), this->instancestart().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instancestart");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->instancestart(), output);
  }

  // optional string instanceend = 4;
  if (has_instanceend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instanceend().data(), this->instanceend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instanceend");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->instanceend(), output);
  }

  // optional string fileformat = 5;
  if (has_fileformat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileformat().data(), this->fileformat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fileformat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->fileformat(), output);
  }

  // repeated .motion.Message.Image image = 6;
  for (int i = 0; i < this->image_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->image(i), output);
  }

  // repeated .motion.Message.Crop crop = 7;
  for (int i = 0; i < this->crop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->crop(i), output);
  }

  // optional .motion.Message.Video video = 8;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->video(), output);
  }

  // optional string dir = 9;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dir().data(), this->dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->dir(), output);
  }

  // optional string xmlfile = 10;
  if (has_xmlfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xmlfile().data(), this->xmlfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xmlfile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->xmlfile(), output);
  }

  // optional string extdata = 11;
  if (has_extdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extdata().data(), this->extdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->extdata(), output);
  }

  // optional string end = 12;
  if (has_end()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->end().data(), this->end().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "end");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->end(), output);
  }

  // optional int32 begintime = 13;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->begintime(), output);
  }

  // optional int32 endtime = 14;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->endtime(), output);
  }

  // optional int32 inittime = 15;
  if (has_inittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->inittime(), output);
  }

  // optional string instance = 16;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instance().data(), this->instance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instance");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->instance(), output);
  }

  // optional string instancecode = 17;
  if (has_instancecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instancecode().data(), this->instancecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instancecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->instancecode(), output);
  }

  // optional string timeinfo = 18;
  if (has_timeinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timeinfo().data(), this->timeinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timeinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->timeinfo(), output);
  }

  // optional int32 db_dayid = 19;
  if (has_db_dayid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->db_dayid(), output);
  }

  // optional int32 db_recognition_setup_id = 20;
  if (has_db_recognition_setup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->db_recognition_setup_id(), output);
  }

  // optional string recname = 21;
  if (has_recname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recname().data(), this->recname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->recname(), output);
  }

  // optional string camera = 22;
  if (has_camera()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera().data(), this->camera().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camera");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->camera(), output);
  }

  // optional int32 cameranumber = 23;
  if (has_cameranumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->cameranumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Message.Instance)
}

::google::protobuf::uint8* Message_Instance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Message.Instance)
  // required int32 idinstance = 1;
  if (has_idinstance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->idinstance(), target);
  }

  // optional int32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->number(), target);
  }

  // optional string instancestart = 3;
  if (has_instancestart()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instancestart().data(), this->instancestart().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instancestart");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->instancestart(), target);
  }

  // optional string instanceend = 4;
  if (has_instanceend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instanceend().data(), this->instanceend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instanceend");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->instanceend(), target);
  }

  // optional string fileformat = 5;
  if (has_fileformat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileformat().data(), this->fileformat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fileformat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->fileformat(), target);
  }

  // repeated .motion.Message.Image image = 6;
  for (int i = 0; i < this->image_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->image(i), target);
  }

  // repeated .motion.Message.Crop crop = 7;
  for (int i = 0; i < this->crop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->crop(i), target);
  }

  // optional .motion.Message.Video video = 8;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->video(), target);
  }

  // optional string dir = 9;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dir().data(), this->dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->dir(), target);
  }

  // optional string xmlfile = 10;
  if (has_xmlfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xmlfile().data(), this->xmlfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xmlfile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->xmlfile(), target);
  }

  // optional string extdata = 11;
  if (has_extdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extdata().data(), this->extdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->extdata(), target);
  }

  // optional string end = 12;
  if (has_end()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->end().data(), this->end().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "end");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->end(), target);
  }

  // optional int32 begintime = 13;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->begintime(), target);
  }

  // optional int32 endtime = 14;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->endtime(), target);
  }

  // optional int32 inittime = 15;
  if (has_inittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->inittime(), target);
  }

  // optional string instance = 16;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instance().data(), this->instance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instance");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->instance(), target);
  }

  // optional string instancecode = 17;
  if (has_instancecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instancecode().data(), this->instancecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instancecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->instancecode(), target);
  }

  // optional string timeinfo = 18;
  if (has_timeinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timeinfo().data(), this->timeinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timeinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->timeinfo(), target);
  }

  // optional int32 db_dayid = 19;
  if (has_db_dayid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->db_dayid(), target);
  }

  // optional int32 db_recognition_setup_id = 20;
  if (has_db_recognition_setup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->db_recognition_setup_id(), target);
  }

  // optional string recname = 21;
  if (has_recname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recname().data(), this->recname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->recname(), target);
  }

  // optional string camera = 22;
  if (has_camera()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera().data(), this->camera().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camera");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->camera(), target);
  }

  // optional int32 cameranumber = 23;
  if (has_cameranumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->cameranumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Message.Instance)
  return target;
}

int Message_Instance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 idinstance = 1;
    if (has_idinstance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idinstance());
    }

    // optional int32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // optional string instancestart = 3;
    if (has_instancestart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instancestart());
    }

    // optional string instanceend = 4;
    if (has_instanceend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instanceend());
    }

    // optional string fileformat = 5;
    if (has_fileformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fileformat());
    }

    // optional .motion.Message.Video video = 8;
    if (has_video()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string dir = 9;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dir());
    }

    // optional string xmlfile = 10;
    if (has_xmlfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xmlfile());
    }

    // optional string extdata = 11;
    if (has_extdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extdata());
    }

    // optional string end = 12;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end());
    }

    // optional int32 begintime = 13;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begintime());
    }

    // optional int32 endtime = 14;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }

    // optional int32 inittime = 15;
    if (has_inittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inittime());
    }

    // optional string instance = 16;
    if (has_instance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instance());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string instancecode = 17;
    if (has_instancecode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instancecode());
    }

    // optional string timeinfo = 18;
    if (has_timeinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timeinfo());
    }

    // optional int32 db_dayid = 19;
    if (has_db_dayid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_dayid());
    }

    // optional int32 db_recognition_setup_id = 20;
    if (has_db_recognition_setup_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_recognition_setup_id());
    }

    // optional string recname = 21;
    if (has_recname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recname());
    }

    // optional string camera = 22;
    if (has_camera()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camera());
    }

    // optional int32 cameranumber = 23;
    if (has_cameranumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cameranumber());
    }

  }
  // repeated .motion.Message.Image image = 6;
  total_size += 1 * this->image_size();
  for (int i = 0; i < this->image_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->image(i));
  }

  // repeated .motion.Message.Crop crop = 7;
  total_size += 1 * this->crop_size();
  for (int i = 0; i < this->crop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->crop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_Instance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_Instance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_Instance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_Instance::MergeFrom(const Message_Instance& from) {
  GOOGLE_CHECK_NE(&from, this);
  image_.MergeFrom(from.image_);
  crop_.MergeFrom(from.crop_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idinstance()) {
      set_idinstance(from.idinstance());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_instancestart()) {
      set_instancestart(from.instancestart());
    }
    if (from.has_instanceend()) {
      set_instanceend(from.instanceend());
    }
    if (from.has_fileformat()) {
      set_fileformat(from.fileformat());
    }
    if (from.has_video()) {
      mutable_video()->::motion::Message_Video::MergeFrom(from.video());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_xmlfile()) {
      set_xmlfile(from.xmlfile());
    }
    if (from.has_extdata()) {
      set_extdata(from.extdata());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_inittime()) {
      set_inittime(from.inittime());
    }
    if (from.has_instance()) {
      set_instance(from.instance());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_instancecode()) {
      set_instancecode(from.instancecode());
    }
    if (from.has_timeinfo()) {
      set_timeinfo(from.timeinfo());
    }
    if (from.has_db_dayid()) {
      set_db_dayid(from.db_dayid());
    }
    if (from.has_db_recognition_setup_id()) {
      set_db_recognition_setup_id(from.db_recognition_setup_id());
    }
    if (from.has_recname()) {
      set_recname(from.recname());
    }
    if (from.has_camera()) {
      set_camera(from.camera());
    }
    if (from.has_cameranumber()) {
      set_cameranumber(from.cameranumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_Instance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Instance::CopyFrom(const Message_Instance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Instance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Message_Instance::Swap(Message_Instance* other) {
  if (other != this) {
    std::swap(idinstance_, other->idinstance_);
    std::swap(number_, other->number_);
    std::swap(instancestart_, other->instancestart_);
    std::swap(instanceend_, other->instanceend_);
    std::swap(fileformat_, other->fileformat_);
    image_.Swap(&other->image_);
    crop_.Swap(&other->crop_);
    std::swap(video_, other->video_);
    std::swap(dir_, other->dir_);
    std::swap(xmlfile_, other->xmlfile_);
    std::swap(extdata_, other->extdata_);
    std::swap(end_, other->end_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(inittime_, other->inittime_);
    std::swap(instance_, other->instance_);
    std::swap(instancecode_, other->instancecode_);
    std::swap(timeinfo_, other->timeinfo_);
    std::swap(db_dayid_, other->db_dayid_);
    std::swap(db_recognition_setup_id_, other->db_recognition_setup_id_);
    std::swap(recname_, other->recname_);
    std::swap(camera_, other->camera_);
    std::swap(cameranumber_, other->cameranumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_Instance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_Instance_descriptor_;
  metadata.reflection = Message_Instance_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message_Image::kPathFieldNumber;
const int Message_Image::kNameFieldNumber;
const int Message_Image::kImagechangesFieldNumber;
const int Message_Image::kTimeFieldNumber;
#endif  // !_MSC_VER

Message_Image::Message_Image()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Message.Image)
}

void Message_Image::InitAsDefaultInstance() {
}

Message_Image::Message_Image(const Message_Image& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Message.Image)
}

void Message_Image::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagechanges_ = 0;
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_Image::~Message_Image() {
  // @@protoc_insertion_point(destructor:motion.Message.Image)
  SharedDtor();
}

void Message_Image::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void Message_Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Image_descriptor_;
}

const Message_Image& Message_Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Message_Image* Message_Image::default_instance_ = NULL;

Message_Image* Message_Image::New() const {
  return new Message_Image;
}

void Message_Image::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    imagechanges_ = 0;
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Message.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_imagechanges;
        break;
      }

      // optional int32 imagechanges = 3;
      case 3: {
        if (tag == 24) {
         parse_imagechanges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imagechanges_)));
          set_has_imagechanges();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_time;
        break;
      }

      // optional string time = 4;
      case 4: {
        if (tag == 34) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Message.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Message.Image)
  return false;
#undef DO_
}

void Message_Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Message.Image)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 imagechanges = 3;
  if (has_imagechanges()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->imagechanges(), output);
  }

  // optional string time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Message.Image)
}

::google::protobuf::uint8* Message_Image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Message.Image)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 imagechanges = 3;
  if (has_imagechanges()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->imagechanges(), target);
  }

  // optional string time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Message.Image)
  return target;
}

int Message_Image::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 imagechanges = 3;
    if (has_imagechanges()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imagechanges());
    }

    // optional string time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_Image::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_Image* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_Image*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_Image::MergeFrom(const Message_Image& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_imagechanges()) {
      set_imagechanges(from.imagechanges());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_Image::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Image::CopyFrom(const Message_Image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Image::IsInitialized() const {

  return true;
}

void Message_Image::Swap(Message_Image* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(name_, other->name_);
    std::swap(imagechanges_, other->imagechanges_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_Image_descriptor_;
  metadata.reflection = Message_Image_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message_Crop::kRectFieldNumber;
const int Message_Crop::kDbImagefatheridFieldNumber;
#endif  // !_MSC_VER

Message_Crop::Message_Crop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Message.Crop)
}

void Message_Crop::InitAsDefaultInstance() {
}

Message_Crop::Message_Crop(const Message_Crop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Message.Crop)
}

void Message_Crop::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_imagefatherid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_Crop::~Message_Crop() {
  // @@protoc_insertion_point(destructor:motion.Message.Crop)
  SharedDtor();
}

void Message_Crop::SharedDtor() {
  if (rect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rect_;
  }
  if (this != default_instance_) {
  }
}

void Message_Crop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_Crop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Crop_descriptor_;
}

const Message_Crop& Message_Crop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Message_Crop* Message_Crop::default_instance_ = NULL;

Message_Crop* Message_Crop::New() const {
  return new Message_Crop;
}

void Message_Crop::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_rect()) {
      if (rect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rect_->clear();
      }
    }
    db_imagefatherid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_Crop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Message.Crop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string rect = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rect().data(), this->rect().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rect");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_db_imagefatherid;
        break;
      }

      // optional int32 db_imagefatherid = 2;
      case 2: {
        if (tag == 16) {
         parse_db_imagefatherid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_imagefatherid_)));
          set_has_db_imagefatherid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Message.Crop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Message.Crop)
  return false;
#undef DO_
}

void Message_Crop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Message.Crop)
  // optional string rect = 1;
  if (has_rect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rect().data(), this->rect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rect(), output);
  }

  // optional int32 db_imagefatherid = 2;
  if (has_db_imagefatherid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->db_imagefatherid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Message.Crop)
}

::google::protobuf::uint8* Message_Crop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Message.Crop)
  // optional string rect = 1;
  if (has_rect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rect().data(), this->rect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rect(), target);
  }

  // optional int32 db_imagefatherid = 2;
  if (has_db_imagefatherid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->db_imagefatherid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Message.Crop)
  return target;
}

int Message_Crop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string rect = 1;
    if (has_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rect());
    }

    // optional int32 db_imagefatherid = 2;
    if (has_db_imagefatherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_imagefatherid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_Crop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_Crop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_Crop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_Crop::MergeFrom(const Message_Crop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rect()) {
      set_rect(from.rect());
    }
    if (from.has_db_imagefatherid()) {
      set_db_imagefatherid(from.db_imagefatherid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_Crop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Crop::CopyFrom(const Message_Crop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Crop::IsInitialized() const {

  return true;
}

void Message_Crop::Swap(Message_Crop* other) {
  if (other != this) {
    std::swap(rect_, other->rect_);
    std::swap(db_imagefatherid_, other->db_imagefatherid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_Crop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_Crop_descriptor_;
  metadata.reflection = Message_Crop_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message_Video::kPathFieldNumber;
const int Message_Video::kNameFieldNumber;
const int Message_Video::kInstancefolderFieldNumber;
#endif  // !_MSC_VER

Message_Video::Message_Video()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Message.Video)
}

void Message_Video::InitAsDefaultInstance() {
}

Message_Video::Message_Video(const Message_Video& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Message.Video)
}

void Message_Video::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instancefolder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_Video::~Message_Video() {
  // @@protoc_insertion_point(destructor:motion.Message.Video)
  SharedDtor();
}

void Message_Video::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (instancefolder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete instancefolder_;
  }
  if (this != default_instance_) {
  }
}

void Message_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_Video::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Video_descriptor_;
}

const Message_Video& Message_Video::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Message_Video* Message_Video::default_instance_ = NULL;

Message_Video* Message_Video::New() const {
  return new Message_Video;
}

void Message_Video::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_instancefolder()) {
      if (instancefolder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        instancefolder_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Message.Video)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_instancefolder;
        break;
      }

      // optional string instancefolder = 3;
      case 3: {
        if (tag == 26) {
         parse_instancefolder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instancefolder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instancefolder().data(), this->instancefolder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "instancefolder");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Message.Video)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Message.Video)
  return false;
#undef DO_
}

void Message_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Message.Video)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string instancefolder = 3;
  if (has_instancefolder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instancefolder().data(), this->instancefolder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instancefolder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->instancefolder(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Message.Video)
}

::google::protobuf::uint8* Message_Video::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Message.Video)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string instancefolder = 3;
  if (has_instancefolder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instancefolder().data(), this->instancefolder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instancefolder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->instancefolder(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Message.Video)
  return target;
}

int Message_Video::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string instancefolder = 3;
    if (has_instancefolder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instancefolder());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_Video::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_Video* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_Video*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_Video::MergeFrom(const Message_Video& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_instancefolder()) {
      set_instancefolder(from.instancefolder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_Video::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Video::CopyFrom(const Message_Video& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Video::IsInitialized() const {

  return true;
}

void Message_Video::Swap(Message_Video* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(name_, other->name_);
    std::swap(instancefolder_, other->instancefolder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_Video::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_Video_descriptor_;
  metadata.reflection = Message_Video_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message::kActivecamFieldNumber;
const int Message::kTypeFieldNumber;
const int Message::kMotionuserFieldNumber;
const int Message::kMotioncameraFieldNumber;
const int Message::kMotiondeviceFieldNumber;
const int Message::kTimeFieldNumber;
const int Message::kDataFieldNumber;
const int Message::kDataAmountFieldNumber;
const int Message::kDataTotalFieldNumber;
const int Message::kServeripFieldNumber;
const int Message::kClientipFieldNumber;
const int Message::kDevicestarttimeFieldNumber;
const int Message::kCurrmonthFieldNumber;
const int Message::kCurrdayFieldNumber;
const int Message::kCurrdaytitleFieldNumber;
const int Message::kCurrcamFieldNumber;
const int Message::kPackagesizeFieldNumber;
const int Message::kImagefilepathFieldNumber;
const int Message::kVideofilepathFieldNumber;
const int Message::kRecnameFieldNumber;
const int Message::kActivecamnumFieldNumber;
const int Message::kIncludethubmnailsFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Message)
}

void Message::InitAsDefaultInstance() {
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Message)
}

void Message::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  activecam_ = 0;
  type_ = 1000;
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_amount_ = 0;
  data_total_ = 0;
  serverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicestarttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currmonth_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currday_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currdaytitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currcam_ = 0;
  packagesize_ = 0;
  imagefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videofilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activecamnum_ = 0;
  includethubmnails_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:motion.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (serverip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverip_;
  }
  if (clientip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientip_;
  }
  if (devicestarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicestarttime_;
  }
  if (currmonth_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currmonth_;
  }
  if (currday_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currday_;
  }
  if (currdaytitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currdaytitle_;
  }
  if (imagefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagefilepath_;
  }
  if (videofilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete videofilepath_;
  }
  if (recname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recname_;
  }
  if (this != default_instance_) {
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Message*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 227) {
    activecam_ = 0;
    type_ = 1000;
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    data_amount_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    data_total_ = 0;
    if (has_serverip()) {
      if (serverip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverip_->clear();
      }
    }
    if (has_clientip()) {
      if (clientip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clientip_->clear();
      }
    }
    if (has_devicestarttime()) {
      if (devicestarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devicestarttime_->clear();
      }
    }
    if (has_currmonth()) {
      if (currmonth_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        currmonth_->clear();
      }
    }
    if (has_currday()) {
      if (currday_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        currday_->clear();
      }
    }
    if (has_currdaytitle()) {
      if (currdaytitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        currdaytitle_->clear();
      }
    }
    currcam_ = 0;
  }
  if (_has_bits_[16 / 32] & 4128768) {
    ZR_(activecamnum_, includethubmnails_);
    packagesize_ = 0;
    if (has_imagefilepath()) {
      if (imagefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imagefilepath_->clear();
      }
    }
    if (has_videofilepath()) {
      if (videofilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        videofilepath_->clear();
      }
    }
    if (has_recname()) {
      if (recname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        recname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  motionuser_.Clear();
  motioncamera_.Clear();
  motiondevice_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 activecam = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activecam_)));
          set_has_activecam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .motion.Message.ActionType type = 2 [default = ENGAGE];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::motion::Message_ActionType_IsValid(value)) {
            set_type(static_cast< ::motion::Message_ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_motionuser;
        break;
      }

      // repeated .motion.Message.MotionUser motionuser = 3;
      case 3: {
        if (tag == 26) {
         parse_motionuser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_motionuser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_motionuser;
        if (input->ExpectTag(34)) goto parse_motioncamera;
        break;
      }

      // repeated .motion.Message.MotionCamera motioncamera = 4;
      case 4: {
        if (tag == 34) {
         parse_motioncamera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_motioncamera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_motioncamera;
        if (input->ExpectTag(42)) goto parse_motiondevice;
        break;
      }

      // repeated .motion.Message.MotionDevice motiondevice = 5;
      case 5: {
        if (tag == 42) {
         parse_motiondevice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_motiondevice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_motiondevice;
        if (input->ExpectTag(50)) goto parse_time;
        break;
      }

      // optional string time = 6;
      case 6: {
        if (tag == 50) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data;
        break;
      }

      // optional bytes data = 7;
      case 7: {
        if (tag == 58) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_data_amount;
        break;
      }

      // optional int32 data_amount = 8;
      case 8: {
        if (tag == 64) {
         parse_data_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_amount_)));
          set_has_data_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_data_total;
        break;
      }

      // optional int32 data_total = 9;
      case 9: {
        if (tag == 72) {
         parse_data_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_total_)));
          set_has_data_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_serverip;
        break;
      }

      // optional string serverip = 10;
      case 10: {
        if (tag == 82) {
         parse_serverip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverip().data(), this->serverip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_clientip;
        break;
      }

      // optional string clientip = 11;
      case 11: {
        if (tag == 90) {
         parse_clientip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientip().data(), this->clientip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clientip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_devicestarttime;
        break;
      }

      // optional string devicestarttime = 12;
      case 12: {
        if (tag == 98) {
         parse_devicestarttime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicestarttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicestarttime().data(), this->devicestarttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devicestarttime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_currmonth;
        break;
      }

      // optional string currmonth = 13;
      case 13: {
        if (tag == 106) {
         parse_currmonth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currmonth()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currmonth().data(), this->currmonth().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "currmonth");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_currday;
        break;
      }

      // optional string currday = 14;
      case 14: {
        if (tag == 114) {
         parse_currday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currday().data(), this->currday().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "currday");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_currdaytitle;
        break;
      }

      // optional string currdaytitle = 15;
      case 15: {
        if (tag == 122) {
         parse_currdaytitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currdaytitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currdaytitle().data(), this->currdaytitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "currdaytitle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_currcam;
        break;
      }

      // optional int32 currcam = 16;
      case 16: {
        if (tag == 128) {
         parse_currcam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currcam_)));
          set_has_currcam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_packagesize;
        break;
      }

      // optional int32 packagesize = 17;
      case 17: {
        if (tag == 136) {
         parse_packagesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packagesize_)));
          set_has_packagesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_imagefilepath;
        break;
      }

      // optional string imagefilepath = 18;
      case 18: {
        if (tag == 146) {
         parse_imagefilepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagefilepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imagefilepath().data(), this->imagefilepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "imagefilepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_videofilepath;
        break;
      }

      // optional string videofilepath = 19;
      case 19: {
        if (tag == 154) {
         parse_videofilepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videofilepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->videofilepath().data(), this->videofilepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "videofilepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_recname;
        break;
      }

      // optional string recname = 20;
      case 20: {
        if (tag == 162) {
         parse_recname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recname().data(), this->recname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_activecamnum;
        break;
      }

      // optional int32 activecamnum = 21;
      case 21: {
        if (tag == 168) {
         parse_activecamnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activecamnum_)));
          set_has_activecamnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_includethubmnails;
        break;
      }

      // optional bool includethubmnails = 22;
      case 22: {
        if (tag == 176) {
         parse_includethubmnails:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includethubmnails_)));
          set_has_includethubmnails();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Message)
  // optional int32 activecam = 1;
  if (has_activecam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activecam(), output);
  }

  // required .motion.Message.ActionType type = 2 [default = ENGAGE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated .motion.Message.MotionUser motionuser = 3;
  for (int i = 0; i < this->motionuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->motionuser(i), output);
  }

  // repeated .motion.Message.MotionCamera motioncamera = 4;
  for (int i = 0; i < this->motioncamera_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->motioncamera(i), output);
  }

  // repeated .motion.Message.MotionDevice motiondevice = 5;
  for (int i = 0; i < this->motiondevice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->motiondevice(i), output);
  }

  // optional string time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->time(), output);
  }

  // optional bytes data = 7;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->data(), output);
  }

  // optional int32 data_amount = 8;
  if (has_data_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->data_amount(), output);
  }

  // optional int32 data_total = 9;
  if (has_data_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->data_total(), output);
  }

  // optional string serverip = 10;
  if (has_serverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverip().data(), this->serverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->serverip(), output);
  }

  // optional string clientip = 11;
  if (has_clientip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientip().data(), this->clientip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->clientip(), output);
  }

  // optional string devicestarttime = 12;
  if (has_devicestarttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicestarttime().data(), this->devicestarttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicestarttime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->devicestarttime(), output);
  }

  // optional string currmonth = 13;
  if (has_currmonth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currmonth().data(), this->currmonth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currmonth");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->currmonth(), output);
  }

  // optional string currday = 14;
  if (has_currday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currday().data(), this->currday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currday");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->currday(), output);
  }

  // optional string currdaytitle = 15;
  if (has_currdaytitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currdaytitle().data(), this->currdaytitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currdaytitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->currdaytitle(), output);
  }

  // optional int32 currcam = 16;
  if (has_currcam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->currcam(), output);
  }

  // optional int32 packagesize = 17;
  if (has_packagesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->packagesize(), output);
  }

  // optional string imagefilepath = 18;
  if (has_imagefilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imagefilepath().data(), this->imagefilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imagefilepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->imagefilepath(), output);
  }

  // optional string videofilepath = 19;
  if (has_videofilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->videofilepath().data(), this->videofilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "videofilepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->videofilepath(), output);
  }

  // optional string recname = 20;
  if (has_recname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recname().data(), this->recname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->recname(), output);
  }

  // optional int32 activecamnum = 21;
  if (has_activecamnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->activecamnum(), output);
  }

  // optional bool includethubmnails = 22;
  if (has_includethubmnails()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->includethubmnails(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Message)
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Message)
  // optional int32 activecam = 1;
  if (has_activecam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activecam(), target);
  }

  // required .motion.Message.ActionType type = 2 [default = ENGAGE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated .motion.Message.MotionUser motionuser = 3;
  for (int i = 0; i < this->motionuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->motionuser(i), target);
  }

  // repeated .motion.Message.MotionCamera motioncamera = 4;
  for (int i = 0; i < this->motioncamera_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->motioncamera(i), target);
  }

  // repeated .motion.Message.MotionDevice motiondevice = 5;
  for (int i = 0; i < this->motiondevice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->motiondevice(i), target);
  }

  // optional string time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->time(), target);
  }

  // optional bytes data = 7;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->data(), target);
  }

  // optional int32 data_amount = 8;
  if (has_data_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->data_amount(), target);
  }

  // optional int32 data_total = 9;
  if (has_data_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->data_total(), target);
  }

  // optional string serverip = 10;
  if (has_serverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverip().data(), this->serverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->serverip(), target);
  }

  // optional string clientip = 11;
  if (has_clientip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientip().data(), this->clientip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->clientip(), target);
  }

  // optional string devicestarttime = 12;
  if (has_devicestarttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicestarttime().data(), this->devicestarttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicestarttime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->devicestarttime(), target);
  }

  // optional string currmonth = 13;
  if (has_currmonth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currmonth().data(), this->currmonth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currmonth");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->currmonth(), target);
  }

  // optional string currday = 14;
  if (has_currday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currday().data(), this->currday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currday");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->currday(), target);
  }

  // optional string currdaytitle = 15;
  if (has_currdaytitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currdaytitle().data(), this->currdaytitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currdaytitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->currdaytitle(), target);
  }

  // optional int32 currcam = 16;
  if (has_currcam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->currcam(), target);
  }

  // optional int32 packagesize = 17;
  if (has_packagesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->packagesize(), target);
  }

  // optional string imagefilepath = 18;
  if (has_imagefilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imagefilepath().data(), this->imagefilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imagefilepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->imagefilepath(), target);
  }

  // optional string videofilepath = 19;
  if (has_videofilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->videofilepath().data(), this->videofilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "videofilepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->videofilepath(), target);
  }

  // optional string recname = 20;
  if (has_recname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recname().data(), this->recname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->recname(), target);
  }

  // optional int32 activecamnum = 21;
  if (has_activecamnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->activecamnum(), target);
  }

  // optional bool includethubmnails = 22;
  if (has_includethubmnails()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->includethubmnails(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Message)
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 activecam = 1;
    if (has_activecam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activecam());
    }

    // required .motion.Message.ActionType type = 2 [default = ENGAGE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // optional bytes data = 7;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 data_amount = 8;
    if (has_data_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_amount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 data_total = 9;
    if (has_data_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_total());
    }

    // optional string serverip = 10;
    if (has_serverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverip());
    }

    // optional string clientip = 11;
    if (has_clientip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientip());
    }

    // optional string devicestarttime = 12;
    if (has_devicestarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicestarttime());
    }

    // optional string currmonth = 13;
    if (has_currmonth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currmonth());
    }

    // optional string currday = 14;
    if (has_currday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currday());
    }

    // optional string currdaytitle = 15;
    if (has_currdaytitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currdaytitle());
    }

    // optional int32 currcam = 16;
    if (has_currcam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currcam());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 packagesize = 17;
    if (has_packagesize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packagesize());
    }

    // optional string imagefilepath = 18;
    if (has_imagefilepath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imagefilepath());
    }

    // optional string videofilepath = 19;
    if (has_videofilepath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->videofilepath());
    }

    // optional string recname = 20;
    if (has_recname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recname());
    }

    // optional int32 activecamnum = 21;
    if (has_activecamnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activecamnum());
    }

    // optional bool includethubmnails = 22;
    if (has_includethubmnails()) {
      total_size += 2 + 1;
    }

  }
  // repeated .motion.Message.MotionUser motionuser = 3;
  total_size += 1 * this->motionuser_size();
  for (int i = 0; i < this->motionuser_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->motionuser(i));
  }

  // repeated .motion.Message.MotionCamera motioncamera = 4;
  total_size += 1 * this->motioncamera_size();
  for (int i = 0; i < this->motioncamera_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->motioncamera(i));
  }

  // repeated .motion.Message.MotionDevice motiondevice = 5;
  total_size += 1 * this->motiondevice_size();
  for (int i = 0; i < this->motiondevice_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->motiondevice(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  motionuser_.MergeFrom(from.motionuser_);
  motioncamera_.MergeFrom(from.motioncamera_);
  motiondevice_.MergeFrom(from.motiondevice_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activecam()) {
      set_activecam(from.activecam());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_data_amount()) {
      set_data_amount(from.data_amount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_data_total()) {
      set_data_total(from.data_total());
    }
    if (from.has_serverip()) {
      set_serverip(from.serverip());
    }
    if (from.has_clientip()) {
      set_clientip(from.clientip());
    }
    if (from.has_devicestarttime()) {
      set_devicestarttime(from.devicestarttime());
    }
    if (from.has_currmonth()) {
      set_currmonth(from.currmonth());
    }
    if (from.has_currday()) {
      set_currday(from.currday());
    }
    if (from.has_currdaytitle()) {
      set_currdaytitle(from.currdaytitle());
    }
    if (from.has_currcam()) {
      set_currcam(from.currcam());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_packagesize()) {
      set_packagesize(from.packagesize());
    }
    if (from.has_imagefilepath()) {
      set_imagefilepath(from.imagefilepath());
    }
    if (from.has_videofilepath()) {
      set_videofilepath(from.videofilepath());
    }
    if (from.has_recname()) {
      set_recname(from.recname());
    }
    if (from.has_activecamnum()) {
      set_activecamnum(from.activecamnum());
    }
    if (from.has_includethubmnails()) {
      set_includethubmnails(from.includethubmnails());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->motioncamera())) return false;
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(activecam_, other->activecam_);
    std::swap(type_, other->type_);
    motionuser_.Swap(&other->motionuser_);
    motioncamera_.Swap(&other->motioncamera_);
    motiondevice_.Swap(&other->motiondevice_);
    std::swap(time_, other->time_);
    std::swap(data_, other->data_);
    std::swap(data_amount_, other->data_amount_);
    std::swap(data_total_, other->data_total_);
    std::swap(serverip_, other->serverip_);
    std::swap(clientip_, other->clientip_);
    std::swap(devicestarttime_, other->devicestarttime_);
    std::swap(currmonth_, other->currmonth_);
    std::swap(currday_, other->currday_);
    std::swap(currdaytitle_, other->currdaytitle_);
    std::swap(currcam_, other->currcam_);
    std::swap(packagesize_, other->packagesize_);
    std::swap(imagefilepath_, other->imagefilepath_);
    std::swap(videofilepath_, other->videofilepath_);
    std::swap(recname_, other->recname_);
    std::swap(activecamnum_, other->activecamnum_);
    std::swap(includethubmnails_, other->includethubmnails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace motion

// @@protoc_insertion_point(global_scope)
